{"version":3,"sources":["packages/ext/hash/libs/encoders/hash/Sha256Hasher.ts","crypto/bundles/transport/domain/enums/DocumentTypeEnum.ts","crypto/bundles/key/domain/helpers/CryptoHashHelper.ts","crypto/bundles/key/domain/helpers/CryptoKeyHelper.ts","crypto/bundles/signature/domain/libs/bitcoin/DocumentFormat.ts","crypto/bundles/signature/domain/entities/SignatureEntity.ts","packages/ext/hash/enums/HashAlgorithmEnum.ts","packages/ext/binary/helpers/ConvHelper.ts","packages/ext/hash/libs/encoders/hash/BaseHasher.ts","crypto/bundles/signature/domain/libs/encoders/PemEncoder.ts","crypto/bundles/signature/domain/libs/bitcoin/BitcoinSigner.ts","packages/ext/hash/libs/encoders/hash/Sha1Hasher.ts","packages/ext/hash/libs/encoders/hash/Sha224Hasher.ts","packages/ext/hash/libs/encoders/hash/Sha512Hasher.ts","packages/ext/hash/libs/encoders/hash/Sha384Hasher.ts","packages/ext/hash/libs/encoders/hash/Sha3Hasher.ts","packages/ext/hash/libs/encoders/hash/Ripemd160Hasher.ts","packages/ext/hash/libs/encoders/hash/Md5Hasher.ts","packages/ext/hash/config/hashClassMap.ts","packages/ext/hash/libs/encoders/hash/PolymorphicHasher.ts","packages/ext/hash/helpers/HashHelper.ts","crypto/bundles/signature/domain/entities/VerifyEntity.ts","crypto/bundles/signature/domain/libs/CoinMsg.ts","crypto/bundles/signature/domain/libs/fork/format.js","packages/ext/object/helpers/ObjectHelper.ts","crypto/bundles/signature/domain/libs/MessageSigner.ts","crypto/bundles/signature/domain/factories/cryptoFactory.ts","packages/ext/baseX/libs/encoders/HexEncoder.ts","packages/core/container/libs/DiConfigurator.ts","packages/core/container/singletons/diConfigurator.ts","packages/core/container/libs/Container.ts","packages/core/container/singletons/container.ts","packages/core/container/singletons/init.ts","packages/core/container/factories/diFactory.ts","packages/core/configManager/libs/BaseConfigManager.ts","packages/core/configManager/singletons/configManager.ts","packages/ext/array/ArrayNestedHelper.ts","packages/ext/array/ArrayHelper.ts","common/app/domain/enums/RouterTypeEnum.ts","packages/ext/html/helpers/UrlHelper.ts","common/app/config/server.ts","common/app/config/config.ts","common/app/domain/libs/initConfigManager.ts","packages/core/domain/enums/CrudActionEnum.ts","packages/core/state/reducers/BaseCrudReducer.ts","packages/core/state/reducers/CrudReducer.ts","packages/core/state/base/BaseStateRepository.ts","packages/core/state/base/BaseCrudStateRepository.ts","packages/bundles/loader/domain/repositories/state/StatusRepository.ts","packages/core/domain/services/BaseService.ts","packages/bundles/loader/domain/services/StatusService.ts","packages/core/state/libs/ReduceConfigurator.ts","packages/core/state/singletons/reduceConfigurator.ts","packages/bundles/loader/domain/index.ts","packages/bundles/loader/domain/config/di.ts","packages/bundles/loader/domain/config/reducer.ts","packages/bundles/help/domain/singletons/helpConfigurator.ts","packages/core/domain/libs/Query.ts","packages/core/domain/libs/DataProvider.ts","packages/core/domain/libs/Paginator.ts","packages/ext/string/helpers/TemplateHelper.ts","packages/bundles/help/domain/helpers/HelpEntityHelper.ts","packages/bundles/help/domain/repositories/array/ArticleRepository.ts","packages/core/domain/services/BaseCrudService.ts","packages/bundles/help/domain/services/ArticleService.ts","packages/bundles/help/domain/config/di.ts","packages/bundles/help/domain/index.ts","packages/bundles/modal/web/views/confirmModalFooter.tsx","packages/bundles/modal/domain/services/ConfirmService.ts","packages/bundles/modal/domain/repositories/state/ModalRepository.ts","packages/bundles/modal/domain/services/ModalService.ts","packages/bundles/modal/domain/index.ts","packages/bundles/modal/domain/config/di.ts","packages/bundles/modal/domain/config/reducer.ts","packages/bundles/user/security/domain/repositories/state/IdentityRepository.ts","packages/core/contract/errors/NotImplementedMethodError.ts","packages/ext/permanentStorage/interfaces/StorageInterface.ts","packages/ext/encoders/helpers/EncodeHelper.ts","packages/ext/jsonBinary/libs/BinaryEncoderHandler.ts","packages/ext/jsonBinary/libs/encoders/BinaryEncoder.ts","packages/ext/encoders/libs/encoders/ChainEncoder.ts","packages/ext/json/libs/encoders/JsonEncoder.ts","packages/ext/jsonBinary/libs/encoders/JsonBinaryEncoder.ts","packages/ext/permanentStorage/driver/LocalStorage.ts","packages/ext/permanentStorage/base/BasePermanentStorageRepository.ts","packages/ext/permanentStorage/interfaces/StorageRepositoryInterface.ts","packages/ext/permanentStorage/base/BaseLocalStorageRepository.ts","packages/bundles/user/security/domain/entities/token/TokenEntity.ts","packages/bundles/user/security/domain/repositories/localStorage/TokenRepository.ts","packages/bundles/user/security/domain/entities/token/NullTokenEntity.ts","packages/core/event/singletons/eventEmitter.ts","packages/bundles/user/security/domain/enums/SecurityEventEnum.ts","packages/bundles/user/security/domain/services/UserProviderService.ts","packages/bundles/user/security/domain/index.ts","packages/bundles/user/security/domain/config/di.ts","packages/bundles/user/security/domain/config/reducer.ts","packages/bundles/user/security/domain/singletons/userProviderFacade.ts","packages/bundles/user/rbac/domain/services/RbacProviderService.ts","packages/bundles/user/rbac/domain/index.ts","packages/bundles/user/rbac/domain/config/di.ts","packages/bundles/language/domain/locales/index.ts","packages/bundles/language/domain/repositories/localStorage/LocaleRepository.ts","packages/bundles/language/domain/repositories/json/LanguageRepository.ts","packages/bundles/i18next/domain/libs/I18nextConfigurator.ts","packages/bundles/i18next/domain/singletons/i18nextConfigurator.ts","packages/bundles/language/domain/services/SwitchService.ts","packages/bundles/language/domain/services/LanguageService.ts","packages/bundles/language/domain/index.ts","packages/bundles/language/domain/config/di.ts","packages/bundles/notify/domain/services/repositories/react-toastify/ToastRepository.ts","packages/bundles/notify/domain/entities/ToastEntity.ts","packages/bundles/notify/domain/services/ToastService.ts","packages/bundles/notify/domain/config/di.ts","packages/bundles/notify/domain/index.ts","packages/bundles/rpc/enums/RpcEventEnum.ts","packages/ext/app/helpers/EnvHelper.ts","packages/core/event/singletons/eventConfigurator.ts","packages/core/event/libs/EventConfigurator.ts","packages/bundles/rpc/config/eventDev.ts","packages/bundles/rpc/repositories/http/TransportRepository.ts","packages/core/contract/errors/UnauthorizedError.ts","packages/core/contract/errors/UnprocessableEntityError.ts","packages/bundles/rpc/services/ClientService.ts","packages/bundles/rpc/libs/encoders/RequestEncoder.ts","packages/bundles/rpc/libs/encoders/ResponseEncoder.ts","packages/bundles/rpc/config/di.ts","packages/bundles/rpc/index.ts","packages/bundles/breadcrumb/domain/repositories/state/ItemRepository.ts","packages/bundles/breadcrumb/domain/services/BreadcrumbService.ts","packages/bundles/breadcrumb/domain/index.tsx","packages/bundles/breadcrumb/domain/config/di.ts","packages/bundles/breadcrumb/domain/config/reducer.ts","packages/bundles/webSocket/services/ConnectionService.ts","packages/bundles/webSocket/enums/socketEventEnum.ts","packages/bundles/webSocket/entities/SocketEventEntity.ts","packages/bundles/webSocket/libs/SocketEventHandler.ts","packages/bundles/webSocket/config/di.ts","packages/bundles/webSocket/index.ts","packages/bundles/rpc/repositories/base/BaseRpcRepository.ts","packages/bundles/crypt/repositories/rpc/DocumentRepository.ts","packages/bundles/crypt/services/DocumentService.ts","packages/bundles/crypt/config/di.ts","packages/bundles/crypt/index.ts","packages/bundles/e2ee/domain/enums/HandShakeEventEnum.ts","packages/bundles/e2ee/domain/config/event.tsx","packages/bundles/e2ee/domain/services/P2pService.ts","packages/bundles/e2ee/domain/repositories/localStorage/SessionRepository.ts","packages/ext/time/helpers/TimeHelper.ts","packages/bundles/e2ee/domain/repositories/p2p/HandShakeRepository.ts","packages/bundles/e2ee/domain/services/SessionService.ts","packages/bundles/aes/domain/entities/AesDataEntity.ts","packages/ext/string/libs/encoders/Utf8Encoder.ts","packages/ext/hash/libs/encoders/hmac/HmacSha256Hasher.ts","packages/bundles/aes/domain/libs/AesEncryption.ts","packages/ext/baseX/libs/encoders/Base64Encoder.ts","packages/bundles/aes/domain/libs/format/StringFormat.ts","packages/bundles/aes/domain/libs/FormatEncryption.ts","packages/bundles/aes/domain/factories/AesFactory.ts","packages/bundles/e2ee/domain/services/TunnelService.ts","packages/bundles/notify/domain/facades/toastFacade.ts","crypto/bundles/transport/domain/base/BaseP2pController.ts","packages/bundles/e2ee/p2p/controllers/HandShakeController.ts","packages/bundles/e2ee/domain/config/di.ts","packages/bundles/e2ee/domain/index.ts","common/bundles/messenger/domain/enums/MessengerEventEnum.ts","common/bundles/messenger/web/components/messageForm.tsx","common/bundles/messenger/domain/config/event.tsx","packages/bundles/rpc/repositories/base/BaseCrudRpcRepository.ts","common/bundles/messenger/domain/repositories/rpc/ChatRepository.ts","common/bundles/messenger/domain/repositories/rpc/MessageRepository.ts","common/bundles/messenger/domain/repositories/state/ChatRepository.ts","common/bundles/messenger/domain/repositories/state/MessageRepository.ts","common/bundles/messenger/domain/services/ChatService.ts","common/bundles/messenger/domain/services/MessageService.ts","common/bundles/messenger/domain/index.ts","common/bundles/messenger/domain/config/di.ts","common/bundles/messenger/domain/config/reducer.ts","common/bundles/user/registration/domain/locales/index.ts","common/bundles/user/registration/domain/locales/ru/index.ts","common/bundles/user/registration/domain/repositories/rpc/RegistrationApiRepository.ts","common/bundles/user/registration/domain/repositories/localStorage/RegistrationRequestFormRepository.ts","common/bundles/user/registration/domain/services/RegistrationService.ts","common/bundles/user/registration/domain/index.ts","common/bundles/user/registration/domain/config/di.ts","common/bundles/user/password/domain/locales/index.ts","common/bundles/user/password/domain/locales/ru/index.ts","common/bundles/user/password/domain/repositories/rpc/RestorePasswordRepository.ts","common/bundles/user/password/domain/repositories/rpc/UpdatePasswordRepository.ts","common/bundles/user/password/domain/repositories/localStorage/RestorePasswordRepository.ts","common/bundles/user/password/domain/services/RestorePasswordService.ts","common/bundles/user/password/domain/services/UpdatePasswordService.ts","common/bundles/user/password/domain/index.ts","common/bundles/user/password/domain/config/di.ts","common/bundles/user/authorization/domain/locales/index.ts","common/bundles/user/authorization/domain/locales/ru/index.ts","common/bundles/user/authorization/domain/repositories/rpc/AuthRepository.ts","common/bundles/user/authorization/domain/services/AuthService.ts","common/bundles/user/authorization/domain/index.ts","common/bundles/user/authorization/domain/config/di.ts","common/bundles/notification/domain/locales/index.ts","common/bundles/notification/domain/locales/ru/index.ts","packages/core/domain/base/array/BaseCrudArrayRepository.ts","common/bundles/notification/domain/repositories/array/SummaryRepository.ts","common/bundles/notification/domain/services/SummaryService.ts","common/bundles/notification/domain/index.ts","common/bundles/notification/domain/config/di.ts","sandbox/bundles/i18next/domain/locales/index.ts","sandbox/bundles/i18next/domain/locales/ru/index.ts","sandbox/bundles/i18next/domain/index.ts","packages/ext/hash/libs/encoders/hash/Pbkdf2Hasher.ts","crypto/bundles/encode/domain/libs/chainHash/Pbkdf2ChainHash.ts","crypto/bundles/user/authorization/domain/libs/loginKey/Pbkdf2LoginKey.ts","crypto/bundles/user/authorization/domain/libs/loginKey/BaseLoginKey.ts","crypto/bundles/key/domain/libs/HdKey.ts","crypto/bundles/key/domain/helpers/MnemonicHelper.ts","crypto/bundles/user/authorization/domain/helpers/TokenHelper.ts","packages/ext/baseX/libs/encoders/BaseXEncoder.ts","packages/ext/baseX/libs/encoders/AbstractBaseXEncoder.ts","packages/ext/baseX/enums/AlphabetEnum.ts","packages/ext/baseX/libs/encoders/Base94Encoder.ts","packages/ext/app/repositories/config/ConnectionRepository.ts","crypto/bundles/user/authorization/domain/services/AuthService.ts","crypto/bundles/user/authorization/domain/config/di.ts","crypto/bundles/user/authorization/domain/index.ts","crypto/bundles/key/domain/repositories/localStorage/KeyRepository.ts","crypto/bundles/signature/domain/services/SignerService.ts","crypto/bundles/signature/domain/config/di.ts","crypto/bundles/signature/domain/index.ts","crypto/bundles/messenger/p2p/controllers/MessengerController.ts","crypto/bundles/transport/domain/libs/P2pHandler.ts","crypto/bundles/transport/domain/config/event.tsx","crypto/bundles/transport/domain/config/di.ts","crypto/bundles/transport/domain/index.ts","packages/ext/baseX/libs/encoders/Base58Encoder.ts","packages/bundles/e2ee/domain/entities/P2pRequestEntity.ts","crypto/bundles/messenger/domain/services/MessageService.ts","crypto/bundles/messenger/domain/config/di.ts","crypto/bundles/messenger/domain/index.ts","crypto/bundles/encrypt/domain/config/di.ts","crypto/bundles/encrypt/domain/index.ts","crypto/bundles/key/domain/repositories/localStorage/HdKeyRepository.ts","crypto/bundles/key/domain/services/KeyService.ts","crypto/bundles/key/domain/config/di.ts","crypto/bundles/key/domain/index.ts","incloud/bundles/shop/domain/repositories/rpc/CategoryRepository.ts","incloud/bundles/shop/domain/repositories/rpc/ProductRepository.ts","incloud/bundles/shop/domain/repositories/state/CategoryRepository.ts","incloud/bundles/shop/domain/services/CategoryService.ts","incloud/bundles/shop/domain/services/ProductService.ts","incloud/bundles/shop/domain/repositories/rpc/OrderRepository.ts","incloud/bundles/shop/domain/services/OrderService.ts","incloud/bundles/shop/domain/index.ts","incloud/bundles/shop/domain/config/di.ts","incloud/bundles/shop/domain/config/reducer.ts","incloud/bundles/company/domain/config/di.ts","incloud/bundles/company/domain/index.ts","tool/bundles/utils/domain/help/password/index.ts","tool/bundles/utils/domain/help/hash/index.ts","tool/bundles/utils/domain/help/index.ts","tool/bundles/utils/domain/config/help.ts","tool/bundles/utils/domain/index.ts","common/app/domain/libs/initBundles.ts","common/app/domain/libs/initState.ts","packages/bundles/rpc/libs/errorHelper.ts","packages/bundles/language/domain/helpers/LocaleHelper.ts","common/app/domain/enums/AppEventEnum.ts","common/app/config/event/rpc.ts","common/app/config/event/user.ts","packages/bundles/webSocket/config/eventDev.ts","packages/ext/cron/libs/Timer.ts","common/app/config/event/webSocket.ts","packages/bundles/breadcrumb/domain/facades/breadcrumbFacade.ts","packages/ext/app/enums/PageTitleEventEnum.ts","packages/ext/pageTitle/singletons/pageTitle.ts","packages/ext/pageTitle/libs/PageTitle.ts","common/app/config/event.ts","common/app/config/bootstrap.ts","packages/ext/form/widgets/FormErrorWidget.tsx","packages/ext/browser/helpers/CopyHelper.ts","packages/ext/form/helpers/FormHelper.ts","tool/bundles/utils/web/views/password/PasswordGeneratorForm.tsx","packages/bundles/passwordGenerator/enums/PasswordStrengthEnum.ts","packages/bundles/passwordGenerator/libs/UrlGenerator.ts","packages/bundles/passwordGenerator/libs/PasswordGenerator.ts","packages/ext/binary/helpers/Uint8ArrayHelper.ts","crypto/bundles/encode/domain/libs/chainHash/BaseChainHash.ts","crypto/bundles/encode/domain/libs/chainHash/ChainHashV2.ts","packages/bundles/passwordGenerator/libs/PasswordEncoder.ts","packages/bundles/passwordGenerator/factories/passwordGeneratorFactory.ts","packages/bundles/help/web/widgets/pageLink/HelpPageLink.tsx","tool/bundles/utils/web/components/password.tsx","passgen/app/config/routes.tsx","common/app/web/components/Main.tsx","packages/ext/app/widgets/BeforeRenderWidget.tsx","common/app/web/layouts/adminLte/web/blankLayout.tsx","common/app/web/layouts/adminLte/common/blankLayout.tsx","packages/ext/app/router/AppSlashRouter.tsx","packages/ext/app/router/index.tsx","packages/ext/app/router/AppHashRouter.tsx","packages/bundles/loader/web/widget/loader.tsx","packages/ext/react/base/BaseComponent.tsx","packages/bundles/modal/web/widgets/views/modalView.tsx","packages/bundles/modal/domain/facades/modalFacade.ts","packages/bundles/modal/web/widgets/ModalContainerWidget.tsx","packages/bundles/notify/web/widgets/ToastContainerWidget.tsx","common/app/web/components/FloatContainers.tsx","passgen/app/index.tsx","index.tsx"],"names":["Sha256Hasher","HashAlgorithmEnum","SHA256","BaseHasher","DocumentTypeEnum","ENCRYPTED","SIGNED","CryptoHashHelper","value","hash","HashHelper","sha256","ripemd160","CryptoKeyHelper","x","y","pubKey","Uint8Array","set","sha256Ripemd160","keyHash","Address","binConv","in","out","toString","wifKey","this","forgeCoinKeyFromPrivateKey","compressed","privateKeyWif","entity","wifPrivateKeyToBinary","privateKeyToWif","extractPublicKey","hashByPublicKey","addressByPublicKey","undefined","isCompressedPrivateKey","privateKeyBinary","privKey","privateKeyBuf","Buffer","ck","CoinKey","publicKey","privateWif","_","isString","passphrase","decoded","wif","decode","bip38","encrypt","privateKey","encryptedKeyWif","isEncrypted","isEmpty","Error","decrypt","status","console","log","percent","bs58","buf","fromWif","ConvHelper","toBuffer","crypto","secp256k1","privateKeyVerify","DocumentFormat","coinName","address","sig","message","isBuffer","join","document","res","parse","signature","hasOwnProperty","PemEncoder","result","name","replace","toLowerCase","SignatureEntity","messageHash","labels","SHA1","SHA224","SHA512","SHA384","SHA3","RIPEMD160","MD5","data","fromFormat","toFormat","UTF8","BUFFER","conv","encode","options","hexEncoder","HexEncoder","HEX","BINARY","BYTES","sourceValue","getAlgorithm","arr","split","head","type","i","line","match","trim","replaceAll","push","lines","BitcoinSigner","documentFormat","_privateKey","_publicKey","_documentFormat","_hashAlgorithm","msgHash","signatureEntity","coinmsg","sign","cryptoFactory","createBitcoinCoinMsg","recoverPubKey","sigObj","parseSignature","pubKeyRecovered","ecdsaRecover","recid","from","isVerified","ecdsaVerify","recoverPublicKey","coinmsgFork","isVerify","verify","verifyEntity","VerifyEntity","subarray","array","Array","Sha1Hasher","Sha224Hasher","Sha512Hasher","Sha384Hasher","Sha3Hasher","hashHex","CryptoJS","enc","Hex","Ripemd160Hasher","Md5Hasher","hashClassMap","PolymorphicHasher","algorithm","classMap","allClassMap","getDefaultClassMap","merge","getHasherInstance","className","createHasherByAlgorithm","hasherClass","isVerifiedHash","CoinMsg","opt","ecdsa","coinname","curve","magicPrefix","bin","Binary","put","putVarInt","length","sha256x2","raw","magicHash","e","BigInt","fromBuffer","Q","ecparams","g","multiply","calcPubKeyRecoveryParam","serializeSigCompact","expected","networkVer","coins","parsed","parseSigCompact","getEncoded","format","module","exports","ObjectHelper","obj","handler","property","isPlainObject","isArray","iterate","object","cloneDeep","c","eval","a","definition","MessageSigner","signer","hashAlgorithm","signMessage","addressByHash","CryptoFactory","createBitcoinSigner","createBitcoinDocumentFormat","binary","aesjs","utils","hex","fromBytes","toBytes","DiConfigurator","di","prefix","_di","_prefix","diConfigurator","id","dependencies","path","prepareId","prepareDependencies","factoryMethod","isObject","lodash","isFunction","isClass","deps","register","define","registerInstance","resolve","Container","singleton","bind","instance","get","DiContainer","setContainer","getContainer","createDi","container","BaseConfigManager","config","defaultValue","ArrayNestedHelper","params","map","key","reset","_encode","keyArr","keyString","pop","ArrayHelper","finalObj","removeEmpty","Object","keys","forEach","nestedObj","RouterTypeEnum","SLASH","HASH","UrlHelper","uri","resultUri","pureUri","routerType","configManager","url","window","location","parsedUrl","getLocation","setParamInSearchParams","searchParams","generateUri","pathname","search","ss","query","searchArr","parseQueryParams","encodeQuery","normalize","hashes","slice","indexOf","reduce","val","assign","decodeURIComponent","href","URL","origin","sections","section","encodeQueryParam","resultUrl","delete","append","encodeURIComponent","freeze","connections","rpcUrl","webSocketUrl","server","router","env","deprecateIsStrict","copyright","title","user","loginRoute","language","default","languages","oauth","client","clientId","clientSecret","accessTokenUri","authorizationUri","redirectUri","getOrigin","scopes","token","expiresIn","webSocket","enable","startDelay","load","CrudActionEnum","ALL","SET","GET","REMOVE","BaseCrudReducer","_initialState","action","attrNames","source2","attrName","state","target","clone","actionName","assignObject","run","CrudReducer","BaseStateRepository","reducerPrefix","_reducerPrefix","_reducer","initialState","reducer","getState","dispatch","removeValue","setValue","store","_getSelfState","reducerAction","BaseCrudStateRepository","dataProvider","StatusRepository","getValue","BaseService","StatusService","stateRepository","setStatus","getStatus","ReduceConfigurator","reducers","repository","repo","domain","domainName","domainInstance","bundleDiConfigurator","createInstance","configureDi","reduceConfigurator","bindFromRepositoryId","configureReducer","HelpConfigurator","collection","addEntity","helpConfigurator","Query","filter","sort","_page","_perPage","with","direction","DataProvider","paginator","Paginator","_totalCount","_lastPage","Math","ceil","totalCount","perPage","TemplateHelper","template","vars","begin","end","varName","varValue","placeholder","HelpEntityHelper","list","it","render","menu","renderList","breadcrumbs","content","ArticleRepository","getCollection","prepareEntity","find","meta","page","forgeQuery","findOneByName","getFilterByName","callback","_createPaginatorFromRequestMeta","all","BaseCrudService","storeDispatcher","_stateRepository","_repository","update","oneById","setEntity","deleteById","setDataProvider","getDataProvider","ArticleService","articleRepository","ConfirmModalFooter","props","Modal","Footer","Button","variant","onClick","onHide","onConfirm","confirmLabel","ConfirmService","modalService","body","modalEntity","size","footerRender","showByEntity","ModalRepository","footer","isVisible","resetValue","ModalService","show","hide","IdentityRepository","identity","NotImplementedMethodError","methodName","_class","_method","class","method","StorageInterface","EncodeHelper","BinaryEncoderHandler","valueTyped","propertyTyped","matches","BinaryEncoder","cloneValue","isolateValue","encodedValue","ChainEncoder","encoders","reverse","JsonEncoder","JSON","stringify","JsonBinaryEncoder","LocalStorage","encoder","dataJson","localStorage","getItem","defaultTo","setItem","removeItem","BasePermanentStorageRepository","permanentStorage","_permanentStorage","_key","remove","BaseLocalStorageRepository","TokenEntity","_isAuthenticated","_value","_identity","TokenRepository","tokenEntity","getToken","getIdentity","NullTokenEntity","EventEmitter","SecurityEventEnum","LOGIN","LOGOUT","SET_TOKEN_ENTITY","UserProviderService","getTokenEntity","_setTokenEntity","eventEmitter","emit","_forgeTokenEntity","setTokenEntity","setIdentity","IdentityStateRepository","TokenStorageRepository","userProviderFacade","RbacProviderService","permission","myPermissions","includes","roleName","roleNames","isMyRoles","isAuthenticated","intersectRoles","intersection","en","translation","ru","LocaleRepository","_initCollection","locale","_fixName","_indexCollection","newCollection","languageEntity","code","nativeNameArr","nativeName","upperFirst","I18nextConfigurator","bundles","bundleName","i18next","translations","bundleTranslations","getTranslationsFromDomain","langCode","namespaces","namespace","SwitchService","resources","i18nextConfigurator","getTranslationsFromDomains","oneSelected","i18n","use","initReactI18next","init","lng","interpolation","escapeValue","react","wait","_set","setLocale","_getLocale","oneByLocale","currentLocale","getLocale","defaultLanguage","changeLanguage","LanguageService","enabledLanguages","languageCode","LanguageRepository","ToastRepository","TOP_LEFT","toast","POSITION","TOP_RIGHT","TOP_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM_CENTER","INFO","TYPE","SUCCESS","WARNING","ERROR","DEFAULT","DARK","toastEntity","position","positions","ToastEntity","ToastService","toastRepository","types","send","RpcEventEnum","CLIENT_BEFORE_SEND","CLIENT_AFTER_SEND","CLIENT_RESPONSE_SUCCESS","CLIENT_RESPONSE_ERROR","EnvHelper","port","configCollection","eventConfigurator","isDev","on","requestEntity","responseEntity","info","TransportRepository","axios","post","headers","then","response","catch","UnauthorizedError","UnprocessableEntityError","errors","ClientService","transportRepository","requestEncoder","responseEncoder","error","setErrors","RequestEncoder","version","request","jsonrpc","Date","ResponseEncoder","transportRepo","ItemRepository","itemEntity","_syncState","BreadcrumbService","itemRepository","clear","route","add","ConnectionService","eventHandler","connection","queryParams","jsonMessage","_getConnectionUrl","WebSocket","bindHandlers","addEventListener","close","readyState","OPEN","authService","getRpcToken","tokenQueryParams","socketEventEnum","CLOSE","BREAK","MESSAGE","SocketEventEntity","SocketEventHandler","socket","onopen","onOpen","onclose","onClose","onmessage","onMessage","onerror","onError","event","wasClean","socketEventEntity","BaseRpcRepository","sendRequest","DocumentRepository","toAddress","DocumentService","signerService","documentRepository","messageData","messageJson","createBitcoinMessageSigner","verifyDocument","HandShakeEventEnum","COMPLETE","sendAllQueues","P2pService","documentService","sessionService","addQueue","start","requestQueue","sendOneQueue","tunnelService","SessionRepository","sessions","sessionEntity","oldData","TimeHelper","getTime","HandShakeRepository","sessionId","dhPublic","dh","public","createdAt","timestamp","encryptedKeys","encryptedMessage","encrypted","SessionService","sessionRepository","oneByAddress","save","toHex","AesDataEntity","iv","salt","mac","Utf8Encoder","utf8","HmacSha256Hasher","generateHmacBySha256Js","hmac","HmacSHA256","AesEncryption","keyEntity","isCheckMac","messageBytes","utf8Encoder","aesCbc","ModeOfOperation","ctr","encryptKey","aesDataEntity","generateHmac","decryptedBytes","checkMac","hmacKey","generateHmacBySha256HmacHasher","decryptedData","recipientMacBuffer","Base64Encoder","Base64","toBase64","StringFormat","o","cipher","json","str","FormatEncryption","aes","text","encryptedStringify","encryptedParsed","AesFactory","TunnelService","jsonData","encryptedJsonData","createEncoderStringFormat","one","encryptedDocument","toastService","BaseP2pController","HandShakeController","helloServer","dhInstance","forgeDhInstance","generateKeys","getPublicKey","handShakeRepository","Promise","publicBinary","computeSecret","persist","helloClient","shareSecret","extractKeysFromShareSecret","sessionKeys","persistSessionKeys","formatEncryption","saveSessionKeys","sessionFormatEncryption","finish","decrypted","decryptedText","toastFacade","success","share","getDiffieHellman","MessengerEventEnum","NEW_MESSAGE","MessageForm","handleChange","handleSubmit","setState","preventDefault","form","Form","onSubmit","Control","onChange","Component","newMessage","chatId","getChatId","closeToast","toastProps","BaseCrudRpcRepository","_methodPrefix","methodPrefix","_forgeRequestByQuery","ChatRepository","sendByMethod","MessageRepository","Number","ChatService","MessageService","setChatId","allByChatId","updateList","ChatApiRepository","MessageApiRepository","ChatStoreRepository","MessageStoreRepository","RegistrationApiRepository","RegistrationRequestFormRepository","RegistrationService","registrationApiRepository","registrationStorageRepository","requestActivationCode","setRequestForm","createAccount","getRequestForm","RestorePasswordRepository","UpdatePasswordRepository","RestorePasswordService","rpcRepository","storageRepository","createPassword","UpdatePasswordService","updatePassword","RpcRestorePasswordRepository","StorageRestorePasswordRepository","RpcUpdatePasswordRepository","AuthRepository","AuthService","authRpcRepository","userProvider","getTokenByForm","login","AuthRpcRepository","BaseCrudArrayRepository","getItems","SummaryRepository","now","SummaryService","summaryApiRepository","Pbkdf2Hasher","iterations","keyLenBytes","pbkdf2","Pbkdf2ChainHash","cost","_cost","_salt","_keyLengthBytes","Pbkdf2LoginKey","hasher","setHasher","password","generateEntropyByLogin","generatePasswordHash","scope","prepareValue","HdKey","seedBuffer","hdKey","isEnabled","indexEntityPattern","purpose","coin","account","chain","entropy","HDKey","fromMasterSeed","fromAddress","countChildKeys","root","privateExtendedKey","publicExtendedKey","child","indexEntity","allChild","childKeys","oneChild","index","_entityToIndex","childKey","derive","childKeyItem","extended","hash160","hash160Hex","wifEncrypted","encryptPrivateKey","MnemonicHelper","seed","seedToHdKeys","oneBySeed","mnemonic","isValidMnemonic","bip39","seedHexToPrivateKeyWif","extractPublicKeyFromWif","hdKeyEntity","seedToHdKeyPair","TokenHelper","identityEntity","_forgeIdentityEntity","_forgeTokenString","BaseXEncoder","alphabet","baseXX","baseX","AbstractBaseXEncoder","toBaseX","baseXEncoder","AlphabetEnum","BASE_98","WHITESPACE","SPEC_CHAR","PUNCTUATION","NUMERIC","ALPHA_UPPER","ALPHA_LOWER","BASE_2","BASE_10","BASE_32_HEX","BASE_32","BASE_36","BASE_52","BASE_58","BASE_62","BASE_64","BASE_85","Z_85","BASE_91","BASE_94","PRINTABLE","Base94Encoder","ConnectionRepository","loginKey","connectionEntity","first","hostname","entropyBinary","passwordBinary","passwordBase94","entropyToSeed","seedByLogin","authBySeed","mnemonicToSeed","authByPrivateKeyWif","decryptedKeyBinary","decryptPrivateKey","binaryPrivateKeyToWif","keyService","savePrivateKey","tokenString","LoginKey","KeyRepository","forgeEntity","publicHash","SignerService","keyRepository","messageSigner","MessengerController","P2pHandler","routes","controllers","cryptoRequest","documentType","getType","parseDocument","getRouteHandler","controllerDefinition","actionMethodName","getActionInstance","actionInstance","decodedDocument","controller","routesConfig","routeItem","companionAddress","controllerInstance","controllerDefinitionToInstance","p2pHandler","handle","Base58Encoder","P2pRequestEntity","randomBytes","base58Encoder","randomBytesBase58","p2pService","messageRequest","HdKeyRepository","isCompressed","KeyService","publicKeyBinary","CategoryRepository","ProductRepository","CategoryService","ProductService","OrderRepository","OrderService","kanban","CategoryRpcRepository","ProductRpcRepository","CategoryStateRepository","productRepository","apiRepository","addCollection","passwordIndex","hashIndex","configureHelp","app","domainReducers","getReducers","combineReducers","createStore","errorCollection","getErrors","k","item","field","LocaleHelper","assoc","kk","AppEventEnum","BEFORE_BOOTSTRAP_LOAD","AFTER_BOOTSTRAP_LOAD","errorHelper","unprocessableEntityErrorToString","t","totalConnections","Timer","isDisposable","clearInterval","interval","onTick","setInterval","stop","webSocketConnection","isEnable","open","BreadcrumbFacade","PageTitleEventEnum","BEFORE_RENDER","_defaultTitle","setPageTitle","titleElem","querySelector","innerText","initAll","currentUrl","pageHead","setPageTitleDefault","breadcrumbFacade","addHome","FormErrorWidget","Text","CopyHelper","arg","attributes","getNamedItem","nodeValue","inputElement","getElementById","copy","FormHelper","defaultFormValues","PasswordGeneratorForm","initialValues","masterKey","host","nonce","passwordLength","mergeDefaultValues","validate","values","handleBlur","isSubmitting","FormGroup","Row","Col","htmlFor","onBlur","autoComplete","readOnly","style","fontFamily","disabled","PasswordStrengthEnum","WEAK","NORMAL","STRONG","ERY_STRONG","UrlGenerator","URLSearchParams","PasswordGenerator","passwordEncoder","_masterKey","_passwordLength","_passwordEncoder","_hasher","_passwordStrength","isInteger","forgeUrl","scopeHashHex","_generatePassword","attempt","_generatePasswordItem","isStrongPassword","generate","substr","secret","count","Uint8ArrayHelper","number","len","log2","byteArray","byte","numberToBytes","uint","bytesToNumber","uint1","uint2","array1","decodeToArray","array2","value2","BaseChainHash","hashBytes","valueBytes","generateHash","forHash","ChainHashV2","PasswordEncoder","basex","passwordGenerator","passwordStrength","createInstance18kSha256","HelpPageLink","children","to","Password","setSubmitting","passwordGeneratorFactory","createInstance18kPbkdf2","exact","component","PasswordComponent","Main","BeforeRenderWidget","useLocation","React","useEffect","beforeRender","AppBlankLayout","as","role","AppCommonBlankLayout","AppRouter","AppSlashRouter","AppHashRouter","connect","loaderStatus","LoaderWidget","isLoading","BaseComponent","constructor","getLoader","getClassName","loaderRender","startLoad","endLoad","redirect","prevProps","prevState","snapshot","prevLocation","componentDidMount","ModalView","FooterRender","Header","closeButton","Title","Body","ModalFacade","confirmService","showConfirm","ModalContainerWidget","confirmState1","confirmState","modalFacade","modalItem","ToastContainerWidget","FloatContainers","BlankApp","Routes","ReactDOM"],"mappings":"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","file":"static/js/main.3516062f.chunk.js","sourcesContent":["import BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Sha256Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.SHA256;\n    }\n}\n","\nexport default class DocumentTypeEnum {\n\n    static readonly ENCRYPTED = 'ENCRYPTED';\n    static readonly SIGNED = 'SIGNED';\n}\n","import HashHelper from \"../../../../../packages/ext/hash/helpers/HashHelper\";\n\nexport default class CryptoHashHelper {\n\n    static sha256x2(value) {\n        let hash = HashHelper.sha256(value);\n        return HashHelper.sha256(hash);\n    }\n\n    static sha256Ripemd160(value) {\n        let hash = HashHelper.sha256(value);\n        return HashHelper.ripemd160(hash);\n    }\n}\n","import CoinKey from \"coinkey\";\nimport * as crypto from \"crypto\";\nimport secp256k1 from \"secp256k1\";\nimport Address from \"btc-address\";\nimport binConv from 'binstring';\nimport hash from 'crypto-hashing';\nimport HashAlgorithmEnum from \"../../../../../packages/ext/hash/enums/HashAlgorithmEnum\";\nimport HashHelper from \"../../../../../packages/ext/hash/helpers/HashHelper\";\nimport wif from \"wif\";\nimport bip38 from \"bip38\";\n// import bip32 from \"bip32\";\nimport _ from \"lodash\";\nimport bs58 from \"bs58\";\nimport ConvHelper from \"../../../../../packages/ext/binary/helpers/ConvHelper\";\nimport CryptoHashHelper from \"./CryptoHashHelper\";\n\nexport default class CryptoKeyHelper {\n\n    /*static addressHashByPublicKey(pubKey) {\n        let keyHash = hash(HashAlgorithmEnum.SHA256, pubKey);\n        return hash(HashAlgorithmEnum.RIPEMD160, keyHash);\n    }*/\n\n\n// compressed public key from X and Y\n    static generateCompressedPublicKeyFromXY(x, y) {\n        const pubKey = new Uint8Array(33);\n        pubKey[0] = (y[31] & 1) === 0 ? 0x02 : 0x03;\n        pubKey.set(x, 1);\n        return pubKey\n    }\n\n    static hashByPublicKey(pubKey) {\n        return CryptoHashHelper.sha256Ripemd160(pubKey);\n    }\n\n    static addressByPublicKey(pubKey) {\n        let keyHash = CryptoHashHelper.sha256Ripemd160(pubKey);\n        let address = new Address(binConv(keyHash, { in : 'hex', out: 'bytes'}));\n        return address.toString();\n    }\n\n    static addressByHash(pubKey) {\n        let keyHash = CryptoHashHelper.sha256Ripemd160(pubKey);\n        var address = new Address(binConv(keyHash, { in : 'hex', out: 'bytes'}));\n        return address.toString();\n    }\n\n    static isCompressedPrivateKey(wifKey) {\n        let ck = this.forgeCoinKeyFromPrivateKey(wifKey);\n        return ck.compressed;\n    }\n\n    static forgeEntity(privateKeyWif) {\n\n        let entity = {};\n        entity[\"privateKey\"] = this.wifPrivateKeyToBinary(privateKeyWif);\n        // entity.isCompressed = this.isCompressedPrivateKey(entity.privateKey);\n        entity[\"privateKeyWif\"] = this.privateKeyToWif(entity[\"privateKey\"], true);\n\n        // entity[\"privateKeyWif\"] = privateKeyWif;\n\n        entity[\"publicKey\"] = this.extractPublicKey(entity[\"privateKey\"], true/*, entity.isCompressed*/);\n        entity[\"publicHash\"] = this.hashByPublicKey(entity[\"publicKey\"]);\n        entity[\"address\"] = this.addressByPublicKey(entity[\"publicKey\"]);\n        // console.log(entity);\n        return entity;\n    }\n\n    static extractPublicKeyFromWif(privateKeyWif, compressed = undefined, versions = undefined) {\n        //let isCompressed = this.isCompressedPrivateKey(privateKeyWif);\n\n        if(compressed === undefined) {\n            compressed = this.isCompressedPrivateKey(privateKeyWif);\n        }\n\n        let privateKeyBinary = this.wifPrivateKeyToBinary(privateKeyWif);\n        return this.extractPublicKey(privateKeyBinary, compressed);\n    }\n\n    static extractPublicKey(privKey: any, compressed = undefined, versions = undefined) {\n        // todo: глянуть везде параметр compressed\n        // isCompressed = CryptoKeyHelper.isCompressedPrivateKey(privateKeyWif);\n        let privateKeyBuf;\n\n        if(compressed === undefined) {\n            compressed = this.isCompressedPrivateKey(privKey);\n        }\n\n        if(privKey instanceof Buffer) {\n            privateKeyBuf = privKey;\n        } else {\n            privateKeyBuf = new Buffer(privKey);\n        }\n        let ck = new CoinKey(privateKeyBuf, compressed);\n        return ck.publicKey;\n    }\n\n    static privateKeyToWif(privKey, compressed = undefined) {\n        if(compressed === undefined) {\n            compressed = this.isCompressedPrivateKey(privKey);\n        }\n        if(typeof privKey === 'object') {\n            /*if(privKey instanceof Uint8Array) {\n                privKey = new Buffer(privKey);\n            }\n            let ck = new CoinKey(privKey, compressed);*/\n            let ck = this.forgeCoinKeyFromPrivateKey(privKey);\n            return ck.privateWif;\n        }\n        if(_.isString(privKey)) {\n            return privKey;\n        }\n    }\n\n    static encryptPrivateKey(privKey, passphrase) {\n        let decoded = wif.decode(this.privateKeyToWif(privKey));\n        return bip38.encrypt(decoded.privateKey, decoded.compressed, passphrase);\n    }\n\n    static decryptPrivateKey(encryptedKeyWif, passphrase) {\n        let isEncrypted = this.isEncrypted(encryptedKeyWif);\n        if(isEncrypted) {\n            if(_.isEmpty(passphrase)) {\n                throw new Error('Enter passphrase');\n            }\n            let decryptedKey = bip38.decrypt(encryptedKeyWif, passphrase, function (status) {\n                console.log(status.percent) // will print the percent every time current increases by 1000\n            });\n            return decryptedKey.privateKey;\n        } else {\n            return this.wifPrivateKeyToBinary(encryptedKeyWif);\n        }\n    }\n\n    static isEncrypted(wifKey) {\n        let decoded = bs58.decode(wifKey);\n        // var ck = CoinKey.fromWif(wifKey);\n        //const restored = bip32.fromBase58(wifKey);\n        // let privateKeyBuf = this.wifPrivateKeyToBinary(wifKey);\n\n        let buf = new Buffer(decoded);\n        return buf[0] === 1 && buf[1] === 66;\n\n        // console.log(buf[0], buf[1]);\n    }\n\n\n    static forgeCoinKeyFromPrivateKey(privKey, compressed = undefined): CoinKey {\n        let ck: CoinKey;\n        if(typeof privKey === 'object') {\n            if(privKey instanceof Uint8Array) {\n                privKey = new Buffer(privKey);\n            }\n            ck = new CoinKey(privKey);\n        } else if(typeof privKey === 'string') {\n            ck = CoinKey.fromWif(privKey);\n        }\n        return ck;\n    }\n\n\n    static binaryPrivateKeyToWif(privKey, compressed = undefined) {\n        if(!(privKey instanceof Buffer)) {\n            privKey = ConvHelper.toBuffer(privKey);\n        }\n        if(compressed === undefined) {\n            compressed = this.isCompressedPrivateKey(privKey);\n        }\n        let ck = new CoinKey(privKey, compressed);\n        return ck.privateWif;\n    }\n\n    static wifPrivateKeyToBinary(wif) {\n        var ck = CoinKey.fromWif(wif);\n        return ck.privateKey;\n    }\n\n    static generatePrivateKey() {\n        let privKey = null;\n        do {\n            privKey = crypto.randomBytes(32);\n        } while (!secp256k1.privateKeyVerify(privKey));\n        return privKey;\n    }\n}\n","import DocumentFormatInterface from \"../../interfaces/DocumentFormatInterface\";\nimport ConvHelper from \"../../../../../../packages/ext/binary/helpers/ConvHelper\";\nimport DocumentTypeEnum from \"../../../../transport/domain/enums/DocumentTypeEnum\";\nimport PemEncoder from \"../encoders/PemEncoder\";\n\nexport default class DocumentFormat implements DocumentFormatInterface {\n\n    private coinName;\n\n    constructor(coinName) {\n        this.coinName = coinName;\n    }\n\n    encode(address: string, sig, message: string): string {\n        Buffer.isBuffer(sig) && (sig = sig.toString('base64'));\n        return [\n            '-----BEGIN ' + this.coinName + ' SIGNED MESSAGE-----',\n            message,\n            '-----BEGIN SIGNATURE-----',\n            //'Version: ' + version,\n            // 'Address: ' + address,\n            sig,\n            '-----END ' + this.coinName + ' SIGNED MESSAGE-----'\n        ].join('\\n')\n    }\n\n    decode(document: string) {\n        let res = this.parse(document);\n        return {\n            signature: ConvHelper.toBuffer(res['signature'], 'base64'),\n            message: res['signed_message'],\n        };\n    }\n\n    getType(document: string) {\n        let res = this.parse(document);\n        if (res.hasOwnProperty('encrypted_message')) {\n            return DocumentTypeEnum.ENCRYPTED;\n        } else if (res.hasOwnProperty('signed_message')) {\n            return DocumentTypeEnum.SIGNED;\n        }\n        throw new Error('Not supported document type!');\n    }\n\n\n    parse(document: string) {\n        let pemEncoder = new PemEncoder();\n        let decoded = pemEncoder.decode(document);\n        let result = {};\n        for (let name in decoded) {\n            let value = decoded[name];\n            let newName = name.replace(this.coinName.toLowerCase() + '_', '');\n            result[newName] = value;\n        }\n        return result;\n    }\n}\n","export default class SignatureEntity {\n\n    signature;\n    messageHash;\n    message;\n    publicKey;\n    address;\n    document;\n\n}\n","import EnumLabelInterface from \"../../../core/enum/interfaces/EnumLabelInterface\";\n\nexport default class HashAlgorithmEnum implements EnumLabelInterface {\n\n    static readonly SHA1 = 'sha1';\n    static readonly SHA224 = 'sha224';\n    static readonly SHA256 = 'sha256';\n    static readonly SHA512 = 'sha512';\n    static readonly SHA384 = 'sha384';\n    static readonly SHA3 = 'sha3';\n    static readonly RIPEMD160 = 'ripemd160';\n    static readonly MD5 = 'md5';\n\n    getLabels(): object {\n        let labels = {};\n        labels[HashAlgorithmEnum.SHA1] = 'SHA 1';\n        labels[HashAlgorithmEnum.SHA224] = 'SHA 224';\n        labels[HashAlgorithmEnum.SHA256] = 'SHA 256';\n        labels[HashAlgorithmEnum.SHA512] = 'SHA 512';\n        labels[HashAlgorithmEnum.SHA384] = 'SHA 384';\n        labels[HashAlgorithmEnum.SHA3] = 'SHA 3';\n        labels[HashAlgorithmEnum.RIPEMD160] = 'RIPEMD 160';\n        labels[HashAlgorithmEnum.MD5] = 'MD 5';\n        return labels;\n    }\n}","import conv from 'binstring';\nimport HexEncoder from \"../../baseX/libs/encoders/HexEncoder\";\n\n/*function createBinaryString(nMask, len = 32) {\n    // nMask must be between -2147483648 and 2147483647\n    let sMask;\n    for (let nFlag = 0, nShifted = nMask, sMask = \"\"; nFlag < len;\n         nFlag++, sMask += String(nShifted >>> (len - 1)), nShifted <<= 1) ;\n    return sMask;\n}*/\n\nexport default class ConvHelper {\n\n    static readonly HEX = 'hex';\n    static readonly BINARY = 'binary';\n    static readonly UTF8 = 'utf8';\n    static readonly BYTES = 'bytes';\n    static readonly BUFFER = 'buffer';\n\n    static encode(data, fromFormat, toFormat) {\n        if (toFormat === this.UTF8 && typeof data === 'string') {\n            //return data;\n        }\n        if (toFormat === this.BUFFER && data instanceof Buffer) {\n            return data;\n        }\n        return conv(data, {\n            in: fromFormat,\n            out: toFormat\n        });\n    }\n\n    static decode(data, fromFormat, toFormat) {\n        return this.encode(data, toFormat, fromFormat);\n    }\n\n    /*static dec2bin(dec) {\n        return createBinaryString(dec);\n        // return Number(dec).toString(2);\n        //return (dec >>> 0).toString(2);\n    }*/\n\n    /*static toUtf8(unit8array) {\n        return aesjs.utils.utf8.fromBytes(unit8array);\n    }*/\n\n    static toBytes(value, fromFormat = undefined) {\n        let options = {out: 'bytes'};\n        if (fromFormat) {\n            options[\"in\"] = fromFormat;\n        }\n        return conv(value, options);\n    }\n\n    static toBuffer(value, fromFormat = undefined) {\n        let options = {out: 'buffer'};\n        if (fromFormat) {\n            options[\"in\"] = fromFormat;\n        }\n        return conv(value, options);\n    }\n\n    static toHex(value, fromFormat = undefined) {\n\n        let hexEncoder = new HexEncoder();\n        return  hexEncoder.encode(value, fromFormat);\n\n        /*let options = {out: 'hex'};\n        if (fromFormat) {\n            options[\"in\"] = fromFormat;\n        }\n        return conv(value, options);*/\n    }\n}\n","import _ from 'lodash';\nimport hash from 'crypto-hashing';\nimport EncodeInterface from \"../../../../../core/contract/encoders/EncodeInterface\";\n\nexport default class BaseHasher implements EncodeInterface {\n\n    protected options = {};\n\n    getAlgorithm(): string {\n        return null;\n    }\n\n    setOption(name, value) {\n        _.set(this.options, name, value);\n    }\n\n    encode(sourceValue) {\n        return hash(this.getAlgorithm(), sourceValue);\n    }\n}\n","import EncoderInterface from \"../../../../../../packages/core/contract/encoders/EncoderInterface\";\n\nexport default class PemEncoder implements EncoderInterface {\n\n    encode(sourceValue) {\n        let documentLines = [];\n        for (let name in sourceValue) {\n\n        }\n    }\n\n    decode(document: string) {\n        let arr = document.split(\"\\n\", 10);\n        let res = {};\n        let head = {\n            type: null,\n            name: null,\n        };\n        for(let i in arr) {\n            let line = arr[i];\n            let result = line.match(/-----(BEGIN|END)(.+)-----/i);\n            if(result) {\n                head.type = result[1]\n                    .trim()\n                    .toLowerCase();\n                head.name = result[2]\n                    .trim()\n                    // .replace(this.coinName, '')\n                    .toLowerCase()\n                    // .replaceAll(/\\s+/i, ' ')\n                    .trim()\n                    .replaceAll(' ', '_')\n                ;\n                // console.log(line, head);\n            } else {\n                if(head.type === 'begin' && head.name) {\n                    if(!res[head.name]) {\n                        res[head.name] = [];\n                    }\n                    res[head.name].push(line);\n                } else {\n                    //throw new Error('Fail parse signed document');\n                }\n            }\n        }\n\n        for(let name in res) {\n            let lines = res[name];\n            res[name] = lines.join(\"\\n\");\n        }\n        // console.log(res)\n        return res;\n    }\n}\n","import HashAlgorithmEnum from \"../../../../../../packages/ext/hash/enums/HashAlgorithmEnum\";\nimport secp256k1 from \"secp256k1\";\nimport SignatureEntity from \"../../entities/SignatureEntity\";\nimport CryptoKeyHelper from \"../../../../key/domain/helpers/CryptoKeyHelper\";\nimport HashHelper from \"../../../../../../packages/ext/hash/helpers/HashHelper\";\nimport coinmsg from \"coinmsg\";\nimport DocumentFormat from \"./DocumentFormat\";\n\n// import coinmsgFork from \"../fork/index2\";\nimport ConvHelper from \"../../../../../../packages/ext/binary/helpers/ConvHelper\";\nimport VerifyEntity from \"../../entities/VerifyEntity\";\nimport cryptoFactory from \"../../factories/cryptoFactory\";\n\n/*import {sha256} from \"crypto-hashing\";\n\n\n\nfunction makeSigner(opt) {\n    var ecdsa = _ecdsa(opt.curve || 'secp256k1'),\n        magicPrefix = new Buffer(opt.magicPrefix);\n\n    return {\n        // sign: sign.bind(null, ecdsa, magicPrefix),\n        verify: verify.bind(null, ecdsa, magicPrefix),\n        // format: format.bind(null, opt.coinname)\n    }\n}\n\nfunction magicHash(magicPrefix, message) {\n    Buffer.isBuffer(message) || (message = new Buffer(message, 'utf8'))\n\n    return sha256.x2(new Binary()\n        .put(magicPrefix)\n        .putVarInt(message.length)\n        .put(message)\n        .raw()\n    )\n}\n\nfunction verify(ecdsa, magicPrefix, expected, sig, message) {\n    Buffer.isBuffer(sig) || (sig = new Buffer(sig, 'base64'))\n\n    var hash = magicHash(magicPrefix, message),\n        e = BigInt.fromBuffer(hash),\n        parsed = ecdsa.parseSigCompact(sig),\n\n        Q = ecdsa.recoverPubKey(e, parsed.signature, parsed.i),\n        pubkey = Q.getEncoded(parsed.compressed)\n\n    if (Buffer.isBuffer(expected)) {\n        return expected.toString('hex') == pubkey.toString('hex')\n    } else {\n        var networkVer = coins.decode(expected)[0],\n            actualAddress = coins.encode(hash160(pubkey), networkVer)\n        return expected == actualAddress\n    }\n}*/\n\nexport default class BitcoinSigner {\n\n    protected _privateKey;\n    protected _publicKey;\n    protected _documentFormat;\n    protected _hashAlgorithm = HashAlgorithmEnum.SHA256;\n\n    constructor(documentFormat: DocumentFormat) {\n        this._documentFormat = documentFormat;\n    }\n\n    set privateKey(value) {\n        this._privateKey = value;\n        this._publicKey = CryptoKeyHelper.extractPublicKey(value);\n    }\n\n    hash(message) {\n        return HashHelper.hash(this._hashAlgorithm, message);\n    }\n\n    sign(msgHash, privateKey) {\n        /*privateKey = privateKey ? privateKey : this._privateKey;\n        let signatureEntity = new SignatureEntity();\n        signatureEntity.signature = coinmsg.sign(privateKey, message, true);\n        signatureEntity.publicKey = CryptoKeyHelper.extractPublicKey(privateKey);\n        signatureEntity.messageHash = msgHash;\n        return signatureEntity;*/\n    }\n\n    signMessage(message, privateKey) {\n        privateKey = privateKey ? privateKey : this._privateKey;\n        let signatureEntity = new SignatureEntity();\n        signatureEntity.signature = coinmsg.sign(privateKey, message, true);\n        let isCompressed = true;\n        // let isCompressed = CryptoKeyHelper.isCompressedPrivateKey(privateKey);\n        signatureEntity.publicKey = CryptoKeyHelper.extractPublicKey(privateKey, isCompressed);\n        signatureEntity.address = CryptoKeyHelper.addressByPublicKey(signatureEntity.publicKey);\n        signatureEntity.messageHash = this.hash(message);\n        signatureEntity.document = this._documentFormat.encode(CryptoKeyHelper.addressByPublicKey(signatureEntity.publicKey), signatureEntity.signature, message);\n        return signatureEntity;\n    }\n\n    recoverPublicKey(signature, message) {\n        let coinmsgFork = cryptoFactory.createBitcoinCoinMsg();\n        return coinmsgFork.recoverPubKey(signature, message);\n\n\n        /*const sigObj = this.parseSignature(signature);\n        // console.log(signature, sigObj)\n        sigObj.recid = 1;\n        return secp256k1.ecdsaRecover(sigObj.signature, sigObj.recid, msgHash);*/\n    }\n\n    verify(signature, msgHash, pubKey = null) {\n\n\n\n        const sigObj = this.parseSignature(signature);\n        let pubKeyRecovered = secp256k1.ecdsaRecover(sigObj.signature, sigObj.recid, msgHash);\n        if(pubKey && Buffer.from(pubKey).toString('hex') !== Buffer.from(pubKeyRecovered).toString('hex')) {\n            return false;\n        }\n        let isVerified = secp256k1.ecdsaVerify(sigObj.signature, msgHash, pubKey);\n        return isVerified;\n        /*if (!isVerified) {\n            return false;\n        }\n\n        return pubKey;*/\n    }\n\n\n\n    verifyMessage(signature, message, pubKey = null) {\n\n        if(!pubKey) {\n            pubKey = this.recoverPublicKey(signature, message);\n        }\n\n        let coinmsgFork = cryptoFactory.createBitcoinCoinMsg();\n        let isVerify = coinmsgFork.verify(pubKey, ConvHelper.toBuffer(signature), message);\n        return isVerify;\n\n        // let address = CryptoKeyHelper.addressByPublicKey(pubKey);\n        // let isVerified = coinmsg.verify(address, signature, message);\n        //\n        //\n        // /*const sigObj = this.parseSignature(signature);\n        // let pubKeyRecovered = secp256k1.ecdsaRecover(sigObj.signature, sigObj.recid, msgHash);\n        // if(pubKey && Buffer.from(pubKey).toString('hex') !== Buffer.from(pubKeyRecovered).toString('hex')) {\n        //     return false;\n        // }\n        // let isVerified = secp256k1.ecdsaVerify(sigObj.signature, msgHash, pubKey);*/\n        // return isVerified;\n        // /*if (!isVerified) {\n        //     return false;\n        // }\n        //\n        // return pubKey;*/\n    }\n\n    verifyEntity(signatureEntity: SignatureEntity) {\n        if(!signatureEntity.publicKey) {\n            signatureEntity.publicKey = this.recoverPublicKey(signatureEntity.signature, signatureEntity.message);\n        }\n\n        let verifyEntity = new VerifyEntity();\n\n        let coinmsgFork = cryptoFactory.createBitcoinCoinMsg();\n        verifyEntity.isVerified = coinmsgFork.verify(signatureEntity.publicKey, signatureEntity.signature, signatureEntity.message);\n        verifyEntity.signature = signatureEntity;\n        verifyEntity.publicKey = signatureEntity.publicKey;\n\n        return verifyEntity;\n    }\n\n    parseSignature(signature) {\n        return {\n            signature: signature.subarray(0, 64),\n            recid: signature[64],\n        };\n    }\n\n    serializeSignatureObject(sigObj) {\n        let array = Array.from(sigObj.signature);\n        array.push(sigObj.recid);\n        // @ts-ignore\n        return Uint8Array.from(array);\n    }\n}\n","import BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Sha1Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.SHA1;\n    }\n}\n","import BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Sha224Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.SHA224;\n    }\n}\n","import BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Sha512Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.SHA512;\n    }\n}\n","import BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Sha384Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.SHA384;\n    }\n}\n","import HexEncoder from \"../../../../baseX/libs/encoders/HexEncoder\";\nimport CryptoJS from \"crypto-js\";\nimport BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Sha3Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.SHA3;\n    }\n\n    encode(sourceValue) {\n        let hashHex = CryptoJS.SHA3(sourceValue, this.options).toString(CryptoJS.enc.Hex);\n        let hash = (new HexEncoder()).decode(hashHex);\n        return new Uint8Array(hash);\n    }\n}\n","import BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Ripemd160Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.RIPEMD160;\n    }\n}\n","import BaseHasher from \"./BaseHasher\";\nimport HashAlgorithmEnum from \"../../../enums/HashAlgorithmEnum\";\n\nexport default class Md5Hasher extends BaseHasher {\n\n    getAlgorithm(): string {\n        return HashAlgorithmEnum.MD5;\n    }\n}\n","import HashAlgorithmEnum from \"../enums/HashAlgorithmEnum\";\nimport Sha1Hasher from \"../libs/encoders/hash/Sha1Hasher\";\nimport Sha224Hasher from \"../libs/encoders/hash/Sha224Hasher\";\nimport Sha256Hasher from \"../libs/encoders/hash/Sha256Hasher\";\nimport Sha512Hasher from \"../libs/encoders/hash/Sha512Hasher\";\nimport Sha384Hasher from \"../libs/encoders/hash/Sha384Hasher\";\nimport Sha3Hasher from \"../libs/encoders/hash/Sha3Hasher\";\nimport Ripemd160Hasher from \"../libs/encoders/hash/Ripemd160Hasher\";\nimport Md5Hasher from \"../libs/encoders/hash/Md5Hasher\";\n\nlet hashClassMap = {};\nhashClassMap[HashAlgorithmEnum.SHA1] = Sha1Hasher;\nhashClassMap[HashAlgorithmEnum.SHA224] = Sha224Hasher;\nhashClassMap[HashAlgorithmEnum.SHA256] = Sha256Hasher;\nhashClassMap[HashAlgorithmEnum.SHA512] = Sha512Hasher;\nhashClassMap[HashAlgorithmEnum.SHA384] = Sha384Hasher;\nhashClassMap[HashAlgorithmEnum.SHA3] = Sha3Hasher;\nhashClassMap[HashAlgorithmEnum.RIPEMD160] = Ripemd160Hasher;\nhashClassMap[HashAlgorithmEnum.MD5] = Md5Hasher;\n\nexport default hashClassMap;\n","import BaseHasher from \"./BaseHasher\";\nimport _ from 'lodash';\nimport hashClassMap from \"../../../config/hashClassMap\";\n\nexport default class PolymorphicHasher extends BaseHasher {\n\n    protected classMap: object = {};\n    protected algorithm: string;\n\n    constructor(algorithm: string, classMap: object = {}) {\n        super();\n        this.algorithm = algorithm;\n        let allClassMap = PolymorphicHasher.getDefaultClassMap();\n        if (!_.isEmpty(classMap)) {\n            allClassMap = _.merge(allClassMap, classMap);\n        }\n        this.classMap = allClassMap;\n    }\n\n    encode(value) {\n        let hasher = this.getHasherInstance();\n        return hasher.encode(value);\n    }\n\n    getAlgorithm(): string {\n        return this.algorithm;\n    }\n\n    addAlgorithmClass(algorithm, className) {\n        this.classMap[algorithm] = className;\n    }\n\n    getHasherInstance() {\n        return this.createHasherByAlgorithm(this.algorithm);\n    }\n\n    private static getDefaultClassMap() {\n        return hashClassMap;\n    }\n\n    private createHasherByAlgorithm(algorithm) {\n        let hasherClass = this.classMap[algorithm];\n        return new hasherClass();\n    }\n}\n","import HashAlgorithmEnum from \"../enums/HashAlgorithmEnum\";\nimport PolymorphicHasher from \"../libs/encoders/hash/PolymorphicHasher\";\n\nexport default class HashHelper {\n\n    static hash(algorithm, value) {\n        let hasher = new PolymorphicHasher(algorithm);\n        return hasher.encode(value);\n    }\n\n    static createHasherByAlgorithm(algorithm) {\n        let hasher = new PolymorphicHasher(algorithm);\n        return hasher.getHasherInstance();\n    }\n\n    static sha256(value) {\n        return this.hash(HashAlgorithmEnum.SHA256, value);\n    }\n\n    static ripemd160(value) {\n        return this.hash(HashAlgorithmEnum.RIPEMD160, value);\n    }\n}\n","export default class VerifyEntity {\n\n    signature;\n    publicKey;\n    isVerified = false;\n    isVerifiedHash = false;\n\n}\n","import CryptoHashHelper from \"../../../key/domain/helpers/CryptoHashHelper\";\nimport HashHelper from \"../../../../../packages/ext/hash/helpers/HashHelper\";\nimport format from \"./fork/format\";\nimport ecdsa from \"ecdsa\";\nimport BigInt from \"bigi\";\nimport coins from \"coinstring\";\nimport {MessageBuilder as Binary} from \"crypto-binary\";\n\nexport default class CoinMsg {\n\n    ecdsa;\n    coinname = 'BITCOIN';\n    curve = 'secp256k1';\n    magicPrefix;\n\n    constructor(opt = null) {\n        this.ecdsa = ecdsa(opt.curve || 'secp256k1');\n        this.coinname = opt.coinname;\n        this.magicPrefix = new Buffer(opt.magicPrefix);\n    }\n\n    magicHash(message) {\n        Buffer.isBuffer(message) || (message = new Buffer(message, 'utf8'));\n        let bin = new Binary();\n        bin.put(this.magicPrefix);\n        bin.putVarInt(message.length);\n        bin.put(message);\n        return CryptoHashHelper.sha256x2(bin.raw());\n    }\n\n    sign(privateKey, message, compressed = null) {\n        let hash = this.magicHash(message);\n        let e = BigInt.fromBuffer(hash);\n        let sig = this.ecdsa.sign(hash, privateKey);\n        let Q = this.ecdsa.ecparams.g.multiply(BigInt.fromBuffer(privateKey));\n        let i = this.ecdsa.calcPubKeyRecoveryParam(e, sig, Q);\n        return this.ecdsa.serializeSigCompact(sig, i, (compressed == null || compressed))\n    }\n\n    verify(expected, sig, message) {\n        Buffer.isBuffer(sig) || (sig = new Buffer(sig, 'base64'));\n        let publicKey = this.recoverPubKey(sig, message);\n        if (Buffer.isBuffer(expected)) {\n            return expected.toString('hex') === publicKey.toString('hex');\n        } else {\n            let networkVer = coins.decode(expected)[0];\n            let actualAddress = coins.encode(HashHelper.ripemd160(publicKey), networkVer);\n            return expected === actualAddress\n        }\n    }\n\n    recoverPubKey(sig, message) {\n        Buffer.isBuffer(sig) || (sig = new Buffer(sig, 'base64'));\n        let hash = this.magicHash(message);\n        let e = BigInt.fromBuffer(hash);\n        let parsed = this.ecdsa.parseSigCompact(sig);\n        let Q = this.ecdsa.recoverPubKey(e, parsed.signature, parsed.i);\n        return Q.getEncoded(parsed.compressed);\n    }\n\n    format(address, sig, message) {\n        return format(this.coinname, address, sig, message);\n    }\n}\n","\nvar version = 'coinmsg/v0.1.3';\n\nmodule.exports = function(coinname, address, sig, message) {\n  Buffer.isBuffer(sig) && (sig = sig.toString('base64'));\n\n  return [\n    '-----BEGIN '+coinname+' SIGNED MESSAGE-----',\n    message,\n    '-----BEGIN '+coinname+' SIGNATURE-----',\n    'Version: ' + version,\n    'Address: ' + address,\n    sig,\n    '-----END '+coinname+' SIGNATURE-----'\n  ].join('\\n')\n};\n","import _ from 'lodash';\n\nexport default class ObjectHelper {\n\n    static iterate(obj, handler) {\n        for (let property in obj) {\n            if (obj.hasOwnProperty(property)) {\n                let value = obj[property];\n                if (obj.hasOwnProperty(property)) {\n                    let isPlain = _.isPlainObject(value) || Array.isArray(value);\n                    if (isPlain) {\n                        this.iterate(value, handler);\n                    } else {\n                        handler(obj, property);\n                    }\n                }\n            }\n        }\n    }\n\n    static clone(object) {\n        return _.cloneDeep(object);\n    }\n\n    static createClassByName(name, ...a) {\n        let c = eval(name);\n        return new c(...a);\n    }\n\n    static isClass(definition): boolean {\n        return typeof definition == 'function' && definition.name;\n    }\n\n    static isFunction(definition): boolean {\n        return typeof definition == 'function' && !definition.name;\n    }\n\n    static isObject(definition): boolean {\n        return typeof definition == 'object';\n    }\n}\n","import HashAlgorithmEnum from \"../../../../../packages/ext/hash/enums/HashAlgorithmEnum\";\n// import hash from 'crypto-hashing';\nimport VerifyEntity from \"../entities/VerifyEntity\";\nimport SignatureEntity from \"../entities/SignatureEntity\";\nimport CryptoKeyHelper from \"../../../key/domain/helpers/CryptoKeyHelper\";\nimport HashHelper from \"../../../../../packages/ext/hash/helpers/HashHelper\";\nimport DocumentFormat from \"./bitcoin/DocumentFormat\";\n\nexport default class MessageSigner {\n\n    protected signer;\n    protected hashAlgorithm = HashAlgorithmEnum.SHA256;\n\n    constructor(signer) {\n        this.signer = signer;\n    }\n\n    hash(message) {\n        return HashHelper.hash(this.hashAlgorithm, message);\n    }\n\n    sign(message, privateKey = undefined) {\n        // const msgHash = this.hash(message);\n        let signatureEntity = this.signer.signMessage(message, privateKey);\n        signatureEntity.message = message;\n        return signatureEntity;\n    }\n\n    verifyDocument(document: string) {\n        let documentFormat = new DocumentFormat('BITCOIN');\n        let signatureEntity = documentFormat.decode(document);\n        return this.verify(signatureEntity.signature, signatureEntity.message);\n    }\n\n    verify(signature, message, publicKey = undefined) {\n\n        let signatureEntity = new SignatureEntity();\n        signatureEntity.signature = signature;\n        signatureEntity.message = message;\n\n        let verifyEntity = this.signer.verifyEntity(signatureEntity);\n\n\n\n        verifyEntity.signature.messageHash = this.hash(message);\n        // verifyEntity.signature.publicKey = publicKey;\n        verifyEntity.signature.address = CryptoKeyHelper.addressByHash(verifyEntity.signature.publicKey);\n\n        return verifyEntity;\n\n        /*if(!publicKey) {\n            publicKey = this.signer.recoverPublicKey(signature, message);\n        }\n\n        signatureEntity.messageHash = this.hash(message);\n        signatureEntity.publicKey = publicKey;\n        signatureEntity.address = CryptoKeyHelper.addressByHash(publicKey);\n\n        let verifyEntity = new VerifyEntity();\n        let isVerified = this.signer.verifyMessage(signature, message);\n        verifyEntity.isVerified = isVerified !== false;\n        verifyEntity.signature = signatureEntity;\n        verifyEntity.publicKey = signatureEntity.publicKey;\n\n        return verifyEntity;*/\n\n        /*if(pubKey === undefined) {\n            pubKey = this.recoverPublicKey(signature, this.hash(message));\n        }*/\n\n        /*const msgHash = this.hash(message);\n        let verifyEntity = new VerifyEntity();\n        let signatureEntity = new SignatureEntity();\n        signatureEntity.signature = signature;\n        signatureEntity.message = message;\n        signatureEntity.messageHash = msgHash;\n        signatureEntity.publicKey = pubKey;\n        signatureEntity.address = CryptoKeyHelper.addressByHash(pubKey);\n        verifyEntity.signature = signatureEntity;\n\n        let isVerified = this.signer.verifyMessage(signature, message);\n        // let isVerified = this.signer.verify(signature, msgHash, pubKey);\n\n        verifyEntity.isVerified = isVerified !== false;\n        //verifyEntity.publicKey = this.signer.recoverPublicKey(signature, msgHash);\n        if(typeof isVerified === 'string') {\n\n        }\n        // verifyEntity.isVerifiedHash = msgHash === ;\n        return verifyEntity;*/\n    }\n\n    recoverPublicKey(signature, message) {\n        return this.signer.recoverPublicKey(signature, message);\n    }\n}\n","import DocumentFormat from \"../libs/bitcoin/DocumentFormat\";\nimport BitcoinSigner from \"../libs/bitcoin/BitcoinSigner\";\nimport MessageSigner from \"../libs/MessageSigner\";\nimport CoinMsg from \"../libs/CoinMsg\";\n\nclass CryptoFactory {\n\n    createBitcoinMessageSigner(privateKey = null) {\n        let signer = this.createBitcoinSigner();\n        if(privateKey) {\n            signer.privateKey = privateKey;\n        }\n// let signer = new Signer();\n        return new MessageSigner(signer);\n    }\n\n    createBitcoinSigner() {\n        let documentFormat = this.createBitcoinDocumentFormat();\n        return new BitcoinSigner(documentFormat);\n    }\n\n    createBitcoinDocumentFormat() {\n        return new DocumentFormat('BITCOIN');\n    }\n\n    createBitcoinCoinMsg() {\n        let options = {\n            coinname: 'BITCOIN',\n            curve: 'secp256k1',\n            magicPrefix: '\\x18Bitcoin Signed Message:\\n'\n        };\n        return new CoinMsg(options);\n    }\n}\n\nexport default new CryptoFactory();\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport aesjs from 'aes-js';\nimport conv from 'binstring';\n\nexport default class HexEncoder implements EncoderInterface {\n\n    encode(binary, fromFormat = undefined) {\n        if (fromFormat !== undefined) {\n            let options = {out: 'hex'};\n            if (fromFormat) {\n                options[\"in\"] = fromFormat;\n            }\n            return conv(binary, options);\n        }\n        return aesjs.utils.hex.fromBytes(binary);\n    }\n\n    decode(hex) {\n        return aesjs.utils.hex.toBytes(hex);\n    }\n}\n","\nimport lodash from \"lodash\";\nimport ObjectHelper from \"../../../ext/object/helpers/ObjectHelper\";\n\nexport default class DiConfigurator {\n\n    private _di;\n    private readonly _prefix = null;\n\n    constructor(di = null, prefix: string = null) {\n        this._di = di;\n        this._prefix = prefix;\n    }\n\n    get di() {\n        return this._di;\n    }\n\n    set di(value) {\n        this._di = value;\n    }\n\n    createInstance(prefix = null) {\n        let diConfigurator = new DiConfigurator(this._di, prefix);\n        diConfigurator.di = this._di;\n        return diConfigurator;\n    }\n\n    prepareId(id: string): string {\n        if(this._prefix == null) {\n            return id;\n        }\n        return this._prefix + '.' + id;\n    }\n\n    prepareDependencies(dependencies: string[] = null): string[] {\n        let result = [];\n        for (let i in dependencies) {\n            let id = dependencies[i];\n            id = id.replace('this.', this._prefix + '.');\n            result.push(id);\n        }\n        return result;\n    }\n\n    bind(id: string, definition, dependencies: string[] = null): void {\n        let path = this.prepareId(id);\n        let options = {\n            dependencies: this.prepareDependencies(dependencies),\n            factoryMethod: null,\n        };\n\n        /*if(typeof definition == 'object') {\n            options.factoryMethod = () => lodash.cloneDeep(definition);\n            // this.singleton(path, factoryMethod);\n            return;\n        } else if(typeof definition == 'function') {\n            let className = definition.name;\n            if(className) {\n                options.factoryMethod = () => new definition;\n            } else {\n                options.factoryMethod = definition;\n            }\n        } else {\n            // options.factoryMethod = () => new factoryMethod.name();\n            // options.factoryMethod = () => ObjectHelper.createClassByName(factoryMethod.name);\n        }*/\n\n        if(ObjectHelper.isObject(definition)) {\n            options.factoryMethod = () => lodash.cloneDeep(definition);\n            // this.singleton(path, definition); return;\n        } else if(ObjectHelper.isFunction(definition)) {\n            options.factoryMethod = definition;\n        } else if(ObjectHelper.isClass(definition)) {\n            /*let deps = [];\n            for (let i in options.dependencies) {\n                let id = options.dependencies[i];\n                deps.push('param' + id);\n            }*/\n            // options.factoryMethod = (...deps) => new definition(...deps);\n            options.factoryMethod = (...deps) => new definition(...deps);\n        } else {\n            throw new Error('Unknown type of definition');\n        }\n\n        this._di.register(path, options);\n    }\n\n    singleton(id: string, define): void {\n        let path = this.prepareId(id);\n        let definition;\n\n        /*if(typeof define == 'function') {\n            definition = define();\n        } else if(typeof define == 'object') {\n            definition = define;\n        } else {\n            definition = new define();\n            // definition = Object.create(define);\n        }*/\n\n        if(ObjectHelper.isObject(define)) {\n            definition = define;\n        } else if(ObjectHelper.isFunction(define)) {\n            definition = define();\n        } else if(ObjectHelper.isClass(define)) {\n            definition = new define;\n        } else {\n            throw new Error('Unknown type of definition');\n        }\n\n        this._di.registerInstance(path, definition);\n    }\n\n    get(id: string) {\n        let path = this.prepareId(id);\n        return this._di.resolve(path);\n    }\n}\n","import DiConfigurator from \"../libs/DiConfigurator\";\n\nexport default new DiConfigurator();\n","import lodash from \"lodash\";\nimport diConfigurator from \"../singletons/diConfigurator\";\n\nexport default class Container {\n\n    private _di;\n\n    constructor(di = null) {\n        this._di = di;\n    }\n\n    get di() {\n        return this._di;\n    }\n\n    set di(value) {\n        this._di = value;\n    }\n\n    set(id: string, value) {\n        if (typeof value == 'object') {\n            diConfigurator.singleton(id, value);\n        } else if (typeof value == 'function') {\n            diConfigurator.bind(id, value);\n        }\n    }\n\n    get(id: string) {\n        let instance = lodash.get(this, id);\n        if (typeof instance == 'object') {\n            return instance;\n        }\n        return this.di.resolve(id);\n    }\n\n    /*load(config) {\n        Object.assign(this, config);\n    }*/\n}\n","import Container from \"../libs/Container\";\n\nexport default new Container();\n","\nimport diConfigurator from \"./diConfigurator\";\nimport container from \"./container\";\nimport diFactory from \"../factories/diFactory\";\n\n/*DiContainer.setContainer(new DiContainer());\nlet di = DiContainer.getContainer();*/\nlet di = diFactory.createDi();\n\ndiConfigurator.di = di;\ncontainer.di = di;\n","import {DiContainer} from \"bubble-di\";\n\nclass DiFactory {\n\n    createDi() {\n        DiContainer.setContainer(new DiContainer());\n        return DiContainer.getContainer();\n    }\n}\n\nexport default new DiFactory();\n","import _ from 'lodash';\n\nexport default class BaseConfigManager {\n\n    protected config = {};\n\n    /*set(path, value) {\n        _.set(this.config, path, value);\n    }*/\n\n    get(path, defaultValue = null) {\n        return _.get(this.config, path, defaultValue);\n    }\n\n    load(config) {\n        if(!_.isEmpty()) {\n            throw new Error('Config already loaded! Config can not override!');\n        }\n        this.config = config;\n    }\n\n    /*all() {\n        return this.config;\n    }*/\n}\n","import BaseConfigManager from \"../libs/BaseConfigManager\";\n\nexport default new BaseConfigManager();\n","import _ from \"lodash\";\n\nexport default class ArrayNestedHelper {\n\n    static keyArr = [];\n    static result = {};\n\n    static decode(params) {\n        let map = {};\n        for (let key in params) {\n            if (params.hasOwnProperty(key)) {\n                let value = params[key];\n                _.set(map, key, value);\n            }\n        }\n        return map;\n    }\n\n    static encode(map) {\n        this.reset();\n        this._encode(map);\n        return this.result;\n    }\n\n    private static reset() {\n        this.result = {};\n        this.keyArr = [];\n    }\n\n    private static _encode(map) {\n        for (let key in map) {\n            let value = map[key];\n            this.keyArr.push(key);\n            let arr = this.keyArr;\n            let keyString = arr.join('.');\n\n            if (_.isObject(value)) {\n                //console.log(keyString, value);\n                this._encode(value);\n            } else {\n                // console.log(keyString, value);\n                this.result[keyString] = value;\n            }\n            this.keyArr.pop();\n        }\n    }\n}\n","import _ from \"lodash\";\nimport flow from \"lodash/fp/flow\";\nimport pickBy from \"lodash/fp/pickBy\";\nimport mapValues from \"lodash/fp/mapValues\";\nimport map from \"lodash/fp/map\";\nimport assign from \"lodash/fp/assign\";\nimport {default as fpOmitBy} from \"lodash/fp/omitBy\";\nimport {default as fpFilter} from \"lodash/fp/filter\";\nimport {isArray, isEmpty, isObject, omitBy} from \"lodash-es\";\n\nexport const compact = (obj) => !isObject(obj) ? obj : isArray(obj) ? compactArray(obj) : compactObject(obj);\n\nconst compactArray = (arr) => flow(\n    map(compact),\n    fpFilter(x => !isEmpty(x) || !isObject(x)),\n)(arr);\n\nconst compactObject = (obj) => flow(\n    pickBy(isObject),\n    mapValues(compact),\n    fpOmitBy(isEmpty),\n    assign(omitBy(obj, isObject)),\n)(obj);\n\nfunction removeEmptyObjects(obj) {\n\n    return _.omitBy(obj, (v) => _.isUndefined(v) || _.isNull(v) || v === '');\n\n    return _(obj)\n        .pickBy(_.isObject) // pick objects only\n        .mapValues(removeEmptyObjects) // call only for object values\n        .omitBy(_.isEmpty) // remove all empty objects\n        .assign(_.omitBy(obj, () => true)) // assign back primitive values\n        .value();\n}\n\n\nexport default class ArrayHelper {\n\n    public static isEmpty(value): boolean {\n        return _.isEmpty(value);\n    }\n\n    public static removeEmpty(obj) {\n        if (Array.isArray(obj)) {\n            const finalObj = [];\n            for (let i in obj) {\n                let value = obj[i];\n                if (_.isObject(value) || Array.isArray(value)) {\n                    value = this.removeEmpty(value);\n                }\n                if (value) {\n                    finalObj.push(value);\n                }\n            }\n            return finalObj;\n        } else if (_.isObject(obj)) {\n            const finalObj = {};\n            Object.keys(obj).forEach((key) => {\n                let value = obj[key];\n                if (!this.isEmpty(value)) {\n                    finalObj[key] = value;\n                } else if (Array.isArray(value)) {\n                    finalObj[key] = this.removeEmpty(value);\n                } else if (value && typeof value === 'object' && !Array.isArray(value)) {\n                    const nestedObj = this.removeEmpty(value);\n                    if (Object.keys(nestedObj).length) {\n                        finalObj[key] = nestedObj;\n                    }\n                }\n            });\n            return finalObj;\n        }\n    }\n}\n","export default class RouterTypeEnum {\n\n    static readonly SLASH = 'slash';\n    static readonly HASH = 'hash';\n\n}\n","import _ from \"lodash\";\nimport ArrayNestedHelper from \"../../array/ArrayNestedHelper\";\nimport ArrayHelper from \"../../array/ArrayHelper\";\nimport RouterTypeEnum from \"../../../../common/app/domain/enums/RouterTypeEnum\";\nimport configManager from \"../../../core/configManager/singletons/configManager\";\n\nexport default class UrlHelper {\n\n    static normalize(uri: string): string {\n        let pureUri = UrlHelper.trim(uri);\n        // let pureUri = UrlHelper.trim(uri);\n\n        let resultUri;\n\n        let routerType = configManager.get('router.type');\n\n        if(routerType === RouterTypeEnum.HASH) {\n            resultUri = '/#/' + pureUri;\n        } else if(routerType === RouterTypeEnum.SLASH) {\n            resultUri = '/' + pureUri;\n        }\n\n        return resultUri;\n        // console.log('/#/' + pureUri);\n        // return uri;\n    }\n\n    static getMaskUrlArr11111111111111(params) {\n        let url = window.location.toString();\n        url = url.replace(/#\\//g, \"\");\n        // url = UrlHelper.trim(url);\n        let parsedUrl = UrlHelper.getLocation(url);\n        for(let name in params) {\n            let value = params[name];\n            UrlHelper.setParamInSearchParams(parsedUrl.searchParams, name, value);\n        }\n        return UrlHelper.generateUri(parsedUrl);\n    }\n\n    static getMaskUrlArr(params, uri = null) {\n        // let url = window.location.toString();\n        if(!uri) {\n            uri = window.location.pathname + window.location.search + window.location.hash;\n        }\n\n        let ss = uri.split('?');\n        let query = '';\n        let searchArr = {};\n        if(ss[1]) {\n            searchArr = UrlHelper.parseQueryParams(ss[1]);\n        }\n\n        for(let name in params) {\n            let value = params[name];\n            delete searchArr[name];\n            if(value) {\n                searchArr[name] = value;\n            }\n\n            // UrlHelper.setParamInSearchParams(searchArr, name, value);\n        }\n        query = '?' + UrlHelper.encodeQuery(searchArr);\n\n        // console.log(ss[0] + '?' + query);\n\n        let path = ss[0];\n        path = UrlHelper.trim(path);\n        let url = '/' + path + query;\n        // console.log(url)\n        return url;\n        //\n        /*url = url.replace(/#\\//g, \"\");\n        // url = UrlHelper.trim(url);\n        let parsedUrl = UrlHelper.getLocation(url);\n        for(let name in params) {\n            let value = params[name];\n            UrlHelper.setParamInSearchParams(parsedUrl.searchParams, name, value);\n        }\n        return UrlHelper.generateUri(parsedUrl);*/\n    }\n\n    static getMaskUrl(name, value) {\n        let url = window.location.toString();\n        url = url.replace(/#\\//g, \"\");\n        // url = UrlHelper.trim(url);\n        let parsedUrl = UrlHelper.getLocation(url);\n        UrlHelper.setParamInSearchParams(parsedUrl.searchParams, name, value);\n\n        return this.normalize(UrlHelper.generateUri(parsedUrl));\n    }\n\n    static parseQueryParamsMap(search, defaultValues = {}) {\n        /*if(search === null) {\n            search = window.location.search;\n        }*/\n        let params = UrlHelper.parseQueryParams(search);\n        params = ArrayNestedHelper.decode(params);\n        // Object.assign(defaultValues, params);\n        return params;\n    }\n\n    static parseQueryParams(search) {\n        let hashes = search.slice(search.indexOf('?') + 1).split('&');\n        hashes = ArrayHelper.removeEmpty(hashes);\n        if(_.isEmpty(hashes)) {\n            return {};\n        }\n        return hashes.reduce((params, hash) => {\n            let [key, val] = hash.split('=');\n            return Object.assign(params, {[key]: decodeURIComponent(val)})\n        }, {});\n    }\n\n    static getLocation(href = null) {\n        return new URL(href ?? window.location);\n        /*let urlObject = document.createElement(\"a\");\n        urlObject.href = href;\n        return urlObject;*/\n    }\n\n    static getOrigin(url = null) {\n        url = url || window.location;\n        return this.getLocation(url).origin;\n    }\n\n    static encodeQuery(params) {\n        const sections = [];\n        for (let key in params)\n            if (params.hasOwnProperty(key)) {\n                let section = this.encodeQueryParam(key, params[key]);\n                sections.push(section);\n            }\n        return sections.join('&');\n    }\n\n    protected static generateUri(parsedUrl) {\n        let resultUrl = /*parsedUrl.origin + '/#' + this.normalize*/(parsedUrl.pathname);\n        //if (urlQueryParams) {\n        resultUrl = resultUrl + '?' + parsedUrl.searchParams.toString(); //UrlHelper.encodeQuery(urlQueryParams);\n        //}\n        return resultUrl;\n    }\n\n    static setParamInSearchParams(searchParams, key, value) {\n        searchParams.delete(key);\n        if (value) {\n            searchParams.append(key, value);\n        }\n    }\n\n    static trim(uri) {\n        return _.trim(uri, '/#');\n    }\n\n    protected static encodeQueryParam(key, value) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(value);\n    }\n}\n","\nconst config = Object.freeze({\n    connections: [\n        {\n            rpcUrl: 'http://server.soc/json-rpc',\n            webSocketUrl: 'ws://server.soc:8001',\n        }\n    ]\n});\n\nexport default config;\n","// let apiDomain = 'server.soc';\n// let apiHost = 'http://' + apiDomain;\nimport UrlHelper from \"../../../packages/ext/html/helpers/UrlHelper\";\nimport server from './server';\n\nconst config = Object.freeze({\n    server: server,\n    router: {\n        // type: 'slash',\n        type: 'hash',\n    },\n    env: {\n        deprecateIsStrict: false,\n    },\n    /*get: function(id, defaultValue = undefined) {\n        return lodash.get(this, id, defaultValue);\n    },*/\n    copyright: {\n        title: null,\n        url: 'https://incloud.shop',\n    },\n    user: {\n        loginRoute: '/authorization/login',\n    },\n    language: {\n        default: 'en',\n        languages: [\n            'ru',\n            'kk',\n            'en',\n            'tr',\n            'de',\n            'fr',\n            'es',\n        ],\n    },\n    // rpcUrl: 'http://server.soc/json-rpc',\n    // webSocketUrl: 'ws://server.soc:8001',\n    oauth: {\n        client: {\n            clientId: '',\n            clientSecret: ' ',\n            accessTokenUri: 'https://github.com/login/oauth/access_token',\n            authorizationUri: 'https://github.com/login/oauth/authorize',\n            redirectUri: UrlHelper.getOrigin() + '/#/authorization/oauth/callback',\n            scopes: ['notifications', 'gist']\n        },\n        token: {\n            expiresIn: 1234, // Seconds.\n            // expiresIn: new Date('2016-11-08', // Date.\n        },\n    },\n    webSocket: {\n        enable: false,\n        startDelay: 100,\n    },\n});\n\nexport default config;\n","import configManager from \"../../../../packages/core/configManager/singletons/configManager\";\nimport config from \"../../config/config\";\n\nconfigManager.load(config);\n","export default class CrudActionEnum {\n\n    static readonly ALL = 'ALL';\n    static readonly SET =  'SET';\n    static readonly GET =  'GET';\n    static readonly REMOVE =  'REMOVE';\n}\n","import CrudActionEnum from \"../../domain/enums/CrudActionEnum\";\nimport _ from 'lodash';\n\nexport default class BaseCrudReducer {\n\n    protected _prefix;\n    protected _initialState = {};\n\n    constructor(prefix = null) {\n        this._prefix = prefix;\n    }\n\n    set prefix(value) {\n        this._prefix = value;\n    }\n\n    get prefix() {\n        return this._prefix;\n    }\n\n    set initialState(value) {\n        this._initialState = value;\n    }\n\n    actionName(name) {\n        return this.prefix + name;\n    }\n\n    assignAttribute(action, attrNames) {\n        let source2 = {};\n        for (let i in attrNames) {\n            if (attrNames.hasOwnProperty(i)) {\n                let attrName = attrNames[i];\n                source2[attrName] = action[attrName];\n            }\n        }\n        return source2;\n    }\n\n    assignObject(state, action, target = {}) {\n        let source2 = _.clone(action);\n        delete source2.type;\n        return Object.assign(target, state, source2);\n    }\n\n    run(state = this._initialState, action) {\n        switch (action.type) {\n            case this.actionName(CrudActionEnum.SET):\n                return this.assignObject(state, action);\n            case this.actionName(CrudActionEnum.REMOVE):\n                return null;\n            default:\n                return state;\n        }\n    }\n\n    /**\n     * Получить state\n     * Обычно используется для объявления редьюсеров в store\n     * @return function\n     */\n    getState() {\n        return this.run.bind(this);\n    }\n}\n","import BaseCrudReducer from \"./BaseCrudReducer\";\n\nexport default class CrudReducer extends BaseCrudReducer {\n\n}\n","import CrudActionEnum from \"../../domain/enums/CrudActionEnum\";\nimport CrudReducer from \"../reducers/CrudReducer\";\nimport container from \"../../container/singletons/container\";\n\nexport default class BaseStateRepository {\n\n    protected _reducerPrefix = null;\n    protected _reducer = null;\n    protected _initialState = {};\n\n    constructor(reducerPrefix = null) {\n        if (reducerPrefix) {\n            this._reducerPrefix = reducerPrefix;\n        }\n    }\n\n    get initialState() {\n        return this._initialState;\n    }\n\n    set initialState(value) {\n        this._initialState = value;\n    }\n\n    get reducerPrefix() {\n        return this._reducerPrefix;\n    }\n\n    get reducer() {\n        if (this._reducer === null) {\n            this._reducer = new CrudReducer(this.reducerPrefix);\n            this._reducer.initialState = this.initialState;\n        }\n        return this._reducer;\n    }\n\n    set reducer(value) {\n        this._reducer = value;\n    }\n\n    get state() {\n        return this.reducer.getState();\n    }\n\n    get store() {\n        return container.get('app.store');\n    }\n\n    setValue(action) {\n        action.type = CrudActionEnum.SET;\n        this.dispatch(action);\n    }\n\n    removeValue() {\n        let action = {\n            type: CrudActionEnum.REMOVE\n        };\n        this.dispatch(action);\n    }\n\n    protected resetValue() {\n        this.removeValue();\n        this.setValue(this.initialState);\n    }\n\n    _getSelfState() {\n        return this.store.getState()[this.reducerPrefix];\n    }\n\n    getValue(name) {\n        let state = this._getSelfState();\n        if(state && state.hasOwnProperty(name)) {\n            return state[name];\n        }\n    }\n\n    dispatch(action) {\n        action.type = this.reducerAction(action.type);\n        this.store.dispatch(action);\n    }\n\n    reducerAction(name) {\n        return this.reducerPrefix + name;\n    }\n}\n","import BaseStateRepository from \"./BaseStateRepository\";\n\nexport default class BaseCrudStateRepository extends BaseStateRepository {\n\n    setDataProvider(dataProvider) {\n        this.setValue({\n            dataProvider\n        });\n    }\n\n    setEntity(entity) {\n        this.setValue({\n            entity\n        });\n    }\n}\n","import BaseCrudStateRepository from \"../../../../../core/state/base/BaseCrudStateRepository\";\n\nexport default class StatusRepository extends BaseCrudStateRepository {\n\n    // #_value = false;\n\n    get reducerPrefix() {\n        return 'loaderStatus';\n    }\n\n    setStatus(status) {\n        // this.#_value = status;\n        this.setValue({\n            status\n        });\n    }\n\n    getStatus() {\n        // return this.#_value;\n        return this.getValue('status') || false;\n    }\n}\n","export default class BaseService {\n\n\n}\n","import BaseService from \"../../../../core/domain/services/BaseService\";\n\nexport default class StatusService extends BaseService {\n\n    protected stateRepository;\n\n    constructor(stateRepository) {\n        super();\n        this.stateRepository = stateRepository;\n    }\n\n    startLoad(name) {\n        // console.log('start');\n        this.stateRepository.setStatus(true);\n    }\n\n    endLoad(name) {\n        // console.log('end');\n        this.stateRepository.setStatus(false);\n    }\n\n    isLoading(name) {\n        return this.stateRepository.getStatus();\n    }\n}\n","import _ from \"lodash\";\nimport container from \"../../container/singletons/container\";\n\nexport default class ReduceConfigurator {\n\n    private reducers = {};\n\n    // todo: перенести в singleton\n    bind(name: string, state): void {\n        this.reducers[name] = state;\n    }\n\n    // todo: перенести в singleton\n    bindFromRepositoryId(repository): void {\n        let repo;\n        if(typeof repository == 'string') {\n            repo = container.get(repository);\n        } else {\n            repo = repository;\n        }\n        this.bind(repo.reducerPrefix, repo.state);\n    }\n\n    getReducers() {\n        return this.reducers;\n    }\n\n    // todo: перенести в singleton\n    getReducersFromDomains(domain) {\n        let reducers = _.clone(this.reducers);\n        for (let domainName in domain) {\n            if (domain.hasOwnProperty(domainName)) {\n                let domainInstance = domain[domainName];\n                if (typeof domainInstance.reducers === 'object') {\n                    Object.assign(reducers, domainInstance.reducers);\n                }\n            }\n        }\n        return reducers;\n    }\n}\n","import ReduceConfigurator from \"../libs/ReduceConfigurator\";\n\nexport default new ReduceConfigurator();\n","import configureDi from \"./config/di\";\nimport configureReducer from \"./config/reducer\";\n\nlet domainName = 'loader';\nconfigureDi(domainName);\nconfigureReducer(domainName);\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport StatusRepository from \"../repositories/state/StatusRepository\";\nimport StatusService from \"../services/StatusService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"repositories.state.status\", StatusRepository);\n    bundleDiConfigurator.bind(\n        \"services.status\",\n        StatusService,\n        [\n            \"this.repositories.state.status\"\n        ]\n    );\n}\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport reduceConfigurator from \"../../../../core/state/singletons/reduceConfigurator\";\n\nexport default function configureReducer(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    reduceConfigurator.bindFromRepositoryId(bundleDiConfigurator.get('repositories.state.status'));\n}\n","import HelpEntityHelper from \"../helpers/HelpEntityHelper\";\n\nclass HelpConfigurator {\n\n    private collection = [];\n\n    getCollection() {\n        return this.collection;\n    }\n\n    addCollection(domainName, collection) {\n        for (let i in collection) {\n            if (collection.hasOwnProperty(i)) {\n                let entity = collection[i];\n                this.addEntity(domainName, entity);\n            }\n        }\n    }\n\n    addEntity(domainName, entity) {\n        entity['domainName'] = domainName;\n        this.collection.push(entity);\n    }\n}\n\nconst helpConfigurator = new HelpConfigurator();\n\nexport default helpConfigurator;\n","import _ from \"lodash\";\n\nexport default class Query {\n\n    filter = {};\n    sort = {};\n    private _page: number = 1;\n    private _perPage: number = null;\n    with: string[] = [];\n\n    get page(): number {\n        return this._page;\n    }\n\n    set page(value: number) {\n        if(value < 1) {\n            throw new Error('Page less than 1');\n        }\n        this._page = value;\n    }\n\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    set perPage(value: number) {\n        if(value < 1) {\n            throw new Error('Per page less than 1');\n        }\n        this._perPage = value;\n    }\n\n    getFilterByName(name: string, defaultValue = null) {\n        return _.get(this.filter, name, defaultValue);\n    }\n\n    addFilter(name: string, value): void {\n        _.set(this.filter, name, value);\n    }\n\n    addSort(name: string, direction = 'asc'): void {\n        _.set(this.sort, name, direction);\n    }\n\n    addWith(name: string): void {\n        this.with.push(name);\n    }\n}\n","import Paginator from \"./Paginator\";\nimport Query from \"./Query\";\n\nexport default class DataProvider {\n\n    collection: object[] = [];\n    paginator: Paginator;\n    query: Query = new Query();\n}\n","export default class Paginator {\n\n    protected _perPage;\n    protected _totalCount;\n    protected _page;\n    protected _lastPage;\n\n    get perPage() {\n        return this._perPage || null;\n    }\n\n    set perPage(value) {\n        this._perPage = value;\n    }\n\n    get totalCount() {\n        return this._totalCount || null;\n    }\n\n    set totalCount(value) {\n        this._totalCount = value;\n    }\n\n    get page() {\n        return this._page || 1;\n    }\n\n    set page(value) {\n        this._page = value;\n    }\n\n    get lastPage() {\n        return Math.ceil(this.totalCount / this.perPage);\n        // return this._lastPage;\n    }\n}\n","export default class TemplateHelper {\n\n    static render(template, vars, begin = '{{', end = '}}') {\n        for (let varName in vars) {\n            if (vars.hasOwnProperty(varName)) {\n                let varValue = vars[varName];\n                let placeholder = begin + varName + end;\n                template = template.replace(placeholder, varValue);\n            }\n        }\n        return template;\n    }\n}\n","import TemplateHelper from \"../../../../ext/string/helpers/TemplateHelper\";\n\nexport default class HelpEntityHelper {\n\n    private static renderList(list, vars) {\n        for (let i in list) {\n            if (list.hasOwnProperty(i)) {\n                let it = list[i];\n                list[i] = TemplateHelper.render(it, vars);\n            }\n        }\n        return list;\n    }\n\n    public static prepareEntity(domainName, entity) {\n        let vars = {\n            domainName,\n        };\n        entity.name = TemplateHelper.render(entity.name, vars);\n        entity['id'] = entity.name;\n        vars['name'] = entity.name;\n        vars['id'] = entity.name;\n        vars['title'] = entity.title ? TemplateHelper.render(entity.title, vars) : entity.name;\n        if (entity.menu) {\n            entity.menu = HelpEntityHelper.renderList(entity.menu, vars);\n        }\n        if (entity.breadcrumbs) {\n            entity.breadcrumbs = HelpEntityHelper.renderList(entity.breadcrumbs, vars);\n        }\n        if (entity.content) {\n            entity.content = TemplateHelper.render(entity.content, vars);\n        }\n        return entity;\n    }\n}","import _ from \"lodash\";\nimport helpConfigurator from \"../../singletons/helpConfigurator\";\nimport DataProvider from \"../../../../../core/domain/libs/DataProvider\";\nimport Query from \"../../../../../core/domain/libs/Query\";\nimport Paginator from \"../../../../../core/domain/libs/Paginator\";\nimport HelpEntityHelper from \"../../helpers/HelpEntityHelper\";\nimport ReadRepositoryInterface from \"../../../../../core/domain/interfaces/repository/packs/ReadRepositoryInterface\";\n\nexport default class ArticleRepository implements ReadRepositoryInterface {\n\n    protected collection;\n\n    constructor() {\n        let collection = helpConfigurator.getCollection();\n        for (let i in collection) {\n            let entity = collection[i];\n            entity = HelpEntityHelper.prepareEntity(entity.domainName, entity);\n        }\n        this.collection = collection;\n    }\n\n    forgeQuery(query) {\n        if (query === null) {\n            query = {};\n        }\n        return query;\n    }\n\n    findOneByName(name) {\n        let callback = function (entity) {\n            return entity.name == name;\n        };\n        return _.find(this.collection, callback);\n    }\n\n\n    protected _createPaginatorFromRequestMeta(meta) {\n        let paginator = new Paginator();\n        paginator.page = meta.page || 1;\n        paginator.perPage = meta.perPage || 1000;\n        paginator.totalCount = meta.totalCount || 0;\n        return paginator;\n    }\n\n    async oneById(id, query: Query = null) {\n        query = this.forgeQuery(query);\n        query['id'] = id;\n        return this.findOneByName(id);\n    }\n\n    async all(query: Query = null) {\n        let collection = this.collection;\n        let level = query.getFilterByName('level');\n        if (level === 0) {\n            let callback = function (entity) {\n                if (entity.breadcrumbs) {\n                    return entity.breadcrumbs.length == 1 && entity.name == entity.breadcrumbs[0];\n                }\n                return false;\n            };\n            collection = _.filter(collection, callback);\n        }\n\n        let dataProvider = new DataProvider();\n        dataProvider.collection = collection;\n        dataProvider.paginator = this._createPaginatorFromRequestMeta({totalCount: collection.length});\n        dataProvider.query = query;\n        return dataProvider;\n    }\n\n    async getDataProvider(query: Query = null) {\n        return this.all(query);\n    }\n}\n","import BaseService from \"./BaseService\";\nimport Query from \"../libs/Query\";\n\nexport default class BaseCrudService extends BaseService {\n\n    protected _stateRepository = null;\n    protected _repository = null;\n\n    constructor(storeDispatcher = null, repository) {\n        super();\n        this._stateRepository = storeDispatcher;\n        this._repository = repository;\n    }\n\n    get stateRepository() {\n        return this._stateRepository;\n    }\n\n    get repository() {\n        return this._repository;\n    }\n\n    async update(entity: object) {\n        return await this.repository.update(entity);\n        /*try {\n            return await this.repository.update(entity);\n        } catch (error) {\n            throw error;\n        }*/\n    }\n\n    async oneById(id, query: Query = null) {\n        try {\n            let entity = await this.repository.oneById(id, query);\n            if(this.stateRepository) {\n                this.stateRepository.setEntity(entity);\n            }\n            return entity;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async deleteById(id) {\n        try {\n            let entity = await this.repository.deleteById(id);\n            return entity;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async all(query = null) {\n        try {\n            let dataProvider = await this.repository.all(query);\n            if(this.stateRepository) {\n                this.stateRepository.setDataProvider(dataProvider);\n            }\n            return dataProvider;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async getDataProvider(query: Query = null) {\n        try {\n            let dataProvider = await this.repository.getDataProvider(query);\n            if(this.stateRepository) {\n                this.stateRepository.setDataProvider(dataProvider);\n            }\n            return dataProvider;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import BaseService from \"../../../../core/domain/services/BaseService\";\nimport ArticleRepository from \"../repositories/array/ArticleRepository\";\nimport BaseCrudService from \"../../../../core/domain/services/BaseCrudService\";\n\nexport default class ArticleService extends BaseCrudService {\n\n    protected articleRepository: ArticleRepository;\n\n    constructor(articleRepository: ArticleRepository) {\n        super(null, articleRepository);\n        this.articleRepository = articleRepository;\n    }\n\n    findOneByName(name) {\n        return this.articleRepository.findOneByName(name);\n    }\n}\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport ArticleRepository from \"../repositories/array/ArticleRepository\";\nimport ArticleService from \"../services/ArticleService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"repositories.array.article\", ArticleRepository);\n    bundleDiConfigurator.bind(\n        \"services.article\",\n        ArticleService,\n        [\n            \"this.repositories.array.article\"\n        ]\n    );\n}\n","import configureDi from \"./config/di\";\n\nlet domainName = 'help';\nconfigureDi(domainName);\n","import React from \"react\";\nimport {Button, Modal} from \"react-bootstrap\";\n\nexport default function ConfirmModalFooter(props) {\n    return (\n        <Modal.Footer>\n            <Button variant=\"secondary\" onClick={props.onHide}>\n                Close\n            </Button>\n            <Button variant=\"danger\" onClick={props.onConfirm}>\n                {props.confirmLabel}\n            </Button>\n        </Modal.Footer>\n    );\n}\n","import BaseService from \"../../../../core/domain/services/BaseService\";\nimport ModalService from \"./ModalService\";\nimport ConfirmModalFooter from \"../../web/views/confirmModalFooter\";\n\nexport default class ConfirmService extends BaseService {\n\n    protected modalService: ModalService;\n\n    constructor(modalService: ModalService) {\n        super();\n        this.modalService = modalService;\n    }\n\n    show(title, body, onConfirm, onHide) {\n        let modalEntity = {\n            title: title,\n            body: body,\n            onConfirm: onConfirm,\n            onHide: onHide,\n            size: 'md',\n            footerRender: ConfirmModalFooter,\n            confirmLabel: \"Delete\",\n        };\n        this.modalService.showByEntity(modalEntity);\n    }\n}\n","import BaseCrudStateRepository from \"../../../../../core/state/base/BaseCrudStateRepository\";\n\nexport default class ModalRepository extends BaseCrudStateRepository {\n\n    get initialState() {\n        return {\n            title: null,\n            body: null,\n            footer: null,\n            content: null,\n            onConfirm: null,\n            onHide: null,\n            isVisible: false,\n        };\n    }\n\n    get reducerPrefix() {\n        return 'modalItem';\n    }\n\n    show(data) {\n        this.setValue(data);\n        this.setValue({\n            isVisible: true\n        });\n    }\n\n    hide() {\n        this.setValue({\n            isVisible: false\n        });\n        this.resetValue();\n    }\n}\n","import BaseService from \"../../../../core/domain/services/BaseService\";\nimport ModalRepository from \"../repositories/state/ModalRepository\";\n\nexport default class ModalService extends BaseService {\n\n    protected stateRepository: ModalRepository;\n\n    constructor(stateRepository: ModalRepository) {\n        super();\n        this.stateRepository = stateRepository;\n    }\n\n    showByEntity(entity) {\n        // this.stateRepository.setData(entity);\n        this.stateRepository.show(entity);\n    }\n\n    close() {\n        this.stateRepository.hide();\n        // this.stateRepository.resetState();\n    }\n}\n","import configureDi from \"./config/di\";\nimport configureReducer from \"./config/reducer\";\n\nlet domainName = 'modal';\nconfigureDi(domainName);\nconfigureReducer(domainName);\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport ConfirmService from \"../services/ConfirmService\";\nimport ModalRepository from \"../repositories/state/ModalRepository\";\nimport ModalService from \"../services/ModalService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\n        \"services.confirm\",\n        ConfirmService,\n        [\n            \"this.services.modal\"\n        ]\n    );\n\n    bundleDiConfigurator.singleton(\"repositories.state.modal\", ModalRepository);\n    bundleDiConfigurator.bind(\n        \"services.modal\",\n        ModalService,\n        [\n            \"this.repositories.state.modal\"\n        ]\n    );\n}\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport reduceConfigurator from \"../../../../core/state/singletons/reduceConfigurator\";\n\nexport default function configureReducer(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    reduceConfigurator.bindFromRepositoryId(bundleDiConfigurator.get('repositories.state.modal'));\n}\n","import BaseCrudStateRepository from \"../../../../../../core/state/base/BaseCrudStateRepository\";\n\nexport default class IdentityRepository extends BaseCrudStateRepository {\n\n    get reducerPrefix() {\n        return 'securityIdentity';\n    }\n\n    setIdentity(identity) {\n        this.setValue({\n            identity\n        });\n    }\n}\n","export default class NotImplementedMethodError extends Error {\n\n    protected _class;\n    protected _method;\n\n    constructor(className = null, methodName = null) {\n        super();\n        this.class = className;\n        this.method = methodName;\n    }\n\n    get class() {\n        return this._class;\n    }\n\n    set class(value) {\n        this._class = value;\n    }\n\n    get method() {\n        return this._method;\n    }\n\n    set method(value) {\n        this._method = value;\n    }\n}\n","import NotImplementedMethodError from \"../../../core/contract/errors/NotImplementedMethodError\";\n\nexport default class StorageInterface {\n\n    get(key, defaultValue) {\n        throw new NotImplementedMethodError(this, 'get');\n    }\n\n    set(key, data) {\n        throw new NotImplementedMethodError(this, 'set');\n    }\n\n    remove(key) {\n        throw new NotImplementedMethodError(this, 'remove');\n    }\n}\n","import _ from 'lodash';\n\nexport default class EncodeHelper {\n\n    public static isolateValue(sourceValue) {\n        let dataClone;\n        if (_.isObject(sourceValue)) {\n            dataClone = _.cloneDeep(sourceValue);\n        } else {\n            dataClone = sourceValue;\n        }\n        return dataClone;\n    }\n}\n","import HexEncoder from \"../../baseX/libs/encoders/HexEncoder\";\nimport ConvHelper from \"../../binary/helpers/ConvHelper\";\n\nexport default class BinaryEncoderHandler {\n\n    encode(obj, property) {\n        let value = obj[property];\n        let valueTyped = value;\n        let propertyTyped = property;\n        if (value instanceof Uint8Array) {\n            let hexEncoder = new HexEncoder();\n            valueTyped = hexEncoder.encode(value);\n            propertyTyped = property + ':[Uint8Array]';\n        }\n        if (propertyTyped !== property) {\n            delete obj[property];\n        }\n        if (valueTyped !== value) {\n            obj[propertyTyped] = valueTyped;\n        }\n    }\n\n    decode(obj, property) {\n        let matches = property.match(/(.+):\\[(.+)]/);\n        if (matches) {\n            let name = matches[1];\n            let type = matches[2];\n            let value = obj[property];\n            if (type === 'Uint8Array') {\n                value = ConvHelper.toBuffer(value, 'hex');\n            }\n            obj[name] = value;\n            delete obj[property];\n        }\n    }\n}","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport ObjectHelper from \"../../../object/helpers/ObjectHelper\";\nimport EncodeHelper from \"../../../encoders/helpers/EncodeHelper\";\nimport BinaryEncoderHandler from \"../BinaryEncoderHandler\";\n\n/**\n * Кодировщик для экранирования бинарных данных.\n *\n * Используется для предварительной обработки перед сериализацией.\n * Бинарные данные кодирует в формат HEX и добавляет к имени суффикс.\n * Пример имени: \"myVar:[Uint8Array]\".\n */\nexport default class BinaryEncoder implements EncoderInterface {\n\n    encode(sourceValue) {\n        let cloneValue = EncodeHelper.isolateValue(sourceValue);\n        let handler = new BinaryEncoderHandler();\n        ObjectHelper.iterate(cloneValue, handler.encode);\n        return cloneValue;\n    }\n\n    decode(encodedValue) {\n        let cloneValue = EncodeHelper.isolateValue(encodedValue);\n        let handler = new BinaryEncoderHandler();\n        ObjectHelper.iterate(cloneValue, handler.decode);\n        return cloneValue;\n    }\n}\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport EncodeHelper from \"../../helpers/EncodeHelper\";\n\nexport default class ChainEncoder implements EncoderInterface {\n\n    private readonly encoders;\n\n    constructor(encoders) {\n        this.encoders = encoders;\n    }\n\n    encode(sourceValue) {\n        let cloneValue = EncodeHelper.isolateValue(sourceValue);\n        for (let i in this.encoders) {\n            let encoder = this.encoders[i];\n            cloneValue = encoder.encode(cloneValue);\n        }\n        return cloneValue;\n    }\n\n    decode(encodedValue) {\n        let cloneValue = EncodeHelper.isolateValue(encodedValue);\n        let encoders = this.encoders.reverse();\n        for (let i in encoders) {\n            let encoder = encoders[i];\n            cloneValue = encoder.decode(cloneValue);\n        }\n        return cloneValue;\n    }\n}\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\n\n/**\n * Кодировщик JSON.\n */\nexport default class JsonEncoder implements EncoderInterface {\n\n    encode(sourceValue) {\n        return JSON.stringify(sourceValue);\n    }\n\n    decode(encodedValue) {\n        return JSON.parse(encodedValue);\n    }\n}\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport BinaryEncoder from \"./BinaryEncoder\";\nimport ChainEncoder from \"../../../encoders/libs/encoders/ChainEncoder\";\nimport JsonEncoder from \"../../../json/libs/encoders/JsonEncoder\";\n\n/**\n * Кодировщик JSON с возможностью кодирования/декодирования бинарных данных.\n *\n * Содержит цепочку кодировщиков:\n *   - Кодировщик для экранирования бинарных данных (BinaryEncoder)\n *   - Кодировщик JSON (JsonEncoder)\n */\nexport default class JsonBinaryEncoder extends ChainEncoder implements EncoderInterface {\n\n    constructor() {\n        let encoders = [\n            new BinaryEncoder(),\n            new JsonEncoder(),\n        ];\n        super(encoders);\n    }\n}\n","import _ from 'lodash';\nimport StorageInterface from \"../interfaces/StorageInterface\";\nimport JsonBinaryEncoder from \"../../jsonBinary/libs/encoders/JsonBinaryEncoder\";\n\nexport default class LocalStorage extends StorageInterface {\n\n    private encoder;\n\n    constructor() {\n        super();\n        this.encoder = new JsonBinaryEncoder();\n    }\n\n    get(key, defaultValue = null) {\n        let data = null;\n        let dataJson = localStorage.getItem(key);\n        if (!_.isEmpty(dataJson)) {\n            data = this.encoder.decode(dataJson);\n            // data = JSON.parse(dataJson);\n            // ObjectHelper.iterate(data, decodeHandler);\n        }\n\n        data = _.defaultTo(data, defaultValue);\n        return data;\n    }\n\n    set(key, data) {\n        let dataJson = this.encoder.encode(data);\n        /*let dataClone = _.cloneDeep(data);\n        ObjectHelper.iterate(dataClone, encodeHandler);\n        console.log('encoded', dataClone)\n        let dataJson = JSON.stringify(dataClone);*/\n        localStorage.setItem(key, dataJson);\n    }\n\n    remove(key) {\n        localStorage.removeItem(key);\n    }\n}\n","import StorageRepositoryInterface from \"../interfaces/StorageRepositoryInterface\";\n\nexport default class BasePermanentStorageRepository extends StorageRepositoryInterface {\n\n    protected _permanentStorage;\n\n    constructor(permanentStorage = null) {\n        super();\n        this.permanentStorage = permanentStorage;\n    }\n\n    get permanentStorage() {\n        return this._permanentStorage;\n    }\n\n    set permanentStorage(value) {\n        this._permanentStorage = value;\n    }\n\n    key() {\n        throw new Error('Method \"key\" not implemented!');\n    }\n\n    get(key) {\n        return this.permanentStorage.get(this._key(key));\n    }\n\n    set(key, value) {\n        this.permanentStorage.set(this._key(key), value);\n    }\n\n    remove(key) {\n        this.permanentStorage.remove(this._key(key));\n    }\n\n    _key(key) {\n        return this.key() + '.' + key;\n    }\n}\n","import NotImplementedMethodError from \"../../../core/contract/errors/NotImplementedMethodError\";\n\nexport default class StorageRepositoryInterface {\n\n    key() {\n        throw new NotImplementedMethodError(this, 'key');\n    }\n\n    get(key, defaultValue) {\n        throw new NotImplementedMethodError(this, 'get');\n    }\n\n    set(key, data) {\n        throw new NotImplementedMethodError(this, 'set');\n    }\n\n    remove(key) {\n        throw new NotImplementedMethodError(this, 'remove');\n    }\n}\n","import LocalStorage from \"../driver/LocalStorage\";\nimport BasePermanentStorageRepository from \"./BasePermanentStorageRepository\";\n\nexport default class BaseLocalStorageRepository extends BasePermanentStorageRepository {\n\n    constructor() {\n        super();\n        this.permanentStorage = new LocalStorage();\n    }\n}\n","import _ from 'lodash';\nimport TokenEntityInterface from \"../../interfaces/TokenEntityInterface\";\n\nexport default class TokenEntity implements TokenEntityInterface {\n\n    protected _isAuthenticated = null;\n    protected _value = null;\n    protected _identity = null;\n\n    constructor(value = null, identity = null) {\n        this._value = value;\n        this._identity = identity;\n    }\n\n    isAuthenticated(): boolean {\n        if (this._isAuthenticated === null) {\n            return !_.isEmpty(this._value);\n        }\n        return this._isAuthenticated;\n    }\n\n    getToken(): string {\n        return this._value;\n    }\n\n    getIdentity(): object {\n        return this._identity;\n    }\n\n    /*get identity() {\n        return this._identity;\n    }*/\n}","import BaseLocalStorageRepository from \"../../../../../../ext/permanentStorage/base/BaseLocalStorageRepository\";\nimport TokenEntity from \"../../entities/token/TokenEntity\";\nimport TokenEntityInterface from \"../../interfaces/TokenEntityInterface\";\n\nexport default class TokenRepository extends BaseLocalStorageRepository {\n\n    key() {\n        return 'securityToken';\n    }\n\n    setTokenEntity(tokenEntity: TokenEntityInterface) {\n        // let value = EntityHelper.getValues(tokenEntity);\n        this.set('tokenEntity', {\n            value: tokenEntity.getToken(),\n            identity: tokenEntity.getIdentity(),\n        });\n    }\n\n    getTokenEntity(): TokenEntityInterface {\n        let value = this.get('tokenEntity');\n        if(value) {\n            let tokenEntity = new TokenEntity(value.value, value.identity);\n            // tokenEntity.value = value.value;\n            // tokenEntity.identity = value.identity;\n            // EntityHelper.setValues(tokenEntity, value);\n            return tokenEntity;\n        }\n\n    }\n}\n","import TokenEntityInterface from \"../../interfaces/TokenEntityInterface\";\n\nexport default class NullTokenEntity implements TokenEntityInterface {\n\n    isAuthenticated(): boolean {\n        return false;\n    }\n\n    getToken(): string {\n        return null;\n    }\n\n    getIdentity(): object {\n        return null;\n    }\n\n    /*get identity() {\n        return null;\n    }*/\n}","import EventEmitter from 'events';\n\nexport default new EventEmitter();\n","\nexport default class SecurityEventEnum {\n\n    static readonly LOGIN = 'userAuthLogin';\n    static readonly LOGOUT = 'userAuthLogout';\n    static readonly SET_TOKEN_ENTITY = 'security.setTokenEntity';\n}\n","import container from \"../../../../../core/container/singletons/container\";\nimport NullTokenEntity from \"../entities/token/NullTokenEntity\";\nimport eventEmitter from \"../../../../../core/event/singletons/eventEmitter\";\nimport SecurityEventEnum from \"../enums/SecurityEventEnum\";\nimport TokenEntityInterface from \"../interfaces/TokenEntityInterface\";\n\nexport default class UserProviderService {\n\n    init(): void {\n        let tokenEntity = this.getTokenEntity();\n        this._setTokenEntity(tokenEntity);\n    }\n\n    login(tokenEntity: TokenEntityInterface): void {\n        this._setTokenEntity(tokenEntity);\n        eventEmitter.emit(SecurityEventEnum.LOGIN, tokenEntity);\n    }\n\n    logout(): void {\n        let tokenEntity = new NullTokenEntity();\n        this._setTokenEntity(tokenEntity);\n        eventEmitter.emit(SecurityEventEnum.LOGOUT);\n    }\n\n    getTokenEntity(): TokenEntityInterface {\n        let tokenEntity = container.get('security.repositories.storage.token').getTokenEntity();\n        return this._forgeTokenEntity(tokenEntity);\n    }\n\n    /*refresh(tokenEntity) {\n\n    }*/\n\n    _forgeTokenEntity(tokenEntity: TokenEntityInterface): TokenEntityInterface {\n        if (tokenEntity == null) {\n            tokenEntity = new NullTokenEntity();\n        }\n        return tokenEntity;\n    }\n\n    _setTokenEntity(tokenEntity: TokenEntityInterface): void {\n        // AssertHelper.assertClass(tokenEntity, BaseTokenEntity);\n        container.get('security.repositories.storage.token').setTokenEntity(tokenEntity);\n        container.get('security.repositories.state.identity').setIdentity(tokenEntity.getIdentity());\n        eventEmitter.emit(SecurityEventEnum.SET_TOKEN_ENTITY, tokenEntity);\n    }\n}","import configureDi from \"./config/di\";\nimport configureReducer from \"./config/reducer\";\n\nlet domainName = 'security';\nconfigureDi(domainName);\nconfigureReducer(domainName);\n","import diConfigurator from \"../../../../../core/container/singletons/diConfigurator\";\nimport IdentityStateRepository from \"../repositories/state/IdentityRepository\";\nimport TokenStorageRepository from \"../repositories/localStorage/TokenRepository\";\nimport UserProviderService from \"../services/UserProviderService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"repositories.state.identity\", () => {\n        let repository = new IdentityStateRepository();\n        repository.initialState = {\n            identity: {},\n        };\n        return repository;\n    });\n    bundleDiConfigurator.bind(\"repositories.storage.token\", TokenStorageRepository);\n    bundleDiConfigurator.bind(\"services.userProvider\", UserProviderService);\n\n}\n","import diConfigurator from \"../../../../../core/container/singletons/diConfigurator\";\nimport reduceConfigurator from \"../../../../../core/state/singletons/reduceConfigurator\";\n\nexport default function configureReducer(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    reduceConfigurator.bindFromRepositoryId(bundleDiConfigurator.get('repositories.state.identity'));\n}\n","import container from \"../../../../../core/container/singletons/container\";\nimport UserProviderService from \"../services/UserProviderService\";\n\nlet userProviderFacade: UserProviderService = container.get('security.services.userProvider');\n\nexport default userProviderFacade;\n","import _ from \"lodash\";\nimport userProviderFacade from \"../../../security/domain/singletons/userProviderFacade\";\n\nexport default class RbacProviderService {\n\n    isCan(permission): boolean {\n        let tokenEntity = userProviderFacade.getTokenEntity();\n        let myPermissions = tokenEntity.getIdentity()['permissions'];\n        if (!myPermissions) {\n            return true;\n        }\n        return myPermissions.includes(permission);\n    }\n\n    isMyRole(roleName) {\n        let roleNames;\n        if (Array.isArray(roleName)) {\n            roleNames = roleName;\n        } else if (_.isString(roleName)) {\n            roleNames = [roleName];\n        }\n        return this.isMyRoles(roleNames);\n    }\n\n    protected isMyRoles(roleNames) {\n        let tokenEntity = userProviderFacade.getTokenEntity();\n        if (!tokenEntity.isAuthenticated()) {\n            return false;\n        }\n        if (_.isEmpty(tokenEntity.getIdentity()[\"roles\"])) {\n            return false;\n        }\n        let intersectRoles = _.intersection(roleNames, tokenEntity.getIdentity()[\"roles\"]);\n        return !_.isEmpty(intersectRoles);\n    }\n}\n","import configureDi from \"./config/di\";\n\nlet domainName = 'rbac';\nconfigureDi(domainName);\n","import diConfigurator from \"../../../../../core/container/singletons/diConfigurator\";\nimport RbacProviderService from \"../services/RbacProviderService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"services.rbacProvider\", RbacProviderService);\n}\n","import en from './en/translation.json';\nimport ru from './ru/translation.json';\n\nexport default {\n    en: {\n        translation: en\n    },\n    ru: {\n        translation: ru\n    },\n};\n","import BaseLocalStorageRepository from \"../../../../../ext/permanentStorage/base/BaseLocalStorageRepository\";\n\nexport default class LocaleRepository extends BaseLocalStorageRepository {\n\n    key() {\n        return 'languageLocale';\n    }\n\n    setLocale(value) {\n        this.set('locale', value);\n    }\n\n    getLocale() {\n        return this.get('locale');\n    }\n}\n","import all from \"../../data/laguages.json\";\nimport _ from \"lodash\";\n\nexport default class LocaleRepository {\n\n    protected collection = null;\n\n    all() {\n        if (!this.collection) {\n            this._initCollection();\n        }\n        return this.collection;\n    }\n\n    oneByLocale(locale) {\n        let collection = this.all();\n        // collection = _.filter(collection, ['code', locale]);\n        return collection[locale];\n    }\n\n    _initCollection() {\n        let collection = all;\n        this._fixName(collection);\n        // console.log(collection);\n        this.collection = this._indexCollection(collection);\n    }\n\n    _indexCollection(collection) {\n        let newCollection = {};\n        for (let i in collection) {\n            let languageEntity = collection[i];\n            newCollection[languageEntity.code] = languageEntity;\n        }\n        return newCollection;\n    }\n\n    _fixName(collection) {\n        for (let i in collection) {\n            let languageEntity = collection[i];\n            let nativeNameArr = _.split(languageEntity.nativeName, /\\s*,\\s*/i);\n            languageEntity.nativeName = _.upperFirst(nativeNameArr[0]);\n        }\n    }\n}\n","import _ from \"lodash\";\n\nexport default class I18nextConfigurator {\n\n    private bundles = {};\n\n    bind(bundleName: string, i18next): void {\n        this.bundles[bundleName] = i18next;\n    }\n\n    getTranslationsFromDomains() {\n        let translations = {};\n        if (!_.isEmpty(this.bundles)) {\n            for (let domainName in this.bundles) {\n                let i18next = this.bundles[domainName];\n                let bundleTranslations = this.getTranslationsFromDomain(domainName, i18next);\n                translations = _.merge(translations, bundleTranslations);\n            }\n        }\n        return translations;\n    }\n\n    protected getTranslationsFromDomain(domainName, i18next) {\n        let translations = {};\n        for (let langCode in i18next) {\n            let namespaces = i18next[langCode];\n            for (let namespace in namespaces) {\n                let data = namespaces[namespace];\n                _.set(translations, langCode + '.' + namespace + '.' + domainName, data);\n            }\n        }\n        return translations;\n    }\n}\n","import I18nextConfigurator from \"../libs/I18nextConfigurator\";\n\nexport default new I18nextConfigurator();\n","import container from \"../../../../core/container/singletons/container\";\nimport i18next from \"i18next\";\nimport i18n from \"i18next\";\nimport {initReactI18next} from \"react-i18next\";\nimport i18nextConfigurator from \"../../../i18next/domain/singletons/i18nextConfigurator\";\nimport configManager from \"../../../../core/configManager/singletons/configManager\";\n\nexport default class SwitchService {\n\n    init() {\n        let resources = i18nextConfigurator.getTranslationsFromDomains();\n        let languageEntity = container.get('language.services.switch').oneSelected();\n        // @ts-ignore\n        i18n\n            // .use(LngDetector)\n            .use(initReactI18next) // passes i18n down to react-i18next\n            .init({\n                resources,\n                lng: languageEntity.code,\n                interpolation: {\n                    escapeValue: false // react already safes from xss\n                },\n                react: {\n                    wait: true\n                }\n            });\n    }\n\n    setLocale(locale) {\n        this._set(locale);\n        container.get('language.repositories.storage.locale').setLocale(locale);\n    }\n\n    oneSelected() {\n        let locale = this._getLocale();\n        return container.get('language.repositories.data.language').oneByLocale(locale);\n    }\n\n    _getLocale() {\n        let currentLocale = container.get('language.repositories.storage.locale').getLocale();\n        let defaultLanguage = configManager.get('language.default');\n        currentLocale = currentLocale ? currentLocale : (defaultLanguage ?? 'en');\n        return currentLocale;\n    }\n\n    _set(locale) {\n        i18next.changeLanguage(locale);\n    }\n}","import container from \"../../../../core/container/singletons/container\";\nimport configManager from \"../../../../core/configManager/singletons/configManager\";\n\nexport default class LanguageService {\n\n    all() {\n        const enabledLanguages = configManager.get('language.languages');\n        // const enabledLanguages = config.language.languages;\n        let languages = {};\n        for (let i in enabledLanguages) {\n            let languageCode = enabledLanguages[i];\n            let languageEntity = container.get('language.repositories.data.language').oneByLocale(languageCode);\n            languages[languageEntity.code] = languageEntity;\n        }\n        return languages;\n    }\n}","import i18next from './locales';\nimport configureDi from \"./config/di\";\nimport i18nextConfigurator from \"../../i18next/domain/singletons/i18nextConfigurator\";\n\nlet domainName = 'language';\nconfigureDi(domainName);\ni18nextConfigurator.bind(domainName, i18next);\n","\nimport diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport LocaleRepository from \"../repositories/localStorage/LocaleRepository\";\nimport LanguageRepository from \"../repositories/json/LanguageRepository\";\nimport SwitchService from \"../services/SwitchService\";\nimport LanguageService from \"../services/LanguageService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"repositories.storage.locale\", LocaleRepository);\n    bundleDiConfigurator.bind(\"repositories.data.language\", LanguageRepository);\n\n    bundleDiConfigurator.bind(\"services.switch\", SwitchService);\n    bundleDiConfigurator.bind(\"services.language\", LanguageService);\n}\n","import {toast} from \"react-toastify\";\n\nexport default class ToastRepository {\n\n    get positions() {\n        return {\n            TOP_LEFT: toast.POSITION.TOP_LEFT,\n            TOP_RIGHT: toast.POSITION.TOP_RIGHT,\n            TOP_CENTER: toast.POSITION.TOP_CENTER,\n            BOTTOM_LEFT: toast.POSITION.BOTTOM_LEFT,\n            BOTTOM_RIGHT: toast.POSITION.BOTTOM_RIGHT,\n            BOTTOM_CENTER: toast.POSITION.BOTTOM_CENTER,\n        };\n    }\n\n    get types() {\n        return {\n            INFO: toast.TYPE.INFO,\n            SUCCESS: toast.TYPE.SUCCESS,\n            WARNING: toast.TYPE.WARNING,\n            ERROR: toast.TYPE.ERROR,\n            DEFAULT: toast.TYPE.DEFAULT,\n            DARK: toast.TYPE.DARK,\n        };\n    }\n\n    send(toastEntity) {\n        let methodName = toastEntity.type;\n        methodName = methodName.toLowerCase();\n        let method = toast[methodName];\n        method(toastEntity.message, {\n            position: this.positions[toastEntity.position],\n        });\n    }\n}","export default class ToastEntity {\n\n    message;\n    type;\n    position;\n\n}","import ToastEntity from \"../entities/ToastEntity\";\nimport ToastRepository from \"./repositories/react-toastify/ToastRepository\";\n\nexport default class ToastService {\n\n    protected repository: ToastRepository;\n\n    constructor(toastRepository: ToastRepository) {\n        this.repository = toastRepository;\n    }\n\n    get positions() {\n        return {\n            TOP_LEFT: 'TOP_LEFT',\n            TOP_RIGHT: 'TOP_RIGHT',\n            TOP_CENTER: 'TOP_CENTER',\n            BOTTOM_LEFT: 'BOTTOM_LEFT',\n            BOTTOM_RIGHT: 'BOTTOM_RIGHT',\n            BOTTOM_CENTER: 'BOTTOM_CENTER',\n        };\n    }\n\n    get types() {\n        return {\n            INFO: 'INFO',\n            SUCCESS: 'SUCCESS',\n            WARNING: 'WARNING',\n            ERROR: 'ERROR',\n            DEFAULT: 'DEFAULT',\n            DARK: 'DARK',\n        };\n    }\n\n    success(message, position = null) {\n        let toastEntity = new ToastEntity();\n        toastEntity.message = message;\n        toastEntity.position = position;\n        toastEntity.type = this.types.SUCCESS;\n        this.send(toastEntity);\n    }\n\n    info(message, position = null) {\n        let toastEntity = new ToastEntity();\n        toastEntity.message = message;\n        toastEntity.position = position;\n        toastEntity.type = this.types.INFO;\n        this.send(toastEntity);\n    }\n\n    warning(message, position = null) {\n        let toastEntity = new ToastEntity();\n        toastEntity.message = message;\n        toastEntity.position = position;\n        toastEntity.type = this.types.WARNING;\n        this.send(toastEntity);\n    }\n\n    error(message, position = null) {\n        let toastEntity = new ToastEntity();\n        toastEntity.message = message;\n        toastEntity.position = position;\n        toastEntity.type = this.types.ERROR;\n        this.send(toastEntity);\n    }\n\n    send(toastEntity) {\n        toastEntity.position = toastEntity.position || this.positions.BOTTOM_RIGHT;\n        toastEntity.type = toastEntity.type || this.types.INFO;\n        this.repository.send(toastEntity);\n    }\n}\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport ToastRepository from \"../services/repositories/react-toastify/ToastRepository\";\nimport ToastService from \"../services/ToastService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.view.toast\", ToastRepository);\n    bundleDiConfigurator.bind(\n        \"services.toast\",\n        ToastService,\n        [\n            \"this.repositories.view.toast\"\n        ]\n    );\n}\n","import configureDi from \"./config/di\";\n\nlet domainName = 'notify';\nconfigureDi(domainName);\n","\nexport default class RpcEventEnum {\n\n    static readonly CLIENT_BEFORE_SEND = 'rpc.client.beforeSend';\n    static readonly CLIENT_AFTER_SEND = 'rpc.client.afterSend';\n    static readonly CLIENT_RESPONSE_SUCCESS = 'rpc.client.success';\n    static readonly CLIENT_RESPONSE_ERROR = 'rpc.client.error';\n}\n","export default class EnvHelper {\n\n    static isDev() {\n        // return process.envNODE_ENV === \"development\";\n        return window.location.port === '3000';\n    }\n}\n","\nimport EventConfigurator from \"../libs/EventConfigurator\";\n\nexport default new EventConfigurator();\n","import container from \"../../container/singletons/container\";\nimport eventEmitter from \"../singletons/eventEmitter\";\n\nexport default class EventConfigurator {\n\n    private configCollection = [];\n\n    register(callback) {\n        this.configCollection.push(callback);\n    }\n\n    initAll() {\n        for(let i in this.configCollection) {\n            let callback = this.configCollection[i];\n            callback(container, eventEmitter);\n        }\n    }\n}\n","import RpcEventEnum from \"../enums/RpcEventEnum\";\nimport EnvHelper from \"../../../ext/app/helpers/EnvHelper\";\nimport eventConfigurator from \"../../../core/event/singletons/eventConfigurator\";\nimport Container from \"../../../core/container/libs/Container\";\nimport EventEmitter from \"events\";\n\neventConfigurator.register(function (container: Container, eventEmitter: EventEmitter) {\n    if (EnvHelper.isDev()) {\n        eventEmitter.on(RpcEventEnum.CLIENT_AFTER_SEND, function (requestEntity, responseEntity) {\n            if (EnvHelper.isDev()) {\n                console.info('RPC. Запрос: ', requestEntity);\n                console.info('RPC. Ответ: ', responseEntity);\n            }\n        });\n    }\n});\n","import axios from \"axios\";\n\nexport default class TransportRepository {\n\n    protected rpcUrl = null;\n\n    send(body) {\n        let options = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n\n        let axiosPromise = axios.post(this.rpcUrl, body, options);\n        return axiosPromise\n            .then(function (response) {\n                if (response.headers['content-type'] === 'application/json') {\n                    if (typeof response.data === 'object') {\n                        return response.data;\n                    } else {\n                        throw new Error(\"Transport error. Parse error.\");\n                    }\n                } else {\n                    throw new Error(\"Transport error. Content type invalid.\");\n                }\n            })\n            .catch(function () {\n                throw new Error(\"Transport error.\");\n            });\n    }\n}","export default class UnauthorizedError extends Error {\n\n}\n","export default class UnprocessableEntityError extends Error {\n\n    protected errors = [];\n\n    setErrors(errors) {\n        this.errors = errors;\n    }\n\n    getErrors() {\n        return this.errors;\n    }\n}\n","import _ from \"lodash\";\nimport UnauthorizedError from \"../../../core/contract/errors/UnauthorizedError\";\nimport UnprocessableEntityError from \"../../../core/contract/errors/UnprocessableEntityError\";\nimport eventEmitter from \"../../../core/event/singletons/eventEmitter\";\nimport RpcEventEnum from \"../enums/RpcEventEnum\";\n\nexport default class ClientService {\n\n    transportRepository;\n    requestEncoder;\n    responseEncoder;\n\n    constructor(transportRepository, requestEncoder, responseEncoder) {\n        this.transportRepository = transportRepository;\n        this.requestEncoder = requestEncoder;\n        this.responseEncoder = responseEncoder;\n    }\n\n    async sendRequest(requestEntity) {\n        eventEmitter.emit(RpcEventEnum.CLIENT_BEFORE_SEND, requestEntity);\n        let body = this.requestEncoder.encode(requestEntity);\n\n        try {\n            let response = await this.transportRepository.send(body);\n            let responseEntity = this.responseEncoder.decode(response);\n            eventEmitter.emit(RpcEventEnum.CLIENT_AFTER_SEND, requestEntity, responseEntity);\n            if (_.isEmpty(responseEntity.error)) {\n                eventEmitter.emit(RpcEventEnum.CLIENT_RESPONSE_SUCCESS, responseEntity);\n                return responseEntity;\n            } else if (responseEntity.error.code === 401) {\n                throw new UnauthorizedError(responseEntity.error.message);\n            } else {\n                if (responseEntity.error.code === -32602) {\n                    let error = new UnprocessableEntityError(responseEntity.error.message);\n                    error.setErrors(responseEntity.error.data);\n                    throw error;\n                } else {\n                    throw new Error(responseEntity.error.message);\n                }\n            }\n        } catch (error) {\n            eventEmitter.emit(RpcEventEnum.CLIENT_RESPONSE_ERROR, error);\n            throw error;\n        }\n    }\n}\n","import _ from \"lodash\";\n\nexport default class RequestEncoder {\n\n    encode(requestEntity) {\n        requestEntity.meta = typeof requestEntity.meta === 'object' ? requestEntity.meta : {};\n        requestEntity.meta.version = !_.isEmpty(requestEntity.version) ? requestEntity.version : 1;\n        let request = {\n            jsonrpc: '2.0',\n            method: requestEntity.method,\n            params: {\n                body: undefined,\n                meta: undefined\n            },\n            id: typeof requestEntity.id !== 'undefined' ? requestEntity.id : +new Date(),\n        };\n        if (!_.isEmpty(requestEntity.body)) {\n            request.params.body = requestEntity.body;\n        }\n        if (!_.isEmpty(requestEntity.meta)) {\n            request.params.meta = requestEntity.meta;\n        }\n        return request;\n    }\n\n    decode() {\n\n    }\n}\n","import _ from \"lodash\";\n\nexport default class ResponseEncoder {\n\n    encode() {\n\n    }\n\n    decode(data) {\n        let responseEntity = {\n            body: undefined,\n            meta: undefined,\n            error: undefined,\n            id: undefined\n        };\n        if (!_.isEmpty(data.result)) {\n            let result = data.result;\n            if (!_.isEmpty(result.body)) {\n                responseEntity.body = result.body;\n            }\n            if (!_.isEmpty(result.meta)) {\n                responseEntity.meta = result.meta;\n            }\n        }\n        if (!_.isEmpty(data.error)) {\n            responseEntity.error = data.error;\n        }\n        responseEntity.id = !_.isEmpty(responseEntity.id) ? responseEntity.id : +new Date();\n        return responseEntity;\n    }\n}\n","import diConfigurator from \"../../../core/container/singletons/diConfigurator\";\nimport TransportRepository from \"../repositories/http/TransportRepository\";\nimport ClientService from \"../services/ClientService\";\nimport RequestEncoder from \"../libs/encoders/RequestEncoder\";\nimport ResponseEncoder from \"../libs/encoders/ResponseEncoder\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.api.transport\", TransportRepository);\n    bundleDiConfigurator.bind(\n        \"services.client\",\n        () => {\n            let transportRepo = bundleDiConfigurator.get('repositories.api.transport');\n            let service = new ClientService(transportRepo, new RequestEncoder(), new ResponseEncoder());\n            return service;\n        },\n    );\n}\n","import \"./config/eventDev\";\nimport configureDi from \"./config/di\";\n\nlet domainName = 'rpc';\nconfigureDi(domainName);\n","import BaseCrudStateRepository from \"../../../../../core/state/base/BaseCrudStateRepository\";\n\nexport default class ItemRepository extends BaseCrudStateRepository {\n\n    protected collection = [];\n\n    get initialState() {\n        return {\n            collection: [],\n        };\n    }\n\n    get reducerPrefix() {\n        return 'breadcrumbItem';\n    }\n\n    add(itemEntity) {\n        this.collection.push(itemEntity);\n        this._syncState();\n    }\n\n    clear() {\n        this.collection = [];\n        this._syncState();\n    }\n\n    _syncState() {\n        this.setValue({collection: this.collection});\n    }\n\n    /*setChatId(chatId) {\n        this.setValue({chatId});\n    }\n\n    getChatId() {\n        return this.getValue('chatId');\n    }*/\n}\n","export default class BreadcrumbService {\n\n    protected itemRepository;\n\n    constructor(itemRepository) {\n        this.itemRepository = itemRepository;\n    }\n\n    clear() {\n        this.itemRepository.clear();\n    }\n\n    add(title, route) {\n        let itemEntity = {\n            title: title,\n            route: route,\n        };\n        this.itemRepository.add(itemEntity);\n    }\n}","import configureDi from \"./config/di\";\nimport configureReducer from \"./config/reducer\";\n\nlet domainName = 'breadcrumb';\nconfigureDi(domainName);\nconfigureReducer(domainName);\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport ItemRepository from \"../repositories/state/ItemRepository\";\nimport BreadcrumbService from \"../services/BreadcrumbService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.state.items\", ItemRepository);\n    bundleDiConfigurator.bind(\"services.breadcrumb\", BreadcrumbService, [\n        \"this.repositories.state.items\"\n    ]);\n}\n","import diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport reduceConfigurator from \"../../../../core/state/singletons/reduceConfigurator\";\n\nexport default function configureReducer(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    reduceConfigurator.bindFromRepositoryId(bundleDiConfigurator.get('repositories.state.items'));\n}\n","import container from \"../../../core/container/singletons/container\";\nimport UrlHelper from \"../../../ext/html/helpers/UrlHelper\";\nimport JsonEncoder from \"../../../ext/json/libs/encoders/JsonEncoder\";\n\nexport default class ConnectionService {\n\n    url = null;\n    connection: WebSocket = null;\n    eventHandler = null;\n    queryParams = {};\n\n    constructor(eventHandler) {\n        this.eventHandler = eventHandler;\n    }\n\n    send(data) {\n        let requestEncoder: JsonEncoder = container.get('webSocket.libs.requestEncoder');\n        let jsonMessage = requestEncoder.encode(data);\n        // let jsonMessage = JSON.stringify(data);\n        this.connection.send(jsonMessage);\n    }\n\n    open() {\n        let url = this._getConnectionUrl();\n        this.connection = new WebSocket(url);\n        this.eventHandler.bindHandlers(this.connection);\n        window.addEventListener(\"unload\", () => {\n            this.close();\n        });\n    }\n\n    close() {\n        if (this.connection && this.connection.readyState === WebSocket.OPEN) {\n            this.connection.close();\n        }\n    }\n\n    tokenFromCrypto() {\n        let tokenValue;\n        let authService = container.get(\"cryptoAuthorization.services.auth\");\n        try {\n            tokenValue =  authService.getRpcToken();\n            return tokenValue;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    token() {\n        // todo: refactor\n        let tokenEntity = container.get('security.services.userProvider').getTokenEntity();\n        let tokenValue = tokenEntity.getToken();\n        return tokenValue;\n    }\n\n    _getConnectionUrl() {\n        let queryParams = {};\n        let tokenQueryParams = {\n            token: this.token()\n            // token: this.tokenFromCrypto()\n        };\n        Object.assign(queryParams, this.queryParams, tokenQueryParams);\n        let query = UrlHelper.encodeQuery(queryParams);\n        return this.url + '?' + query;\n    }\n}\n","const socketEventEnum = Object.freeze({\n\n    OPEN: 'socket.open',\n    CLOSE: 'socket.close',\n    BREAK: 'socket.break',\n    MESSAGE: 'socket.message',\n    ERROR: 'socket.error',\n\n});\n\nexport default socketEventEnum;\n","export default class SocketEventEntity {\n\n    name;\n    data;\n\n}\n","import eventEmitter from \"../../../core/event/singletons/eventEmitter\";\nimport socketEventEnum from \"../enums/socketEventEnum\";\nimport SocketEventEntity from \"../entities/SocketEventEntity\";\nimport container from \"../../../core/container/singletons/container\";\nimport JsonEncoder from \"../../../ext/json/libs/encoders/JsonEncoder\";\n\nexport default class SocketEventHandler {\n\n    bindHandlers(socket) {\n        socket.onopen = this.onOpen;\n        socket.onclose = this.onClose;\n        socket.onmessage = this.onMessage;\n        socket.onerror = this.onError;\n    }\n\n    onOpen() {\n        eventEmitter.emit(socketEventEnum.OPEN);\n    }\n\n    onClose(event) {\n        if (event.wasClean) {\n            eventEmitter.emit(socketEventEnum.CLOSE, event);\n        } else {\n            // например, \"убит\" процесс сервера\n            eventEmitter.emit(socketEventEnum.BREAK, event);\n        }\n    }\n\n    onMessage(event) {\n        let requestEncoder: JsonEncoder = container.get('webSocket.libs.requestEncoder');\n        let data = requestEncoder.decode(event.data);\n        // let data = JSON.parse(event.data);\n        let socketEventEntity = new SocketEventEntity();\n        socketEventEntity.name = data['name'];\n        socketEventEntity.data = data['data'];\n        // EntityHelper.setValues(socketEventEntity, data);\n        // console.log(socketEventEntity)\n        eventEmitter.emit(socketEventEnum.MESSAGE, socketEventEntity);\n    }\n\n    onError(error) {\n        eventEmitter.emit(socketEventEnum.ERROR, error);\n    }\n}\n","import diConfigurator from \"../../../core/container/singletons/diConfigurator\";\nimport ConnectionService from \"../services/ConnectionService\";\nimport SocketEventHandler from \"../libs/SocketEventHandler\";\nimport JsonEncoder from \"../../../ext/json/libs/encoders/JsonEncoder\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"services.connection\", new ConnectionService(new SocketEventHandler()));\n    bundleDiConfigurator.singleton(\"libs.requestEncoder\", new JsonEncoder());\n}\n","import configureDi from \"./config/di\";\n\n// todo: npm i socket.io-client\n\nlet domainName = 'webSocket';\nconfigureDi(domainName);\n","import container from \"../../../../core/container/singletons/container\";\n\nexport default class BaseRpcRepository {\n\n    sendRequest(requestEntity) {\n        return container.get('rpc.services.client').sendRequest(requestEntity);\n        //return rpcClient.sendRequest(requestEntity);\n    }\n\n    sendByMethod(method, body = {}, meta = {}) {\n        let requestEntity = {\n            method: undefined,\n            body: undefined,\n            meta: undefined\n        };\n        requestEntity.method = method;\n        if (body) {\n            requestEntity.body = body;\n        }\n        if (meta) {\n            requestEntity.meta = meta;\n        }\n        return this.sendRequest(requestEntity);\n    }\n}\n","import BaseRpcRepository from \"../../../rpc/repositories/base/BaseRpcRepository\";\n\nexport default class DocumentRepository extends BaseRpcRepository {\n\n    async send(document, toAddress) {\n        let requestEntity = {\n            method: 'cryptoMessage.p2p',\n            body: {\n                toAddress: toAddress, // возможность отправки на несколько адресов сразу для скрытия получателя\n                //sendAt: sendAt, // отложенная отправка\n                //sendAtRandom: sendAtRandom,  todo: рандомно выбирать время отправки\n                document: document,\n            },\n        };\n\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import cryptoFactory from \"../../../../crypto/bundles/signature/domain/factories/cryptoFactory\";\nimport SignerService from \"../../../../crypto/bundles/signature/domain/services/SignerService\";\nimport DocumentRepository from \"../repositories/rpc/DocumentRepository\";\nimport container from \"../../../core/container/singletons/container\";\nimport ConnectionService from \"../../webSocket/services/ConnectionService\";\nimport JsonBinaryEncoder from \"../../../ext/jsonBinary/libs/encoders/JsonBinaryEncoder\";\n\nexport default class DocumentService {\n\n    signerService: SignerService;\n    documentRepository: DocumentRepository;\n\n    constructor(\n        signerService: SignerService,\n        documentRepository: DocumentRepository\n    ) {\n        this.signerService = signerService;\n        this.documentRepository = documentRepository;\n    }\n\n    sign(messageData) {\n\n        let encoder = new JsonBinaryEncoder();\n        let messageJson = encoder.encode(messageData);\n\n        // let messageJson = JSON.stringify(messageData);\n\n        const signatureEntity = this.signerService.sign(messageJson);\n        return signatureEntity;\n    }\n\n    verify(document) {\n        let messageSigner = cryptoFactory.createBitcoinMessageSigner();\n        let verifyEntity = messageSigner.verifyDocument(document);\n        return verifyEntity;\n    }\n\n    // async sendDocument(document, toAddress) {\n    //     let body = await this.documentRepository.send(document, toAddress);\n    //     /*if(!body.isVerify) {\n    //         throw new Error('Signature not verified!');\n    //     }*/\n    //     return body;\n    // }\n\n    async send(messageData, toAddress) {\n        let signatureEntity = this.sign(messageData);\n\n        let webSocketConnection: ConnectionService = container.get('webSocket.services.connection');\n        webSocketConnection.send({\n            toAddress: toAddress,\n            document: signatureEntity.document,\n        });\n\n        // let body = await this.documentRepository.send(signatureEntity.document, toAddress);\n        /*if(!body.isVerify) {\n            throw new Error('Signature not verified!');\n        }*/\n        return null;\n    }\n}\n","import diConfigurator from \"../../../core/container/singletons/diConfigurator\";\nimport DocumentRepository from \"../repositories/rpc/DocumentRepository\";\nimport DocumentService from \"../services/DocumentService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"repositories.api.document\", DocumentRepository);\n    bundleDiConfigurator.bind(\"services.document\", DocumentService, [\n        \"signature.services.signer\",\n        \"this.repositories.api.document\",\n    ]);\n}\n","import configureDi from \"./config/di\";\n\nlet domainName = 'crypt';\nconfigureDi(domainName);\n\n\n// http://cryptocoinjs.com/\n// https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/README.md\n// https://github.com/bitcoinjs/bip39\n// https://iancoleman.io/\n// https://github.com/bitcoin/bips/blob/master/README.mediawiki\n// https://cryptojs.gitbook.io/docs/\n","\nexport default class HandShakeEventEnum {\n\n    static readonly COMPLETE = 'HandShake.complete';\n}\n","import HandShakeEventEnum from \"../enums/HandShakeEventEnum\";\nimport P2pService from \"../services/P2pService\";\nimport eventConfigurator from \"../../../../core/event/singletons/eventConfigurator\";\nimport Container from \"../../../../core/container/libs/Container\";\nimport EventEmitter from \"events\";\n\neventConfigurator.register(function (container: Container, eventEmitter: EventEmitter) {\n    eventEmitter.on(HandShakeEventEnum.COMPLETE, function (address) {\n        let p2pService: P2pService = container.get('e2ee.services.p2p');\n        p2pService.sendAllQueues(address);\n    });\n});\n","import P2pRequestEntity from \"../entities/P2pRequestEntity\";\nimport DocumentService from \"../../../crypt/services/DocumentService\";\nimport SessionService from \"./SessionService\";\nimport HandShakeController from \"../../p2p/controllers/HandShakeController\";\nimport container from \"../../../../core/container/singletons/container\";\nimport TunnelService from \"./TunnelService\";\n\nexport default class P2pService {\n\n    protected documentService: DocumentService;\n    protected sessionService: SessionService;\n    protected static requestQueue = {};\n\n    constructor(\n        documentService: DocumentService,\n        sessionService: SessionService\n    ) {\n        this.documentService = documentService;\n        this.sessionService = sessionService;\n    }\n\n    sendRequest(address: string, request: P2pRequestEntity) {\n        let sessionEntity = this.sessionService.get(address);\n        this.addQueue(address, request);\n\n        let handShake: HandShakeController = container.get('e2ee.controllers.handShakeController');\n        handShake.start(address);\n\n        /*if (sessionEntity['sessionKeys'] == null) {\n            let handShake: HandShakeController = container.get('e2ee.controllers.handShakeController');\n            handShake.start(address);\n        } else {\n            this.sendAllQueues(address);\n        }*/\n\n        // console.log(address, request, sessionEntity);\n    }\n\n    public sendAllQueues(address: string) {\n        if (P2pService.requestQueue[address]) {\n            // console.log('queue: ', P2pService.requestQueue[address]);\n            for (let i in P2pService.requestQueue[address]) {\n                let request = P2pService.requestQueue[address][i];\n                this.sendOneQueue(address, request);\n            }\n        }\n        P2pService.requestQueue = {};\n    }\n\n    private addQueue(address: string, request: P2pRequestEntity) {\n        P2pService.requestQueue[address] = P2pService.requestQueue.hasOwnProperty(address) ? P2pService.requestQueue[address] : [];\n        P2pService.requestQueue[address].push(request);\n    }\n\n    private sendOneQueue(address: string, request: P2pRequestEntity) {\n        let tunnelService: TunnelService = container.get('e2ee.services.tunnel');\n       /* let request = new P2pRequestEntity();\n        request.address = address;\n        request.method = */\n        request.address = address;\n        tunnelService.sendRequest(request);\n        // console.log('queue: ', address, request);\n        // return this.documentService.send(request.params, address);\n    }\n}\n","import BaseLocalStorageRepository from \"../../../../../ext/permanentStorage/base/BaseLocalStorageRepository\";\nimport ConvHelper from \"../../../../../ext/binary/helpers/ConvHelper\";\nimport * as crypto from \"crypto\";\n\nexport default class SessionRepository extends BaseLocalStorageRepository {\n\n    protected sessions = {};\n\n    key() {\n        return 'e2eeSession';\n    }\n\n    save(address, sessionEntity) {\n        this.set(address, sessionEntity);\n        // this._set(address, sessionEntity);\n    }\n\n    _set(address: string, data: object) {\n        let oldData = this.get(address);\n        this.sessions[address] = Object.assign(oldData, data);\n    }\n\n    oneByAddress(address) {\n        /*let entity;\n        if (this.sessions.hasOwnProperty(address)) {\n            entity = this.sessions[address];\n        }\n        if(!entity) {\n            entity = {};\n        }\n        entity['address'] = address;\n        if(entity['sessionId'] == null) {\n            entity['sessionId'] = ConvHelper.toHex(crypto.randomBytes(32));\n        }\n        return entity;*/\n\n        return this.get(address);\n    }\n}\n","export default class TimeHelper {\n\n    static timestamp() {\n        return new Date().getTime() / 1000;\n    }\n}\n","import TimeHelper from \"../../../../../ext/time/helpers/TimeHelper\";\nimport DocumentService from \"../../../../crypt/services/DocumentService\";\nimport container from \"../../../../../core/container/singletons/container\";\n\nexport default class HandShakeRepository {\n\n    protected send(messageData, address) {\n        let documentService: DocumentService = container.get('crypt.services.document');\n        return documentService.send(messageData, address);\n    }\n\n    helloServer(address, sessionId, dhPublic) {\n        let messageData = {\n            method: 'handShake.helloClient',\n            sessionId: sessionId,\n            dh: {\n                public: dhPublic,\n            },\n            createdAt: TimeHelper.timestamp(),\n        };\n        return this.send(messageData, address);\n    }\n\n    helloClient(address, sessionId, dhPublic) {\n        let messageData = {\n            method: 'handShake.getSessionKeys',\n            sessionId: sessionId,\n            dh: {\n                // mod: request.dh.mod,\n                public: dhPublic,\n            },\n            createdAt: TimeHelper.timestamp(),\n        };\n        return this.send(messageData, address);\n    }\n\n    saveSessionKeys(address, sessionId, encryptedKeys) {\n        let messageData = {\n            method: 'handShake.saveSessionKeys',\n            sessionId: sessionId,\n            encryptedKeys: encryptedKeys,\n            createdAt: TimeHelper.timestamp(),\n        };\n        return this.send(messageData, address);\n    }\n\n    finish(address, sessionId, encryptedMessage) {\n        let messageData = {\n            method: 'handShake.finish',\n            sessionId: sessionId,\n            encrypted: encryptedMessage,\n            createdAt: TimeHelper.timestamp(),\n        };\n        return this.send(messageData, address);\n    }\n}\n","import * as crypto from \"crypto\";\nimport ConvHelper from \"../../../../ext/binary/helpers/ConvHelper\";\nimport SessionRepository from \"../repositories/localStorage/SessionRepository\";\n\nexport default class SessionService {\n\n    protected sessions = {};\n    protected sessionRepository: SessionRepository;\n\n    constructor(sessionRepository: SessionRepository) {\n        this.sessionRepository = sessionRepository;\n    }\n\n    get(address, defaultValue = {}) {\n        let entity = this.sessionRepository.oneByAddress(address);\n\n        if(!entity) {\n            entity = {};\n        }\n        entity['address'] = address;\n\n        /*if (this.sessions.hasOwnProperty(address)) {\n            entity = this.sessions[address];\n        }\n        entity['address'] = address;\n        if(entity['sessionId'] == null) {\n            entity['sessionId'] = ConvHelper.toHex(crypto.randomBytes(32));\n        }*/\n\n        return this.decode(entity);\n    }\n\n    persist(entity) {\n        this.sessionRepository.save(entity['address'], this.encode(entity));\n        //this.set(entity['address'], entity);\n    }\n\n    encode(entity) {\n        if(entity['sessionKeys']) {\n            for(let name in entity['sessionKeys']) {\n                entity['sessionKeys'][name] = ConvHelper.toHex(entity['sessionKeys'][name]);\n            }\n        }\n        if(entity['dh'] && entity['dh']['share']) {\n            entity['dh']['share'] = ConvHelper.toHex(entity['dh']['share']);\n        }\n        return entity;\n    }\n\n    decode(entity) {\n        if(entity['sessionKeys']) {\n            for(let name in entity['sessionKeys']) {\n                if(!(entity['sessionKeys'][name] instanceof Uint8Array)) {\n                    entity['sessionKeys'][name] = ConvHelper.encode(entity['sessionKeys'][name], 'hex', ConvHelper.BUFFER);\n                }\n            }\n        }\n        if(entity['dh'] && entity['dh']['share']) {\n            if(!(entity['dh']['share'] instanceof Uint8Array)) {\n                entity['dh']['share'] = ConvHelper.encode(entity['dh']['share'], 'hex', ConvHelper.BUFFER);\n            }\n        }\n        return entity;\n    }\n\n    /*set(address: string, data: object) {\n        let oldData = this.get(address);\n        this.sessions[address] = Object.assign(oldData, data);\n    }*/\n}\n","export default class AesDataEntity {\n\n    encrypted;\n    iv;\n    salt;\n    mac;\n\n}\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport aesjs from 'aes-js';\n\nexport default class Utf8Encoder implements EncoderInterface {\n\n    encode(binary) {\n        return aesjs.utils.utf8.fromBytes(binary);\n    }\n\n    decode(utf8) {\n        return aesjs.utils.utf8.toBytes(utf8);\n    }\n}\n","import {sha256} from \"js-sha256\";\nimport HexEncoder from \"../../../../baseX/libs/encoders/HexEncoder\";\nimport ConvHelper from \"../../../../binary/helpers/ConvHelper\";\nimport CryptoJS from \"crypto-js\";\nimport EncodeInterface from \"../../../../../core/contract/encoders/EncodeInterface\";\n\nexport default class HmacSha256Hasher implements EncodeInterface {\n\n    protected key;\n\n    constructor(key) {\n        this.key = key;\n    }\n\n    encode(sourceValue) {\n        return this.generateHmacBySha256Js(sourceValue, this.key);\n        // return this.generateHmacByCryptoJS(sourceValue, this.key);\n    }\n\n    protected generateHmacBySha256Js(message, key) {\n        let hashHex = sha256.hmac(key, message);\n        return (new HexEncoder()).decode(hashHex);\n    }\n\n    protected generateHmacByCryptoJS(message, key) {\n        let hashHex = CryptoJS.HmacSHA256(message, ConvHelper.toHex(key)).toString(CryptoJS.enc.Hex);\n        return (new HexEncoder()).decode(hashHex);\n    }\n}\n","import AesDataEntity from \"../entities/AesDataEntity\";\nimport * as crypto from \"crypto\";\nimport Utf8Encoder from \"../../../../ext/string/libs/encoders/Utf8Encoder\";\nimport aesjs from 'aes-js';\n// import hash from 'hash.js';\n// import {sha256} from 'js-sha256';\nimport ConvHelper from \"../../../../ext/binary/helpers/ConvHelper\";\nimport Uint8ArrayHelper from \"../../../../ext/binary/helpers/Uint8ArrayHelper\";\nimport HexEncoder from \"../../../../ext/baseX/libs/encoders/HexEncoder\";\nimport CryptoJS from \"crypto-js\";\nimport HmacSha256Hasher from \"../../../../ext/hash/libs/encoders/hmac/HmacSha256Hasher\";\n\n// var hash = require('hash.js');\n\n// https://www.npmjs.com/package/aes-js\n\nexport default class AesEncryption {\n\n    protected keyEntity;\n    protected isCheckMac: boolean = true;\n\n    constructor(keyEntity, isCheckMac: boolean = true) {\n        this.keyEntity = keyEntity;\n        this.isCheckMac = isCheckMac;\n    }\n\n    encrypt(message, iv = null): AesDataEntity {\n        let messageBytes;\n        if (message instanceof Uint8Array) {\n            messageBytes = message;\n        } else {\n            let utf8Encoder = new Utf8Encoder();\n            messageBytes = utf8Encoder.decode(message);\n        }\n\n\n        if (iv == null) {\n            iv = crypto.randomBytes(16);\n        }\n        let aesCbc = new aesjs.ModeOfOperation.ctr(this.keyEntity.encryptKey, iv);\n\n        let aesDataEntity = new AesDataEntity();\n        aesDataEntity.encrypted = aesCbc.encrypt(messageBytes);\n        aesDataEntity.iv = iv;\n        aesDataEntity.mac = this.generateHmac(messageBytes);\n        return aesDataEntity;\n    }\n\n    decrypt(aesDataEntity: AesDataEntity) {\n// The cipher-block chaining mode of operation maintains internal\n// state, so to decrypt a new instance must be instantiated.\n        let aesCbc = new aesjs.ModeOfOperation.ctr(this.keyEntity.encryptKey, aesDataEntity.iv);\n        let decryptedBytes = aesCbc.decrypt(aesDataEntity.encrypted);\n        this.checkMac(decryptedBytes, aesDataEntity.mac);\n        return decryptedBytes;\n    }\n\n    /*protected generateHmacByHashJs(message, key) {\n        let arr = hash\n            .hmac(hash.sha256)\n            .update(key)\n            .update(message)\n            .digest();\n        return arr;\n    }\n\n    protected generateHmacByCryptoJS(message, key) {\n        let hashHex = CryptoJS.HmacSHA256(message, ConvHelper.toHex(key)).toString(CryptoJS.enc.Hex);\n        return (new HexEncoder()).decode(hashHex);\n    }\n\n    protected generateHmacBySha256Js(message, key) {\n        let hashHex = sha256.hmac(key, message);\n       return (new HexEncoder()).decode(hashHex);\n    }*/\n\n    protected generateHmacBySha256HmacHasher(message, key) {\n        let hasher = new HmacSha256Hasher(key);\n        return hasher.encode(message);\n    }\n\n    protected generateHmac(message) {\n\n        // message = 'Message';\n        // let key = 'Secret Passphrase';\n        let key = this.keyEntity.hmacKey;\n\n        let arr = this.generateHmacBySha256HmacHasher(message, key);\n        // let str = (new HexEncoder()).encode(arr);\n        // console.log(arr, str);\n\n        return new Uint8Array(arr);\n    }\n\n    /*protected generateHmac222(message) {\n        let arr = hash\n            .hmac(hash.sha256)\n            .update(this.keyEntity.hmacKey)\n            .update(message)\n            .digest();\n        return new Uint8Array(arr);\n    }*/\n\n    protected checkMac(decryptedData, recipientMacBuffer): void {\n        if (this.isCheckMac === false) {\n            return;\n        }\n        let macBuffer = this.generateHmac(decryptedData);\n        let isVerifiedMac = macBuffer.toString() === recipientMacBuffer.toString();\n        if (!isVerifiedMac) {\n            throw new Error('Message Authentication Code (MAC) not valid!');\n        }\n    }\n}\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport conv from 'binstring';\nimport {Base64} from \"js-base64\";\n\nexport default class Base64Encoder implements EncoderInterface {\n\n    decode(encodedValue) {\n        return Base64.decode(encodedValue);\n    }\n\n    /**\n     * @deprecated\n     * @param value\n     * @param fromFormat\n     */\n    encode(value, fromFormat = undefined) {\n        return this.toBase64(value, fromFormat);\n    }\n\n\n    /**\n     * @deprecated\n     * @param value\n     * @param fromFormat\n     */\n    private toBase64(value, fromFormat = undefined) {\n        // return Base64Helper.encode(value);\n        let options = {out: 'base64'};\n        if (fromFormat) {\n            options[\"in\"] = fromFormat;\n        }\n        return conv(value, options);\n    }\n}\n","import AesDataEntity from \"../../entities/AesDataEntity\";\nimport JsonBinaryEncoder from \"../../../../../ext/jsonBinary/libs/encoders/JsonBinaryEncoder\";\nimport Base64Encoder from \"../../../../../ext/baseX/libs/encoders/Base64Encoder\";\n\nexport default class StringFormat {\n\n    stringify(aesDataEntity: AesDataEntity) {\n        let o = {\n            cipher: (aesDataEntity['encrypted']),\n            iv: (aesDataEntity['iv']),\n            // salt: ConvHelper.toBase64(aesDataEntity['encrypted']['salt']),\n            mac: (aesDataEntity['mac']),\n        };\n\n\n        let encoder = new JsonBinaryEncoder();\n        let json = encoder.encode(o);\n        // console.log(aesDataEntity)\n        // console.log(json)\n\n        // let json = JSON.stringify(o);\n\n        let baseXEncoder = new Base64Encoder();\n        return baseXEncoder.encode(json);\n\n        // return BaseXHelper.toBase64(json);\n    }\n\n    parse(str): AesDataEntity {\n        let aesDataEntity = new AesDataEntity();\n        let baseXEncoder = new Base64Encoder();\n        let json = baseXEncoder.decode(str);\n        // let json = Base64Helper.decode(str);\n\n        // console.log(json)\n\n        let encoder = new JsonBinaryEncoder();\n        let data = encoder.decode(json);\n\n        // console.log(data)\n\n\n        // let data = JSON.parse(json);\n\n        aesDataEntity.encrypted = (data['cipher']);\n        aesDataEntity.iv = (data['iv']);\n        aesDataEntity.mac = (data.mac);\n\n        // console.log(aesDataEntity)\n\n        return aesDataEntity;\n    }\n}\n","import AesEncryption from \"./AesEncryption\";\n\nexport default class FormatEncryption {\n\n    aes = null;\n    format = null;\n\n    constructor(aes: AesEncryption, format) {\n        this.aes = aes;\n        this.format = format;\n    }\n\n    encrypt(text) {\n        let encrypted = this.aes.encrypt(text);\n        return this.format.stringify(encrypted);\n    }\n\n    decrypt(encryptedStringify) {\n        let encryptedParsed = this.format.parse(encryptedStringify);\n        return this.aes.decrypt(encryptedParsed);\n    }\n}\n","import AesEncryption from \"../libs/AesEncryption\";\nimport StringFormat from \"../libs/format/StringFormat\";\nimport FormatEncryption from \"../libs/FormatEncryption\";\n\nexport default class AesFactory {\n\n    static createEncoderStringFormat(keyEntity): FormatEncryption {\n        let enc = new AesEncryption(keyEntity, false);\n        let format = new StringFormat();\n        return new FormatEncryption(enc, format);\n    }\n}\n","import P2pRequestEntity from \"../entities/P2pRequestEntity\";\nimport DocumentService from \"../../../crypt/services/DocumentService\";\nimport SessionService from \"./SessionService\";\nimport AesFactory from \"../../../aes/domain/factories/AesFactory\";\nimport container from \"../../../../core/container/singletons/container\";\nimport ConnectionService from \"../../../webSocket/services/ConnectionService\";\n\nexport default class TunnelService {\n\n    protected documentService: DocumentService;\n    protected sessionService: SessionService;\n    protected static requestQueue = {};\n\n    constructor(\n        documentService: DocumentService,\n        sessionService: SessionService\n    ) {\n        this.documentService = documentService;\n        this.sessionService = sessionService;\n    }\n\n    sendRequest(request: P2pRequestEntity) {\n        let data = {\n            address: request.address,\n            method: request.method,\n            params: request.params,\n            timestamp: request.timestamp,\n        };\n        let jsonData = JSON.stringify(data);\n        let sessionEntity = this.sessionService.get(request.address);\n\n        // console.log(sessionEntity);\n\n        let formatEncryption = AesFactory.createEncoderStringFormat(sessionEntity['sessionKeys']);\n        let encryptedJsonData = formatEncryption.encrypt(jsonData);\n\n        let keyEntity = container.get('key.services.key').one();\n\n        let encryptedDocument =\n            \"-----BEGIN BITCOIN ENCRYPTED MESSAGE-----\\n\" +\n            encryptedJsonData + \"\\n\" +\n            \"-----BEGIN ADDRESS-----\\n\" +\n            request.address + \"\\n\" +\n            \"-----BEGIN FROM ADDRESS-----\\n\" +\n            keyEntity.address + \"\\n\" +\n            \"-----END BITCOIN ENCRYPTED MESSAGE-----\";\n\n        //let signatureEntity = this.sign(messageData);\n        let webSocketConnection: ConnectionService = container.get('webSocket.services.connection');\n        webSocketConnection.send({\n            toAddress: request.address,\n            document: encryptedDocument,\n        });\n\n        // console.log(encryptedDocument);\n    }\n}\n","import container from \"../../../../core/container/singletons/container\";\nimport ToastService from \"../services/ToastService\";\n\nlet toastService: ToastService = container.get('notify.services.toast');\n\nexport default toastService;\n","import DocumentService from \"../../../../../packages/bundles/crypt/services/DocumentService\";\nimport SessionService from \"../../../../../packages/bundles/e2ee/domain/services/SessionService\";\nimport container from \"../../../../../packages/core/container/singletons/container\";\n// import HandShakeRepository from \"../../../../packages/e2ee/domain/repositories/p2p/HandShakeRepository\";\n\nexport default abstract class BaseP2pController {\n\n    protected documentService: DocumentService;\n    protected sessionService: SessionService;\n    // protected handShakeRepository: HandShakeRepository;\n\n    constructor(\n        documentService: DocumentService = null,\n        sessionService: SessionService = null\n    ) {\n        if(documentService == null) {\n            documentService = container.get('crypt.services.document');\n        }\n        if(sessionService == null) {\n            sessionService = container.get('e2ee.services.session');\n        }\n        this.documentService = documentService;\n        this.sessionService = sessionService;\n\n        // this.handShakeRepository = container.get('e2ee.repositories.storage.handShake');\n\n    }\n\n    protected send(messageData, address) {\n        return this.documentService.send(messageData, address);\n    }\n}\n","import container from \"../../../../core/container/singletons/container\";\nimport toastFacade from \"../../../notify/domain/facades/toastFacade\";\nimport _ from \"lodash\";\nimport * as crypto from \"crypto\";\nimport AesFactory from \"../../../aes/domain/factories/AesFactory\";\nimport BaseP2pController from \"../../../../../crypto/bundles/transport/domain/base/BaseP2pController\";\nimport eventEmitter from \"../../../../core/event/singletons/eventEmitter\";\nimport HandShakeEventEnum from \"../../domain/enums/HandShakeEventEnum\";\nimport HandShakeRepository from \"../../domain/repositories/p2p/HandShakeRepository\";\nimport Utf8Encoder from \"../../../../ext/string/libs/encoders/Utf8Encoder\";\n\nexport default class HandShakeController extends BaseP2pController {\n\n    start(address, request = null) {\n        this.helloServer(address).then();\n    }\n\n    /**\n     * Шаг 1. Приветствие серверу\n     *\n     * Клиент -> сервер\n     *\n     * Генерируются числа по алгоритму Диффи-Хэллмана\n     * Собеседнику отправляется публичное число ДХ и ID сессии\n     * Публичный ключ он получит из подписи запроса\n     *\n     * Во временном хранилище сохраняется\n     */\n    helloServer(address: string, request = null) {\n        let sessionEntity = this.sessionService.get(address);\n        let params = {};\n        // params[\"mod\"] = 'modp16';\n        let dhInstance = this.forgeDhInstance(sessionEntity, request);\n\n        // params[\"prime\"] = dhInstance.getPrime();\n        dhInstance.generateKeys();\n        let dhPublic = dhInstance.getPublicKey();\n        sessionEntity['dh'] = params;\n        // toastFacade.success('HandShake.helloServer');\n\n        let handShakeRepository: HandShakeRepository = container.get('e2ee.repositories.p2p.handShake');\n        handShakeRepository.helloServer(address, sessionEntity['sessionId'], dhPublic).then(() => {\n        });\n\n        return new Promise(() => {\n        });\n    }\n\n    /**\n     * Шаг 2. Приветствие клиенту\n     *\n     * Сервер -> клиент\n     *\n     * Принимается от клиента публичное число ДХ и ID сессии\n     * Генерируются числа по алгоритму Диффи-Хэллмана\n     * Вычисляется общий эфимерный секретный ключ из моего + клиентского публичного числа ДХ\n     * Клиенту отправляется мое публичное число ДХ\n     *\n     */\n    helloClient(address, request) {\n        let sessionEntity = this.sessionService.get(address);\n        let params = {};\n        // params[\"mod\"] = request.dh.mod;\n        // let dh = crypto.getDiffieHellman(request.dh.mod);\n\n        let dhInstance = this.forgeDhInstance(sessionEntity, request);\n\n        // params[\"prime\"] = dhInstance.getPrime();\n        dhInstance.generateKeys();\n        let dhPublic = dhInstance.getPublicKey();\n        let publicBinary = request.dh.public;\n        params[\"share\"] = dhInstance.computeSecret(publicBinary);\n\n        sessionEntity['dh'] = params;\n        this.sessionService.persist(sessionEntity);\n\n        // toastFacade.success('HandShake.helloClient');\n\n        let handShakeRepository: HandShakeRepository = container.get('e2ee.repositories.p2p.handShake');\n        handShakeRepository.helloClient(address, sessionEntity['sessionId'], dhPublic).then(() => {\n        });\n\n    }\n\n    /**\n     * Шаг 3. Генерация сессионных ключей\n     *\n     * Клиент -> сервер\n     *\n     * Генерация сессионного общего ключа для шифрования и контрольной суммы (MAC)\n     * Шифрование этих ключей общим эфимерным секретным ключом\n     * Отправляется шифрованные сессионные ключи\n     * В локальном хранилище сохраняются сессионные ключи\n     * На этом шаге клиент уже готов к переходу в режим шифрования\n     */\n    getSessionKeys(address, request) {\n        let sessionEntity = this.sessionService.get(address);\n        let params = {};\n        let dhInstance = this.forgeDhInstance(sessionEntity, request);\n\n        // let dhInstance = container.get('e2ee.libs.dh');\n        let publicBinary = request.dh.public;\n        let shareSecret = dhInstance.computeSecret(publicBinary);\n\n        sessionEntity['dh'] = params;\n\n        let keyEntity = this.extractKeysFromShareSecret(shareSecret);\n\n        let sessionKeys = {\n            encryptKey: crypto.randomBytes(32),\n            hmacKey: crypto.randomBytes(32),\n        };\n\n        this.persistSessionKeys(address, sessionKeys);\n\n        let formatEncryption = AesFactory.createEncoderStringFormat(keyEntity);\n\n        let encryptedKeys = {\n            encryptKey: formatEncryption.encrypt(sessionKeys.encryptKey),\n            hmacKey: formatEncryption.encrypt(sessionKeys.hmacKey),\n        };\n\n        // toastFacade.success('HandShake.getSessionKeys - send session keys');\n\n        let handShakeRepository: HandShakeRepository = container.get('e2ee.repositories.p2p.handShake');\n        handShakeRepository.saveSessionKeys(address, sessionEntity['sessionId'], encryptedKeys).then(() => {\n        });\n    }\n\n    /**\n     * Шаг 4. Прием и расшифровка сессионных ключей\n     *\n     * Сервер -> клиент\n     *\n     * В локальном хранилище сохраняются сессионные ключи\n     * Шифрование сообщения, что можно переидти в режим шифрования сессионным ключом\n     * Отправляется сообщение\n     * На этом шаге сервер уже готов к переходу в режим шифрования\n     */\n    saveSessionKeys(address, request) {\n        let sessionEntity = this.sessionService.get(address);\n\n        let encryptedKeys = request.encryptedKeys;\n        let shareSecret = sessionEntity['dh']['share'];\n\n        let keyEntity = this.extractKeysFromShareSecret(shareSecret);\n\n        let formatEncryption = AesFactory.createEncoderStringFormat(keyEntity);\n\n        let sessionKeys = {\n            encryptKey: formatEncryption.decrypt(encryptedKeys.encryptKey),\n            hmacKey: formatEncryption.decrypt(encryptedKeys.hmacKey),\n        };\n\n        this.persistSessionKeys(address, sessionKeys);\n\n        let sessionFormatEncryption = AesFactory.createEncoderStringFormat(sessionKeys);\n\n        this.sessionService.persist(sessionEntity);\n\n        // toastFacade.success('HandShake.saveSessionKeys - receive session keys');\n\n        let handShakeRepository: HandShakeRepository = container.get('e2ee.repositories.p2p.handShake');\n        handShakeRepository.finish(address, sessionEntity['sessionId'], sessionFormatEncryption.encrypt('Hello')).then(() => {\n        });\n    }\n\n    finish(address, request) {\n        let sessionEntity = this.sessionService.get(address);\n        let keyEntity = sessionEntity['sessionKeys'];\n        let formatEncryption = AesFactory.createEncoderStringFormat(keyEntity);\n        let decrypted = formatEncryption.decrypt(request.encrypted);\n        let utf8Encoder = new Utf8Encoder();\n        let decryptedText = utf8Encoder.encode(decrypted);\n\n        if (decryptedText === 'Hello') {\n            toastFacade.success('HandShake.finish success!');\n        } else {\n            toastFacade.error('HandShake.finish error');\n        }\n\n        console.log('finish', decryptedText);\n        console.log('finish sessionEntity', sessionEntity);\n        console.log('finish keyEntity', keyEntity);\n    }\n\n    private extractKeysFromShareSecret(share) {\n        return {\n            encryptKey: share.slice(0, 32),\n            hmacKey: share.slice(33, 65),\n        };\n    }\n\n    private forgeDhInstance(sessionEntity, request) {\n        let dh;\n        dh = container.get('e2ee.libs.dh');\n        /*if (lodash.has(sessionEntity, 'dh.handler')) {\n            dh = lodash.get(sessionEntity, 'dh.handler');\n        } else {\n            dh = container.get('e2ee.libs.dh');\n            // dh = crypto.getDiffieHellman(request['dh']['mod']);\n        }*/\n        return dh;\n    }\n\n    persistSessionKeys(address, sessionKeys) {\n        let sessionEntity = this.sessionService.get(address);\n        sessionEntity['sessionKeys'] = _.clone(sessionKeys);\n        this.sessionService.persist(sessionEntity);\n        eventEmitter.emit(HandShakeEventEnum.COMPLETE, address);\n    }\n}\n","\nimport diConfigurator from \"../../../../core/container/singletons/diConfigurator\";\nimport P2pService from \"../services/P2pService\";\nimport SessionRepository from \"../repositories/localStorage/SessionRepository\";\nimport HandShakeRepository from \"../repositories/p2p/HandShakeRepository\";\nimport SessionService from \"../services/SessionService\";\nimport TunnelService from \"../services/TunnelService\";\nimport HandShakeController from \"../../p2p/controllers/HandShakeController\";\nimport crypto from 'diffie-hellman/browser';\n\n// var crypto = require('diffie-hellman/browser');\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\n        \"services.p2p\",\n        P2pService,\n        [\n            'crypt.services.document',\n            'e2ee.services.session',\n        ]\n    );\n\n\n    bundleDiConfigurator.singleton(\"repositories.storage.session\", SessionRepository);\n    bundleDiConfigurator.singleton(\"repositories.p2p.handShake\", HandShakeRepository);\n    bundleDiConfigurator.bind(\n        \"services.session\",\n        SessionService,\n        [\n            \"this.repositories.storage.session\"\n        ]\n    );\n\n    bundleDiConfigurator.bind(\n        \"services.tunnel\",\n        TunnelService,\n        [\n            'crypt.services.document',\n            'e2ee.services.session',\n        ]\n    );\n\n    let mod = 'modp5';\n    let dh = crypto.getDiffieHellman(mod);\n    bundleDiConfigurator.singleton(\"libs.dh\", dh);\n    bundleDiConfigurator.bind(\"controllers.handShakeController\", HandShakeController, [\n        'crypt.services.document',\n        'e2ee.services.session',\n    ]);\n}\n","import \"./config/event\";\nimport configureDi from \"./config/di\";\n\nlet domainName = 'e2ee';\nconfigureDi(domainName);\n","\nexport default class MessengerEventEnum {\n\n    static readonly NEW_MESSAGE = 'messenger.newMessage';\n}\n","import React, {Component} from 'react';\nimport {Button, Form} from \"react-bootstrap\";\nimport container from \"../../../../../packages/core/container/singletons/container\";\n\nclass MessageForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            errors: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        let name = event.target.name;\n        let state = {};\n        state[name] = event.target.value;\n        this.setState(state);\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        if (this.state[\"message\"]) {\n            let form = {};\n            form[\"message\"] = this.state[\"message\"];\n            form[\"chatId\"] = this.props[\"chatId\"];\n            container.get('messenger.services.message').send(form).then(() => {\n                this.state[\"message\"] = '';\n                this.setState(this.state);\n                //this.props.updateList();\n            });\n        }\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <div className=\"input-group\">\n                    <Form.Control\n                        value={this.state[\"message\"]}\n                        onChange={this.handleChange}\n                        name=\"message\"\n                        placeholder=\"Type Message ...\"\n                    />\n                    <span className=\"input-group-append\">\n                        <Button type=\"submit\" onClick={this.handleSubmit}>Send</Button>\n                    </span>\n                </div>\n            </Form>\n        );\n    }\n}\n\nexport default MessageForm;\n\n// const mapStateToProps = (store) => store.messengerMessage;\n// export default connect(mapStateToProps)(MessageForm);\n","import socketEventEnum from \"../../../../../packages/bundles/webSocket/enums/socketEventEnum\";\nimport MessengerEventEnum from \"../enums/MessengerEventEnum\";\nimport React from 'react';\nimport {Link} from \"react-router-dom\";\nimport MessageForm from \"../../web/components/messageForm\";\nimport EventEmitter from \"events\";\nimport Container from \"../../../../../packages/core/container/libs/Container\";\nimport eventEmitter from \"../../../../../packages/core/event/singletons/eventEmitter\";\nimport container from \"../../../../../packages/core/container/singletons/container\";\nimport eventConfigurator from \"../../../../../packages/core/event/singletons/eventConfigurator\";\nimport toastFacade from \"../../../../../packages/bundles/notify/domain/facades/toastFacade\";\n\neventConfigurator.register(function (container: Container, eventEmitter: EventEmitter) {\n    eventEmitter.on(socketEventEnum.MESSAGE, function (socketEventEntity) {\n        if (socketEventEntity.name === 'sendMessage') {\n            container.get('messenger.services.message').newMessage(socketEventEntity.data);\n        }\n    });\n\n    eventEmitter.on(MessengerEventEnum.NEW_MESSAGE, function (data) {\n        let chatId = container.get('messenger.services.message').getChatId();\n        if (data.direction === 'in' && chatId !== data.chatId) {\n            const Msg = ({closeToast, toastProps}) => (\n                <div>\n                    New message!\n                    <br/>\n                    {data.text}\n                    <br/>\n                    <a className=\"btn btn-xs btn-primary\" href={\"#/messenger/\" + data.chatId}>\n                        Go\n                    </a>\n                    {/*@ts-ignore*/}\n                    <MessageForm chatId={data.chatId}/>\n                </div>\n            );\n            toastFacade.info(Msg);\n        }\n    });\n});\n","import BaseRpcRepository from \"./BaseRpcRepository\";\nimport DataProvider from \"../../../../core/domain/libs/DataProvider\";\nimport Paginator from \"../../../../core/domain/libs/Paginator\";\nimport _ from 'lodash';\nimport Query from \"../../../../core/domain/libs/Query\";\nimport CrudRepositoryInterface from \"../../../../core/domain/interfaces/repository/packs/CrudRepositoryInterface\";\n\nexport default class BaseCrudRpcRepository extends BaseRpcRepository implements CrudRepositoryInterface {\n\n    protected _methodPrefix = null;\n\n    get methodPrefix() {\n        if (this._methodPrefix == null) {\n            throw new Error('Not configured attribute \"methodPrefix\" in CRUD repository!');\n        }\n        return this._methodPrefix;\n    }\n\n    set methodPrefix(value) {\n        this._methodPrefix = value;\n    }\n\n    methodName(name) {\n        return this.methodPrefix + '.' + name;\n    }\n\n    forgeQuery(query) {\n        if (query === null) {\n            query = {};\n        }\n        return query;\n    }\n\n    async update(entity: object) {\n        let requestEntity = {\n            method: this.methodName('update'),\n            body: entity,\n        };\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async deleteById(id) {\n        let requestEntity = {\n            method: this.methodName('delete'),\n            body: {\n                id: id,\n            },\n        };\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async oneById(id, query: Query = null) {\n        let requestEntity = {\n            method: this.methodName('oneById'),\n            // body: body,\n        };\n        query = this.forgeQuery(query);\n        query['id'] = id;\n        //console.log(query);\n        this._forgeRequestByQuery(requestEntity, query);\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async all(query: Query = null) {\n        let requestEntity = {\n            method: this.methodName('all'),\n            // body: body,\n        };\n        this._forgeRequestByQuery(requestEntity, query);\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            let dataProvider = new DataProvider();\n            dataProvider.collection = responseEntity.body;\n            dataProvider.paginator = this._createPaginatorFromRequestMeta(responseEntity.meta);\n            dataProvider.query = query;\n            return dataProvider;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async getDataProvider(query: Query = null) {\n        let requestEntity = {\n            method: this.methodName('all'),\n            // body: body,\n        };\n        this._forgeRequestByQuery(requestEntity, query);\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            let dataProvider = new DataProvider();\n            dataProvider.collection = responseEntity.body;\n            dataProvider.paginator = this._createPaginatorFromRequestMeta(responseEntity.meta);\n            dataProvider.query = query;\n            return dataProvider;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    _forgeRequestByQuery(requestEntity, query) {\n        if (query) {\n            requestEntity.body = {};\n            for (let i in query) {\n                if (query.hasOwnProperty(i)) {\n                    let value = query[i];\n                    let name = _.trim(i, '_');\n                    if (name === 'sort') {\n                        name = 'order';\n                    }\n                    _.set(requestEntity.body, name, value);\n                }\n            }\n            /*if (query.filter) {\n                _.set(requestEntity.body, 'filter', query.filter);\n                // requestEntity.body.filter = query.filter;\n            }*/\n        }\n        return requestEntity;\n    }\n\n    _createPaginatorFromRequestMeta(meta) {\n        let paginator = new Paginator();\n        paginator.page = meta.page || 1;\n        paginator.perPage = meta.perPage || null;\n        paginator.totalCount = meta.totalCount || 0;\n        return paginator;\n    }\n}\n","import BaseCrudRpcRepository from \"../../../../../../packages/bundles/rpc/repositories/base/BaseCrudRpcRepository\";\n\nexport default class ChatRepository extends BaseCrudRpcRepository {\n\n    constructor() {\n        super();\n        this.methodPrefix = 'messenger-chat';\n    }\n}\n","import BaseCrudRpcRepository from \"../../../../../../packages/bundles/rpc/repositories/base/BaseCrudRpcRepository\";\n\nexport default class ChatRepository extends BaseCrudRpcRepository {\n\n    constructor() {\n        super();\n        this.methodPrefix = 'messenger-message';\n    }\n\n    async send(form) {\n        let method = this.methodName('send');\n        try {\n            return await this.sendByMethod(method, form);\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import BaseCrudStateRepository from \"../../../../../../packages/core/state/base/BaseCrudStateRepository\";\n\nexport default class ChatRepository extends BaseCrudStateRepository {\n\n    get reducerPrefix() {\n        return 'messengerChat';\n    }\n}\n","import BaseCrudStateRepository from \"../../../../../../packages/core/state/base/BaseCrudStateRepository\";\n\nexport default class MessageRepository extends BaseCrudStateRepository {\n\n    get reducerPrefix() {\n        return 'messengerMessage';\n    }\n\n    setChatId(chatId) {\n        this.setValue({chatId});\n    }\n\n    getChatId() {\n        let chatId = this.getValue('chatId');\n        if (chatId) {\n            chatId = Number(chatId);\n        }\n        return chatId;\n    }\n}\n","import BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\n\nexport default class ChatService extends BaseCrudService {\n\n}\n","import BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\nimport container from \"../../../../../packages/core/container/singletons/container\";\nimport Query from \"../../../../../packages/core/domain/libs/Query\";\nimport eventEmitter from \"../../../../../packages/core/event/singletons/eventEmitter\";\nimport MessengerEventEnum from \"../enums/MessengerEventEnum\";\n\nexport default class MessageService extends BaseCrudService {\n\n    close() {\n        container.get('messenger.repositories.state.message').setChatId(null);\n    }\n\n    async allByChatId(chatId) {\n        let query = {\n            filter: {\n                chatId: null\n            }\n        }; // new Query();\n        query.filter.chatId = chatId;\n        this.all(query);\n    }\n\n    async all(query = null) {\n        super.all(query);\n        let chatId = query.filter.chatId;\n        container.get('messenger.repositories.state.message').setChatId(chatId);\n    }\n\n    async send(form = null) {\n        //form.chatId = container.messenger.repositories.state.message.getChatId();\n        try {\n            await this.repository.send(form);\n        } catch (error) {\n            // throw error;\n        }\n    }\n\n    async updateList() {\n        let chatId = container.get('messenger.repositories.state.message').getChatId();\n        this.allByChatId(chatId);\n    }\n\n    async newMessage(data = null) {\n        let chatId = container.get('messenger.repositories.state.message').getChatId();\n        eventEmitter.emit(MessengerEventEnum.NEW_MESSAGE, data);\n        if (chatId === data.chatId) {\n            this.updateList();\n            // console.log(chatId, data.chatId);\n        }\n    }\n\n    getChatId() {\n        return this.stateRepository.getChatId();\n    }\n}\n","import \"./config/event\";\nimport configureDi from \"./config/di\";\nimport configureReducer from \"./config/reducer\";\n\nlet domainName = 'messenger';\nconfigureDi(domainName);\nconfigureReducer(domainName);\n","\nimport diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport ChatApiRepository from \"../repositories/rpc/ChatRepository\";\nimport MessageApiRepository from \"../repositories/rpc/MessageRepository\";\nimport ChatStoreRepository from \"../repositories/state/ChatRepository\";\nimport MessageStoreRepository from \"../repositories/state/MessageRepository\";\nimport ChatService from \"../services/ChatService\";\nimport MessageService from \"../services/MessageService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.api.chat\", ChatApiRepository);\n    bundleDiConfigurator.singleton(\"repositories.api.message\", MessageApiRepository);\n    bundleDiConfigurator.singleton(\"repositories.state.chat\", ChatStoreRepository);\n    bundleDiConfigurator.singleton(\"repositories.state.message\", MessageStoreRepository);\n\n    bundleDiConfigurator.bind(\n        \"services.chat\",\n        ChatService,\n        [\n            \"this.repositories.state.chat\",\n            \"this.repositories.api.chat\",\n        ]\n    );\n    bundleDiConfigurator.bind(\n        \"services.message\",\n        MessageService,\n        [\n            \"this.repositories.state.message\",\n            \"this.repositories.api.message\",\n        ]\n    );\n}\n","import diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport reduceConfigurator from \"../../../../../packages/core/state/singletons/reduceConfigurator\";\n\nexport default function configureReducer(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    reduceConfigurator.bindFromRepositoryId(bundleDiConfigurator.get('repositories.state.chat'));\n    reduceConfigurator.bindFromRepositoryId(bundleDiConfigurator.get('repositories.state.message'));\n}\n","// import en from './en';\nimport ru from './ru';\n\nexport default {\n    // en,\n    ru,\n};\n","import translation from './translation.json';\n\nexport default {\n    translation\n};\n","import BaseRpcRepository from \"../../../../../../../packages/bundles/rpc/repositories/base/BaseRpcRepository\";\n\nexport default class RegistrationApiRepository extends BaseRpcRepository {\n\n    async requestActivationCode(body) {\n        let requestEntity = {\n            method: 'userRegistration.requestActivationCode',\n            body: body,\n        };\n\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async createAccount(body) {\n        let requestEntity = {\n            method: 'userRegistration.createAccount',\n            body: body,\n        };\n\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import BaseLocalStorageRepository from \"../../../../../../../packages/ext/permanentStorage/base/BaseLocalStorageRepository\";\n\nexport default class RegistrationRequestFormRepository extends BaseLocalStorageRepository {\n\n    key() {\n        return 'userRegistration';\n    }\n\n    setRequestForm(form) {\n        this.set('requestForm', form);\n    }\n\n    getRequestForm() {\n        return this.get('requestForm');\n    }\n}\n","import RegistrationApiRepository from \"../repositories/rpc/RegistrationApiRepository\";\nimport RegistrationStorageRepository from \"../repositories/localStorage/RegistrationRequestFormRepository\";\n\nexport default class RegistrationService {\n\n    protected registrationApiRepository;\n    protected registrationStorageRepository;\n\n    constructor(registrationApiRepository: RegistrationApiRepository, registrationStorageRepository: RegistrationStorageRepository) {\n        this.registrationApiRepository = registrationApiRepository;\n        this.registrationStorageRepository = registrationStorageRepository;\n\n    }\n\n    async requestActivationCode(form) {\n        try {\n            await this.registrationApiRepository.requestActivationCode(form);\n            this.registrationStorageRepository.setRequestForm(form);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async createAccount(form) {\n        try {\n            await this.registrationApiRepository.createAccount(form);\n            this.registrationStorageRepository.setRequestForm(null);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    getRequestForm() {\n        return this.registrationStorageRepository.getRequestForm();\n    }\n}\n","import i18next from './locales';\nimport configureDi from \"./config/di\";\nimport i18nextConfigurator from \"../../../../../packages/bundles/i18next/domain/singletons/i18nextConfigurator\";\n\nlet domainName = 'registration';\nconfigureDi(domainName);\ni18nextConfigurator.bind(domainName, i18next);\n","import diConfigurator from \"../../../../../../packages/core/container/singletons/diConfigurator\";\nimport RegistrationApiRepository from \"../repositories/rpc/RegistrationApiRepository\";\nimport RegistrationRequestFormRepository from \"../repositories/localStorage/RegistrationRequestFormRepository\";\nimport RegistrationService from \"../services/RegistrationService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.api.registration\", RegistrationApiRepository);\n    bundleDiConfigurator.singleton(\"repositories.storage.registration\", RegistrationRequestFormRepository);\n    bundleDiConfigurator.bind(\n        \"services.registration\",\n        RegistrationService,\n        [\n            \"this.repositories.api.registration\",\n            'registration.repositories.storage.registration'\n        ]\n    );\n}\n","// import en from './en';\nimport ru from './ru';\n\nexport default {\n    // en,\n    ru,\n};\n","import translation from './translation.json';\n\nexport default {\n    translation\n};\n","import BaseRpcRepository from \"../../../../../../../packages/bundles/rpc/repositories/base/BaseRpcRepository\";\n\nexport default class RestorePasswordRepository extends BaseRpcRepository {\n\n    async requestActivationCode(body) {\n        let requestEntity = {\n            method: 'restorePassword.requestActivationCode',\n            body: body,\n        };\n\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async createPassword(body) {\n        let requestEntity = {\n            method: 'restorePassword.createPassword',\n            body: body,\n        };\n\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import BaseRpcRepository from \"../../../../../../../packages/bundles/rpc/repositories/base/BaseRpcRepository\";\n\nexport default class UpdatePasswordRepository extends BaseRpcRepository {\n\n    async updatePassword(body) {\n        let requestEntity = {\n            method: 'updatePassword.update',\n            body: body,\n        };\n\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import BaseLocalStorageRepository from \"../../../../../../../packages/ext/permanentStorage/base/BaseLocalStorageRepository\";\n\nexport default class RestorePasswordRepository extends BaseLocalStorageRepository {\n\n    key() {\n        return 'userRestorePassword';\n    }\n\n    setRequestForm(form) {\n        this.set('requestForm', form);\n    }\n\n    getRequestForm() {\n        return this.get('requestForm');\n    }\n}\n","import container from \"../../../../../../packages/core/container/singletons/container\";\nimport RestorePasswordRepository from \"../repositories/rpc/RestorePasswordRepository\";\nimport RestorePasswordStorageRepository from \"../repositories/localStorage/RestorePasswordRepository\";\n\nexport default class RestorePasswordService {\n\n    protected rpcRepository;\n    protected storageRepository;\n\n    constructor(rpcRepository: RestorePasswordRepository, storageRepository: RestorePasswordStorageRepository) {\n        this.rpcRepository = rpcRepository;\n        this.storageRepository = storageRepository;\n    }\n\n    async requestActivationCode(form) {\n        try {\n            await this.rpcRepository.requestActivationCode(form);\n            this.storageRepository.setRequestForm(form);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async createPassword(form) {\n        try {\n            await this.rpcRepository.createPassword(form);\n            this.storageRepository.setRequestForm(null);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    getRequestForm() {\n        return this.storageRepository.getRequestForm();\n    }\n}\n","import UpdatePasswordRepository from \"../repositories/rpc/UpdatePasswordRepository\";\n\nexport default class UpdatePasswordService {\n\n    protected rpcRepository;\n\n    constructor(rpcRepository: UpdatePasswordRepository) {\n        this.rpcRepository = rpcRepository;\n    }\n\n    async updatePassword(form) {\n        try {\n            await this.rpcRepository.updatePassword(form);\n            // this.storageRepository.setRequestForm(null);\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import i18next from './locales';\nimport configureDi from \"./config/di\";\nimport i18nextConfigurator from \"../../../../../packages/bundles/i18next/domain/singletons/i18nextConfigurator\";\n\nlet domainName = 'password';\nconfigureDi(domainName);\ni18nextConfigurator.bind(domainName, i18next);\n","import diConfigurator from \"../../../../../../packages/core/container/singletons/diConfigurator\";\nimport RpcRestorePasswordRepository from \"../repositories/rpc/RestorePasswordRepository\";\nimport RpcUpdatePasswordRepository from \"../repositories/rpc/UpdatePasswordRepository\";\nimport StorageRestorePasswordRepository from \"../repositories/localStorage/RestorePasswordRepository\";\nimport RestorePasswordService from \"../services/RestorePasswordService\";\nimport UpdatePasswordService from \"../services/UpdatePasswordService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.api.restorePassword\", RpcRestorePasswordRepository);\n    bundleDiConfigurator.singleton(\"repositories.storage.restorePassword\", StorageRestorePasswordRepository);\n    bundleDiConfigurator.bind(\n        \"services.restorePassword\",\n        RestorePasswordService,\n        [\n            \"this.repositories.api.restorePassword\",\n            \"this.repositories.storage.restorePassword\",\n        ]\n    );\n\n\n    bundleDiConfigurator.singleton(\"repositories.api.updatePassword\", RpcUpdatePasswordRepository);\n    bundleDiConfigurator.bind(\n        \"services.updatePassword\",\n        UpdatePasswordService,\n        [\n            \"this.repositories.api.updatePassword\",\n        ]\n    );\n}\n","// import en from './en';\nimport ru from './ru';\n\nexport default {\n    // en,\n    ru,\n};\n","import translation from './translation.json';\n\nexport default {\n    translation\n};\n","import BaseRpcRepository from \"../../../../../../../packages/bundles/rpc/repositories/base/BaseRpcRepository\";\n\nexport default class AuthRepository extends BaseRpcRepository {\n    async getTokenByForm(body) {\n        let requestEntity = {\n            method: 'authentication.getToken',\n            body: body,\n        };\n\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            return responseEntity.body;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","\nimport TokenEntity from \"../../../../../../packages/bundles/user/security/domain/entities/token/TokenEntity\";\nimport container from \"../../../../../../packages/core/container/singletons/container\";\n\nexport default class AuthService {\n\n    protected authRpcRepository;\n    protected userProvider;\n\n    constructor(authRpcRepository/*, userProvider*/) {\n        this.authRpcRepository = authRpcRepository;\n        // this.userProvider = userProvider;\n    }\n\n    async authByForm(form) {\n        try {\n            let value = await this.authRpcRepository.getTokenByForm(form);\n            let tokenEntity = new TokenEntity(value.token, value.identity);\n            // tokenEntity.identity = value.identity;\n            container.get('security.services.userProvider').login(tokenEntity);\n            return tokenEntity;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*logout() {\n        container.get('security.services.userProvider').logout();\n    }*/\n}\n","import i18next from './locales';\nimport configureDi from \"./config/di\";\nimport i18nextConfigurator from \"../../../../../packages/bundles/i18next/domain/singletons/i18nextConfigurator\";\n\nlet domainName = 'authorization';\nconfigureDi(domainName);\ni18nextConfigurator.bind(domainName, i18next);\n","import diConfigurator from \"../../../../../../packages/core/container/singletons/diConfigurator\";\nimport AuthRpcRepository from \"../repositories/rpc/AuthRepository\";\nimport AuthService from \"../services/AuthService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.api.auth\", AuthRpcRepository);\n    bundleDiConfigurator.bind(\n        \"services.auth\",\n        AuthService,\n        [\n            \"this.repositories.api.auth\",\n        ]\n    );\n}\n","// import en from './en';\nimport ru from './ru';\n\nexport default {\n    // en,\n    ru,\n};\n","import translation from './translation.json';\n\nexport default {\n    translation\n};\n","import BaseArrayRepository from \"./BaseArrayRepository\";\nimport Query from \"../../libs/Query\";\nimport DataProvider from \"../../libs/DataProvider\";\nimport Paginator from \"../../libs/Paginator\";\n\nexport default abstract class BaseCrudArrayRepository extends BaseArrayRepository {\n\n    abstract getItems(): object[];\n\n    async getDataProvider(query: Query = null) {\n        try {\n            let dataProvider = new DataProvider();\n            dataProvider.collection = this.getItems();\n            dataProvider.paginator = this._createPaginatorFromRequestMeta();\n            dataProvider.query = query;\n            return dataProvider;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    _createPaginatorFromRequestMeta() {\n        let paginator = new Paginator();\n        paginator.page = 1;\n        paginator.perPage = 99999999;\n        paginator.totalCount = this.getItems().length;\n        return paginator;\n    }\n\n    /*all() {\n        return [\n\n        ];\n    }*/\n}\n","import BaseCrudArrayRepository from \"../../../../../../packages/core/domain/base/array/BaseCrudArrayRepository\";\n\nexport default class SummaryRepository extends BaseCrudArrayRepository {\n\n    getItems(): object[] {\n        return [\n            {\n                \"icon\": \"fas fa-envelope\",\n                \"count\": 4,\n                \"content\": \"4 new messages\",\n                // \"createdAt\": new Date(\"2021-12-12T12:00:00Z\"),\n                \"createdAt\": (Date.now() - 60 * 1000),\n            },\n            {\n                \"icon\": \"fas fa-users\",\n                \"count\": 5,\n                \"content\": \"5 friend requests\",\n                // \"createdAt\": new Date(\"2021-12-12T12:00:00Z\"),\n                \"createdAt\": (Date.now() - 2 * 60 * 60 * 1000),\n            },\n            {\n                \"icon\": \"fas fa-file\",\n                \"count\": 3,\n                \"content\": \"3 new reports\",\n                // \"createdAt\": new Date(\"2021-12-12T12:00:00Z\"),\n                \"createdAt\": (Date.now() - 24 * 60 * 60 * 1000),\n            }\n        ];\n    }\n}\n","import BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\n\nexport default class SummaryService extends BaseCrudService {\n\n\n}\n","import i18next from './locales';\nimport configureDi from \"./config/di\";\nimport i18nextConfigurator from \"../../../../packages/bundles/i18next/domain/singletons/i18nextConfigurator\";\n\nlet domainName = 'notification';\nconfigureDi(domainName);\ni18nextConfigurator.bind(domainName, i18next);\n","import diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport SummaryRepository from \"../repositories/array/SummaryRepository\";\nimport SummaryService from \"../services/SummaryService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.singleton(\"repositories.api.summary\", SummaryRepository);\n    bundleDiConfigurator.bind(\n        \"services.summary\",\n        // NotificationService,\n        (summaryApiRepository) => new SummaryService(null, summaryApiRepository),\n        [\n            \"this.repositories.api.summary\",\n        ]\n    );\n}\n","import ru from './ru';\n\nexport default {\n    ru,\n};\n","import translation from './translation.json';\n\nexport default {\n    translation\n};\n","import i18next from './locales';\nimport i18nextConfigurator from \"../../../../packages/bundles/i18next/domain/singletons/i18nextConfigurator\";\n\nlet domainName = 'i18next';\ni18nextConfigurator.bind(domainName, i18next);\n\nexport default {\n    // i18next,\n};\n","import BaseHasher from \"./BaseHasher\";\nimport pbkdf2 from \"pbkdf2-sha256\";\nimport CryptoJS from \"crypto-js\";\nimport HexEncoder from \"../../../../baseX/libs/encoders/HexEncoder\";\n\nexport default class Pbkdf2Hasher extends BaseHasher {\n\n    protected salt;\n    protected iterations;\n    protected keyLenBytes;\n\n    constructor(salt, iterations = 1, keyLenBytes = 64) {\n        super();\n        this.salt = salt;\n        this.iterations = iterations;\n        this.keyLenBytes = keyLenBytes;\n    }\n\n    encode(key) {\n        return pbkdf2(key, this.salt, this.iterations, this.keyLenBytes);\n\n        /*let hashHex =  CryptoJS.PBKDF2(key, this.salt, {\n            keySize: this.keyLenBytes / 32,\n            iterations: this.iterations,\n        })\n            .toString(CryptoJS.enc.Hex);\n\n        return (new HexEncoder()).decode(hashHex);*/\n    }\n}\n","import Pbkdf2Hasher from \"../../../../../../packages/ext/hash/libs/encoders/hash/Pbkdf2Hasher\";\nimport EncodeInterface from \"../../../../../../packages/core/contract/encoders/EncodeInterface\";\n\nexport default class Pbkdf2ChainHash implements EncodeInterface {\n\n    protected _cost: number;\n    protected _salt = 'salt';\n    protected _keyLengthBytes: number = 32;\n\n    constructor(cost: number) {\n        if (cost < 1) {\n            throw new Error('Cost not can be less then 1');\n        }\n        this._cost = cost;\n    }\n\n    get salt() {\n        return this._salt;\n    }\n\n    set salt(value) {\n        if (value.length < 3) {\n            throw new Error('Salt length not can be less then 3');\n        }\n        this._salt = value;\n    }\n\n    get keyLengthBytes(): number {\n        return this._keyLengthBytes;\n    }\n\n    set keyLengthBytes(value: number) {\n        this._keyLengthBytes = value;\n    }\n\n    encode(sourceValue) {\n        let key = sourceValue;\n        let iterations = this._cost;\n        let hasher = new Pbkdf2Hasher(this._salt, iterations, this._keyLengthBytes);\n        return hasher.encode(key);\n    }\n}\n","import Pbkdf2ChainHash from \"../../../../../encode/domain/libs/chainHash/Pbkdf2ChainHash\";\nimport BaseLoginKey from \"./BaseLoginKey\";\n\nexport default class Pbkdf2LoginKey extends BaseLoginKey {\n\n    cost: number = 9000;\n\n    constructor() {\n        super();\n        let hasher = new Pbkdf2ChainHash(this.cost);\n        this.setHasher(hasher);\n    }\n}\n","import LoginInterface from '../../interfaces/LoginInterface';\nimport _ from \"lodash\";\nimport EncodeInterface from \"../../../../../../../packages/core/contract/encoders/EncodeInterface\";\n\nexport default class BaseLoginKey implements LoginInterface {\n\n    protected hasher: EncodeInterface;\n\n    public setHasher(hasher: EncodeInterface): void {\n        this.hasher = hasher;\n    }\n\n    public all(login: string, password: string): object {\n        let entity = {};\n        entity['entropy'] = this.generateEntropyByLogin(login, password);\n        entity['password'] = this.generatePasswordHash(login, password);\n        return entity;\n    }\n\n    public generateEntropyByLogin(login: string, password: string) {\n        let scope = [\n            'entropy',\n            login,\n            // password,\n        ];\n        let value = this.prepareValue(scope);\n        return this.hasher.encode(value);\n    }\n\n    public generatePasswordHash(login: string, password: string) {\n        let scope = [\n            'password',\n            password,\n            login,\n        ];\n        let value = this.prepareValue(scope);\n        return this.hasher.encode(value);\n    }\n\n    protected prepareValue(value: string[]): string {\n        for (let i in value) {\n            if (value.hasOwnProperty(i)) {\n                value[i] = _.trim(value[i]);\n            }\n        }\n        return value.join(\"|\");\n    }\n}\n","import HDKey from 'hdkey';\nimport CryptoKeyHelper from \"../helpers/CryptoKeyHelper\";\nimport ObjectHelper from \"../../../../../packages/ext/object/helpers/ObjectHelper\";\n\nexport default class HdKey {\n\n    hdKey;\n    encrypt = {\n        isEnabled: false,\n        password: null,\n    };\n    indexEntityPattern = {\n        purpose: 44,\n        coin: 0,\n        account: 0,\n        chain: 0,\n        address: 0,\n    };\n    seedBuffer;\n    entropy;\n\n    constructor(seedBuffer) {\n        this.seedBuffer = seedBuffer;\n        this.hdKey = HDKey.fromMasterSeed(seedBuffer);\n        // seedBuffer.entropy = seedTo(entity.mnemonic);\n    }\n\n    oneBySeed(fromAddress = 0, countChildKeys = 10) {\n        let entity = {\n            root: {\n                privateExtendedKey: null,\n                publicExtendedKey: null\n            },\n            child: {},\n        };\n\n        // entity.entropy = mnemonicToEntropy(entity.mnemonic);\n\n        entity.root.privateExtendedKey = this.hdKey.privateExtendedKey;\n        entity.root.publicExtendedKey = this.hdKey.publicExtendedKey;\n\n        // let indexEntity = _.clone(this.indexEntityPattern);\n        let indexEntity = ObjectHelper.clone(this.indexEntityPattern);\n\n\n        indexEntity.address = fromAddress;\n        // console.log(this.indexEntityPattern);\n\n        entity.child = this.allChild(indexEntity, countChildKeys);\n        return entity;\n    }\n\n    allChild(indexEntity, countChildKeys) {\n        let childKeys = [];\n        let fromAddress = indexEntity.address;\n        for (let address = fromAddress; address < fromAddress + countChildKeys; address++) {\n            indexEntity.address = address;\n            childKeys.push(this.oneChild(indexEntity));\n        }\n        return childKeys;\n    }\n\n    oneChild(indexEntity) {\n        let index = this._entityToIndex(indexEntity);\n\n        let childKey = this.hdKey.derive(index);\n\n        let childKeyItem = {\n            index: null,\n            address: null,\n            publicKey: {\n                extended: null,\n                binary: null,\n                hex: null,\n                hash160: null,\n                hash160Hex: null\n            },\n            privateKey: {\n                extended: null,\n                wif: null,\n                wifEncrypted: null\n            }\n        };\n        childKeyItem.index = index;\n\n        // childKeyItem.privateExtendedKey = childKey.privateExtendedKey;\n        // childKeyItem.publicExtendedKey = childKey.publicExtendedKey;\n\n        childKeyItem.address = CryptoKeyHelper.addressByPublicKey(childKey.publicKey);\n\n        // childKeyItem.publicKey = {};\n        childKeyItem.publicKey.extended = childKey.publicExtendedKey;\n        childKeyItem.publicKey.binary = childKey.publicKey;\n        childKeyItem.publicKey.hex = childKey.publicKey.toString('hex');\n        childKeyItem.publicKey.hash160 = CryptoKeyHelper.hashByPublicKey(childKey.publicKey);\n        childKeyItem.publicKey.hash160Hex = CryptoKeyHelper.hashByPublicKey(childKey.publicKey).toString('hex');\n\n        // childKeyItem.privateKey = {};\n        childKeyItem.privateKey.extended = childKey.privateExtendedKey;\n        childKeyItem.privateKey.wif = CryptoKeyHelper.privateKeyToWif(childKey.privateKey, true);\n        if (this.encrypt.isEnabled) {\n            childKeyItem.privateKey.wifEncrypted = CryptoKeyHelper.encryptPrivateKey(childKey.privateKey, this.encrypt.password);\n        }\n        return childKeyItem;\n    }\n\n    protected _entityToIndex(indexEntity) {\n        return (\n            \"m/\" +\n            indexEntity.purpose + \"'/\" +\n            indexEntity.coin + \"'/\" +\n            indexEntity.account + \"'/\" +\n            indexEntity.chain + \"/\" +\n            indexEntity.address\n        );\n    }\n}\n","import * as bip39 from \"bip39\";\nimport CryptoKeyHelper from \"./CryptoKeyHelper\";\nimport BitcoinWIF from \"bitcoin-wif\";\nimport ConvHelper from \"../../../../../packages/ext/binary/helpers/ConvHelper\";\nimport HdKey from \"../libs/HdKey\";\n\nexport default class MnemonicHelper {\n\n    static seedToHdKeyPair(seed, address = 0) {\n        let indexEntityPattern = {\n            purpose: 44,\n            coin: 0,\n            account: 0,\n            chain: 0,\n            address: address,\n        };\n        return this.seedToHdKeys(seed, address, 1, indexEntityPattern);\n    }\n\n    static seedToHdKeys(seed, fromAddress = 0, countChildKeys = 10, indexEntityPattern = null) {\n        if(typeof seed === 'string') {\n            seed = ConvHelper.toBuffer(seed, 'hex');\n        }\n        let hdKey = new HdKey(seed);\n        if(indexEntityPattern) {\n            hdKey.indexEntityPattern = indexEntityPattern;\n        }\n        return hdKey.oneBySeed(fromAddress, countChildKeys);\n    }\n\n    static mnemonicToEntity(mnemonic, password = null) {\n\n        let isValidMnemonic = bip39.validateMnemonic(mnemonic);\n        if(!isValidMnemonic) {\n            throw new Error('Bad mnemonic!');\n        }\n\n        let entity = {\n            seed: undefined,\n            entropy: undefined,\n            wif: undefined,\n            privateKey: undefined,\n            publicKey: undefined,\n            address: undefined\n        };\n\n        entity.seed = bip39.mnemonicToSeedSync(mnemonic, password).toString('hex');\n        entity.entropy = bip39.mnemonicToEntropy(mnemonic);\n\n        // let privateKey = this.seedHexToPrivateKeyBinary(entity.seed);\n        // entity.privateKey = ConvHelper.toHex(privateKey);\n        // entity.wif = CryptoKeyHelper.binaryPrivateKeyToWif(privateKey);\n\n        entity.wif = this.seedHexToPrivateKeyWif(entity.seed);\n        entity.privateKey = CryptoKeyHelper.wifPrivateKeyToBinary(entity.wif);\n\n        entity.publicKey = CryptoKeyHelper.extractPublicKeyFromWif(entity.wif);\n        entity.address = CryptoKeyHelper.addressByPublicKey(entity.publicKey);\n        return entity;\n    }\n\n    static generateMnemonicWithEntropy() {\n        let entity = {\n            mnemonic: undefined,\n            entropy: undefined\n        };\n        entity.mnemonic = bip39.generateMnemonic();\n        entity.entropy = bip39.mnemonicToEntropy(entity.mnemonic);\n        return entity;\n    }\n\n    static generateMnemonic() {\n        return bip39.generateMnemonic();\n    }\n\n    static entropyToSeed(entropy, password) {\n        let mnemonic = bip39.entropyToMnemonic(entropy);\n        let isValidMnemonic = bip39.validateMnemonic(mnemonic);\n        if (!isValidMnemonic) {\n            throw new Error('Bad mnemonic!');\n        } else {\n            return bip39.mnemonicToSeedSync(mnemonic, password);\n        }\n    }\n\n    static mnemonicToSeed(mnemonic, password = null) {\n        let isValidMnemonic = bip39.validateMnemonic(mnemonic);\n        if (!isValidMnemonic) {\n            throw new Error('Bad mnemonic!');\n        } else {\n            return bip39.mnemonicToSeedSync(mnemonic, password);\n        }\n    }\n\n    static seedHexToPrivateKeyWif(seedBuffer, network = \"mainnet\") {\n\n        // let hdKeyEntity = this.seedToHdKeys(seedBuffer, 0, 1);\n        // console.log(hdKeyEntity.child[0].privateKey.wif);\n\n        let hdKeyEntity = this.seedToHdKeyPair(seedBuffer, 0);\n        // console.log(hdKeyEntity.child[0].privateKey.wif);\n\n        return hdKeyEntity.child[0].privateKey.wif;\n\n        // let privateKeyBytes = this.seedHexToPrivateKeyBinary(seedBuffer, network);\n        // return CryptoKeyHelper.privateKeyToWif(privateKeyBytes);\n\n\n        /*let network = \"mainnet\";\n        let privateKeyBytes = this._seedToPrivateKey(seedBuffer, network);\n        return CryptoKeyHelper.privateKeyToWif(privateKeyBytes);*/\n        // return btcWIF.wif(privateKeyHex);\n    }\n\n    // static seedHexToPrivateKeyBinary(seedBuffer, network = \"mainnet\") {\n    //     let seedHex = seedBuffer.toString('hex');\n    //     const btcWIF = new BitcoinWIF(network);\n    //     let privateKeyHex = btcWIF.privateKey(seedHex);\n    //     return ConvHelper.toBytes(privateKeyHex, 'hex');\n    //\n    //     /*let privateKeyBytes = this._seedToPrivateKey(seedBuffer, network);\n    //     return privateKeyBytes;*/\n    //\n    //     // return btcWIF.wif(privateKeyHex);\n    // }\n\n    /*static _seedToPrivateKey(seedBuffer, network) {\n        let seedHex = seedBuffer.toString('hex');\n        const btcWIF = new BitcoinWIF(network);\n        let privateKeyHex = btcWIF.privateKey(seedHex);\n        return ConvHelper.toBytes(privateKeyHex, 'hex');\n    }*/\n}\n","import TokenEntity from \"../../../../../../packages/bundles/user/security/domain/entities/token/TokenEntity\";\nimport CryptoKeyHelper from \"../../../../key/domain/helpers/CryptoKeyHelper\";\n\nexport default class TokenHelper {\n\n    static forgeTokenEntity(keyEntity) {\n        let identityEntity = this._forgeIdentityEntity(keyEntity);\n        let token = this._forgeTokenString(keyEntity);\n        let tokenEntity = new TokenEntity(token, identityEntity);\n        // tokenEntity.identity = identityEntity;\n        return tokenEntity;\n    }\n\n    static _forgeTokenString(keyEntity) {\n        let publicKeyHex = keyEntity.publicKey.toString('hex');\n        return 'crypto ' + publicKeyHex;\n    }\n\n    static _forgeIdentityEntity(keyEntity) {\n        let hash160 = CryptoKeyHelper.hashByPublicKey(keyEntity.publicKey);\n        return {\n            \"id\": hash160.toString('hex'),\n            \"statusId\": 100,\n            \"username\": keyEntity.address,\n            \"roles\": [\n                \"rCryptoUser\"\n            ],\n        };\n    }\n}\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport baseX from \"base-x\";\nimport conv from 'binstring';\n\nexport default class BaseXEncoder implements EncoderInterface {\n\n    decode(encodedValue) {\n    }\n\n    encode(value, fromFormat = undefined, alphabet = undefined) {\n        let baseXX = baseX(alphabet);\n        if (fromFormat) {\n            let options = {out: 'binary'};\n            if (fromFormat) {\n                options[\"in\"] = fromFormat;\n            }\n            value = conv(value, options);\n        }\n        return baseXX.encode(value);\n    }\n}\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport BaseXEncoder from \"./BaseXEncoder\";\n\nexport default class AbstractBaseXEncoder implements EncoderInterface {\n\n    alphabet;\n\n    decode(encodedValue) {\n    }\n\n    encode(value, fromFormat = undefined) {\n        return this.toBaseX(value, fromFormat, this.alphabet);\n    }\n\n    toBaseX(value, fromFormat = undefined, alphabet = undefined) {\n        let baseXEncoder = new BaseXEncoder();\n        return baseXEncoder.encode(value, fromFormat, alphabet);\n    }\n}\n","\nexport default class AlphabetEnum {\n\n    static readonly WHITESPACE = \" \\t\\n\\r\\u000B\\u0085\\u00A0\\u2000\\u2001\\u2002\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\"; // Funny: only whitespace...\n    static readonly SPEC_CHAR =   \"!#$%&()*+,./:,<=>?@[]^_`{|}~\\\"\";\n    static readonly PUNCTUATION = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"; //'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~';\n    static readonly NUMERIC = \"0123456789\";\n    static readonly ALPHA_UPPER = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    static readonly ALPHA_LOWER = \"abcdefghijklmnopqrstuvwxyz\";\n\n    static readonly BASE_2 = \"01\";\n    static readonly BASE_10 = \"0123456789\";\n    static readonly BASE_32_HEX = \"0123456789ABCDEFGHIJKLMNOPQRSTUV\";\n    static readonly BASE_32 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n    static readonly BASE_36 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    static readonly BASE_52 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    static readonly BASE_58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n    static readonly BASE_62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    static readonly BASE_64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    static readonly BASE_85 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-,<=>?@^_`{|}~\";\n    static readonly Z_85 =    \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#\";\n    static readonly BASE_91 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~\\\"\";\n    static readonly BASE_94 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~\\\"-\\\\'\";\n\n    // static readonly ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    // static readonly ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz';\n    // static readonly ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    // static readonly digits = '0123456789';\n    // static readonly hexdigits = '0123456789abcdefABCDEF';\n    // static readonly octdigits = '01234567';\n    // static readonly printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c';\n    // static readonly punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~';\n    // static readonly whitespace = ' \\t\\n\\r\\x0b\\x0c';\n\n // BASE_94 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~';\n //    BASE_93 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+./:;<=>?@[]^_`{|}~\\\"-\\\\'\";\n    BASE_98 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~\\\"-\\\\' \\t\\n\\r\";\n// todo: удалить лишние запятые\n\n    static readonly PRINTABLE = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c';\n\n}\n\n// https://github.com/cryptocoinjs/base-x/blob/master/README.md\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport AbstractBaseXEncoder from \"./AbstractBaseXEncoder\";\nimport AlphabetEnum from \"../../enums/AlphabetEnum\";\n\nexport default class Base94Encoder extends AbstractBaseXEncoder implements EncoderInterface {\n\n    alphabet = AlphabetEnum.BASE_94;\n\n}\n","import configManager from \"../../../../core/configManager/singletons/configManager\";\n\nexport default class ConnectionRepository {\n\n    static first() {\n        let connectionEntity = this.all()[0];\n        return connectionEntity;\n    }\n\n    static all() {\n        return configManager.get('server.connections');\n        // return server.connections;\n    }\n}\n","import container from \"../../../../../../packages/core/container/singletons/container\";\nimport MnemonicHelper from \"../../../../key/domain/helpers/MnemonicHelper\";\nimport TokenHelper from \"../helpers/TokenHelper\";\nimport CryptoKeyHelper from \"../../../../key/domain/helpers/CryptoKeyHelper\";\nimport ConvHelper from \"../../../../../../packages/ext/binary/helpers/ConvHelper\";\nimport BaseLoginKey from \"../libs/loginKey/BaseLoginKey\";\nimport TimeHelper from \"../../../../../../packages/ext/time/helpers/TimeHelper\";\nimport TokenEntity from \"../../../../../../packages/bundles/user/security/domain/entities/token/TokenEntity\";\nimport Base94Encoder from \"../../../../../../packages/ext/baseX/libs/encoders/Base94Encoder\";\nimport ConnectionRepository from \"../../../../../../packages/ext/app/repositories/config/ConnectionRepository\";\n\nexport default class AuthService {\n\n    protected loginKey: BaseLoginKey;\n\n    constructor(loginKey: BaseLoginKey) {\n        this.loginKey = loginKey;\n    }\n\n    getRpcToken() {\n        let connectionEntity = ConnectionRepository.first();\n        // let connectionEntity = server.connections[0];\n        let parsedUrl = new URL(connectionEntity.webSocketUrl);\n        let json = JSON.stringify({\n            hostname: parsedUrl.hostname,\n            timestamp: TimeHelper.timestamp(),\n        });\n        let sig = container.get('signature.services.signer').sign(json);\n        return 'crypto ' + ConvHelper.toHex(sig.document);\n    }\n\n    seedByLogin(login: string, password: string) {\n        let entropyBinary = this.loginKey.generateEntropyByLogin(login, password);\n        let passwordBinary = this.loginKey.generatePasswordHash(login, password);\n\n\n        let base94Encoder = new Base94Encoder();\n        let passwordBase94 = base94Encoder.encode(passwordBinary);\n\n        // let passwordBase94 = BaseXHelper.toBase94(passwordBinary);\n        return MnemonicHelper.entropyToSeed(entropyBinary, passwordBase94);\n    }\n\n    authByLogin(login: string, password: string) {\n        let seedBuffer = this.seedByLogin(login, password);\n        return this.authBySeed(seedBuffer);\n    }\n\n    authByMnemonic(mnemonic: string, password: string) {\n        let seedBuffer = MnemonicHelper.mnemonicToSeed(mnemonic, password);\n        return this.authBySeed(seedBuffer);\n    }\n\n    authBySeed(seedBuffer) {\n        let wif = MnemonicHelper.seedHexToPrivateKeyWif(seedBuffer);\n        this.authByPrivateKeyWif(wif);\n    }\n\n    authByPrivateKeyWif(privateKeyWif: string, password: string = null) {\n        let decryptedKeyBinary = CryptoKeyHelper.decryptPrivateKey(privateKeyWif, password);\n        privateKeyWif = CryptoKeyHelper.binaryPrivateKeyToWif(decryptedKeyBinary);\n        let keyService = container.get('key.services.key');\n        keyService.savePrivateKey(privateKeyWif);\n        let keyEntity = keyService.one();\n        // let tokenEntity = tokenHelper.forgeTokenEntity(keyEntity);\n        let identityEntity = TokenHelper._forgeIdentityEntity(keyEntity);\n        let tokenString = this.getRpcToken();\n        let tokenEntity = new TokenEntity(tokenString, identityEntity);\n        container.get('security.services.userProvider').login(tokenEntity);\n        return tokenEntity;\n    }\n}\n","\nimport diConfigurator from \"../../../../../../packages/core/container/singletons/diConfigurator\";\nimport LoginKey from \"../libs/loginKey/Pbkdf2LoginKey\";\nimport AuthService from \"../services/AuthService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n    bundleDiConfigurator.singleton(\"libs.loginKey\", LoginKey);\n    bundleDiConfigurator.bind(\n        \"services.auth\",\n        AuthService,\n        [\n            \"this.libs.loginKey\"\n        ]\n    );\n}\n","\nimport configureDi from \"./config/di\";\n\nlet domainName = 'cryptoAuthorization';\nconfigureDi(domainName);\n","import BaseLocalStorageRepository from \"../../../../../../packages/ext/permanentStorage/base/BaseLocalStorageRepository\";\nimport CryptoKeyHelper from \"../../helpers/CryptoKeyHelper\";\n\nexport default class KeyRepository extends BaseLocalStorageRepository {\n\n    key() {\n        return 'cryptKey';\n    }\n\n    /*oneByAddress(address, password) {\n        let collection = [\n            {\n                address: \"12oAXCt8kjME3TxjW9MK42Fs89GnauXfAg\",\n                privateKey: \"5J7MuiufoFzkE9AzyRMNua9pEL24cuAap67PCS2Tb7RjiYoC4Eh\",\n            }\n        ];\n        let entity = collection[0];\n        let privKey = CryptoKeyHelper.wifPrivateKeyToBinary(entity.privateKey);\n        entity.publicKey = CryptoKeyHelper.extractPublicKey(privKey);\n        entity.address = CryptoKeyHelper.addressByPublicKey(entity.publicKey);\n        return entity;\n    }*/\n\n    savePrivateKey(privateKey, password) {\n        this.set('privateKey', privateKey);\n    }\n\n    /*loadPrivateKey() {\n        return this.get('privateKey');\n    }*/\n\n    one() {\n\n        let privateKey = this.get('privateKey');\n        if(privateKey) {\n            return CryptoKeyHelper.forgeEntity(privateKey);\n        } else {\n            throw new Error('Not found key');\n        }\n\n        // this.__forgeEntity2(entity);\n        // return entity;\n    }\n\n    /*__forgeEntity(entity) {\n        let privKey = CryptoKeyHelper.wifPrivateKeyToBinary(entity.privateKey);\n        entity.publicKey = CryptoKeyHelper.extractPublicKey(privKey);\n        entity.address = CryptoKeyHelper.addressByPublicKey(entity.publicKey);\n    }*/\n\n    __forgeEntity2(entity) {\n        // entity.isCompressed = CryptoKeyHelper.isCompressedPrivateKey(entity.privateKey);\n\n        entity.privateKeyWif = entity.privateKey;\n        entity.privateKey = CryptoKeyHelper.wifPrivateKeyToBinary(entity.privateKey);\n        entity.publicKey = CryptoKeyHelper.extractPublicKeyFromWif(entity.privateKeyWif);\n        entity.publicHash = CryptoKeyHelper.hashByPublicKey(entity.publicKey);\n        entity.address = CryptoKeyHelper.addressByPublicKey(entity.publicKey);\n    }\n\n    /*setCollection(value) {\n        this.set('collection', value);\n    }\n\n    getCollection() {\n        return this.get('collection');\n    }*/\n}\n","import container from \"../../../../../packages/core/container/singletons/container\";\n\nexport default class SignerService {\n\n    protected keyRepository;\n    protected messageSigner;\n\n    constructor(keyRepository, messageSigner) {\n        this.keyRepository = keyRepository;\n        this.messageSigner = messageSigner;\n    }\n\n    sign(message) {\n        let keyEntity = container.get('key.services.key').one();\n        if (!keyEntity.privateKey) {\n            new Error('Not found private key!');\n        }\n        return this.messageSigner.sign(message, keyEntity.privateKey);\n    }\n\n    verify(signature, message, pubKey = undefined) {\n        return this.messageSigner.verify(signature, message, pubKey);\n    }\n\n    recoverPublicKey(signature, msgHash) {\n        return this.messageSigner.recoverPublicKey(signature, msgHash);\n    }\n}\n","\nimport diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport KeyRepository from \"../../../key/domain/repositories/localStorage/KeyRepository\";\nimport cryptoFactory from \"../factories/cryptoFactory\";\nimport SignerService from \"../services/SignerService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n    bundleDiConfigurator.bind(\"services.signer\", () => {\n        let keyRepository = new KeyRepository();\n        let messageSigner = cryptoFactory.createBitcoinMessageSigner();\n        return new SignerService(keyRepository, messageSigner);\n    });\n}\n","\nimport configureDi from \"./config/di\";\n\nlet domainName = 'signature';\nconfigureDi(domainName);\n\n\n// http://procbits.com/2013/08/27/generating-a-bitcoin-address-with-javascript\n// http://cryptocoinjs.com/\n// https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/README.md\n// https://github.com/bitcoinjs/bip39\n// https://iancoleman.io/\n// https://github.com/bitcoin/bips/blob/master/README.mediawiki\n// https://cryptojs.gitbook.io/docs/\n","import BaseP2pController from \"../../../transport/domain/base/BaseP2pController\";\nimport toastFacade from \"../../../../../packages/bundles/notify/domain/facades/toastFacade\";\n\nexport default class MessengerController extends BaseP2pController {\n\n    sendMessage(address: string, request = null) {\n        toastFacade.info(address);\n    }\n}\n","import container from \"../../../../../packages/core/container/singletons/container\";\nimport DocumentService from \"../../../../../packages/bundles/crypt/services/DocumentService\";\nimport VerifyEntity from \"../../../signature/domain/entities/VerifyEntity\";\nimport BaseP2pController from \"../base/BaseP2pController\";\nimport MessengerController from \"../../../messenger/p2p/controllers/MessengerController\";\nimport DocumentFormat from \"../../../signature/domain/libs/bitcoin/DocumentFormat\";\nimport cryptoFactory from \"../../../signature/domain/factories/cryptoFactory\";\nimport DocumentTypeEnum from \"../enums/DocumentTypeEnum\";\nimport SessionService from \"../../../../../packages/bundles/e2ee/domain/services/SessionService\";\nimport JsonBinaryEncoder from \"../../../../../packages/ext/jsonBinary/libs/encoders/JsonBinaryEncoder\";\n\nexport default class P2pHandler {\n\n    protected routesConfig() {\n        return {\n            routes: {\n                /*'handShake.start2': {\n                    controller: 'e2ee.controllers.handShakeController',\n                    action: 'start2',\n                }*/\n            },\n            controllers: {\n                // 'handShake': 'e2ee.controllers.handShakeController',\n                'handShake': container.get('e2ee.controllers.handShakeController'),\n                'messenger': new MessengerController(),\n            },\n        };\n    }\n\n    handle(cryptoRequest) {\n\n        let documentFormat: DocumentFormat = cryptoFactory.createBitcoinDocumentFormat();\n        let documentType = documentFormat.getType(cryptoRequest.document);\n\n        if(documentType === DocumentTypeEnum.SIGNED) {\n            let {address, request} = this.parseDocument(cryptoRequest.document);\n            let route = request['method'];\n            let {controllerDefinition, actionMethodName} = this.getRouteHandler(route);\n            let actionInstance = this.getActionInstance(controllerDefinition, actionMethodName, address);\n            return actionInstance(address, request);\n        } else if(documentType === DocumentTypeEnum.ENCRYPTED) {\n            let decodedDocument = documentFormat.parse(cryptoRequest.document);\n            let address = decodedDocument['from_address'];\n            let sessionService: SessionService = container.get('e2ee.services.session');\n            let sessionEntity = sessionService.get(address);\n            console.log('sessionEntity11111111111111111', sessionEntity);\n            // console.log(sessionEntity['sessionKeys']);\n            console.log('decodedDocument', decodedDocument);\n        }\n    }\n\n    private getRouteHandler(route) {\n        let [controller, action] = route.split('.');\n        let routesConfig = this.routesConfig();\n        let actionMethodName;\n        let controllerDefinition;\n        let routeItem = routesConfig.routes[route] ? routesConfig.routes[route] : null;\n        if (routeItem) {\n            controllerDefinition = routeItem['controller'];\n            actionMethodName = routeItem['action'];\n        } else {\n            controllerDefinition = routesConfig.controllers[controller] ? routesConfig.controllers[controller] : null;\n            actionMethodName = action;\n        }\n        return {controllerDefinition, actionMethodName};\n    }\n\n    private getActionInstance(controllerDefinition, actionMethodName, companionAddress) {\n        let controllerInstance: BaseP2pController = this.controllerDefinitionToInstance(controllerDefinition);\n        let actionInstance = controllerInstance[actionMethodName];\n        actionInstance = actionInstance.bind(controllerInstance);\n        return actionInstance;\n    }\n\n    private controllerDefinitionToInstance(controllerDefinition): BaseP2pController {\n        let controllerInstance;\n        if (typeof controllerDefinition === 'string') {\n            controllerInstance = container.get(controllerDefinition);\n        } else if (typeof controllerDefinition === 'object') {\n            controllerInstance = controllerDefinition;\n        } else {\n            throw new Error('Bad type of controller');\n        }\n        return controllerInstance;\n    }\n\n    private static verify(document): VerifyEntity {\n        let documentService: DocumentService = container.get('crypt.services.document');\n        let verifyEntity = documentService.verify(document);\n        if (!verifyEntity.isVerified) {\n            throw new Error('Bad signature!');\n        }\n        return verifyEntity;\n    }\n\n    private parseDocument(document) {\n        let verifyEntity = P2pHandler.verify(document);\n        let address = verifyEntity['signature']['address'];\n        let messageJson = verifyEntity['signature']['message'];\n\n        let encoder = new JsonBinaryEncoder();\n        let request = encoder.decode(messageJson);\n        // let request = JSON.parse(messageJson);\n\n        return {\n            address,\n            request,\n        };\n    }\n}\n","import socketEventEnum from \"../../../../../packages/bundles/webSocket/enums/socketEventEnum\";\nimport P2pHandler from \"../libs/P2pHandler\";\nimport eventEmitter from \"../../../../../packages/core/event/singletons/eventEmitter\";\n\neventEmitter.on(socketEventEnum.MESSAGE, function (socketEventEntity) {\n    if (socketEventEntity.name === 'cryptoMessage.p2p') {\n        let p2pHandler = new P2pHandler();\n        let cryptoRequest = socketEventEntity.data;\n        p2pHandler.handle(cryptoRequest);\n    }\n});\n","\nimport diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n}\n","import \"./config/event\";\nimport configureDi from \"./config/di\";\n\nlet domainName = 'transport';\nconfigureDi(domainName);\n","import EncoderInterface from \"../../../../core/contract/encoders/EncoderInterface\";\nimport conv from 'binstring';\nimport bs58 from \"bs58\";\nimport AbstractBaseXEncoder from \"./AbstractBaseXEncoder\";\nimport AlphabetEnum from \"../../enums/AlphabetEnum\";\n\nexport default class Base58Encoder extends AbstractBaseXEncoder implements EncoderInterface {\n\n    alphabet = AlphabetEnum.BASE_58;\n\n    /*encode(value, fromFormat = undefined) {\n        if (fromFormat) {\n            let options = {out: 'binary'};\n            if (fromFormat) {\n                options[\"in\"] = fromFormat;\n            }\n            value = conv(value, options);\n        }\n        return bs58.encode(value);\n    }*/\n}\n","import TimeHelper from \"../../../../ext/time/helpers/TimeHelper\";\nimport * as crypto from \"crypto\";\nimport Base58Encoder from \"../../../../ext/baseX/libs/encoders/Base58Encoder\";\n\nexport default class P2pRequestEntity {\n\n    id;\n    address: string;\n    method: string;\n    params;\n    timestamp: number;\n\n    constructor(method: string = null, params = null) {\n        if (method) {\n            this.method = method;\n        }\n        if (params) {\n            this.params = params;\n        }\n        this.timestamp = TimeHelper.timestamp();\n\n        let randomBytes = crypto.randomBytes(16);\n        let base58Encoder = new Base58Encoder();\n        let randomBytesBase58 = base58Encoder.encode(randomBytes);\n        this.id = this.timestamp.toString() + '-' + randomBytesBase58.slice();\n    }\n}\n","import P2pService from \"../../../../../packages/bundles/e2ee/domain/services/P2pService\";\nimport P2pRequestEntity from \"../../../../../packages/bundles/e2ee/domain/entities/P2pRequestEntity\";\nimport TimeHelper from \"../../../../../packages/ext/time/helpers/TimeHelper\";\n\nexport default class MessageService {\n\n    private p2pService: P2pService;\n\n    constructor(p2pService: P2pService) {\n        this.p2pService = p2pService;\n    }\n\n    send(address: string, content: string) {\n        let messageRequest = new P2pRequestEntity('messenger.sendMessage', {\n            message: content,\n            createdAt: TimeHelper.timestamp(),\n        });\n        this.p2pService.sendRequest(address, messageRequest);\n    }\n}\n","import diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport MessageService from \"../services/MessageService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\n        \"services.message\",\n        MessageService,\n        [\n            'e2ee.services.p2p',\n        ]\n    );\n}\n","import configureDi from \"./config/di\";\n\nlet domainName = 'cryptoMessenger';\nconfigureDi(domainName);\n","\nimport diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n}\n","\nimport configureDi from \"./config/di\";\n\nlet domainName = 'encrypt';\nconfigureDi(domainName);\n","import BaseLocalStorageRepository from \"../../../../../../packages/ext/permanentStorage/base/BaseLocalStorageRepository\";\nimport CryptoKeyHelper from \"../../helpers/CryptoKeyHelper\";\n\nexport default class HdKeyRepository extends BaseLocalStorageRepository {\n\n    key() {\n        return 'cryptHdKey';\n    }\n\n    savePrivateKey(privateKey, password) {\n        this.set('privateKey', privateKey);\n    }\n\n    one() {\n        let privateKey = this.get('privateKey');\n        return CryptoKeyHelper.forgeEntity(privateKey);\n    }\n\n    __forgeEntity2(entity) {\n        entity.isCompressed = CryptoKeyHelper.isCompressedPrivateKey(entity.privateKey);\n        entity.privateKey = CryptoKeyHelper.wifPrivateKeyToBinary(entity.privateKey);\n        entity.publicKey = CryptoKeyHelper.extractPublicKey(entity.privateKey, entity.isCompressed);\n        entity.publicHash = CryptoKeyHelper.hashByPublicKey(entity.publicKey);\n        entity.address = CryptoKeyHelper.addressByPublicKey(entity.publicKey);\n        // console.log(entity);\n    }\n}\n","import container from \"../../../../../packages/core/container/singletons/container\";\nimport CryptoKeyHelper from \"../helpers/CryptoKeyHelper\";\nimport hash, {sha256} from \"crypto-hashing\";\nimport Address from \"btc-address\";\nimport conv from 'binstring';\n\nexport default class KeyService {\n\n    protected keyRepository;\n\n    constructor(keyRepository) {\n        this.keyRepository = keyRepository;\n    }\n\n    getPublicKey() {\n        let keyEntity = this.keyRepository.one();\n        return keyEntity.publicKey;\n        // let privateKeyBinary = CryptoKeyHelper.wifPrivateKeyToBinary(privateKey);\n        // let publicKeyBinary = CryptoKeyHelper.extractPublicKey(privateKeyBinary);\n        // return publicKeyBinary;\n    }\n\n    getAddress() {\n        let publicKeyBinary = this.getPublicKey();\n        return CryptoKeyHelper.addressByPublicKey(publicKeyBinary);\n        // let pubKeyHash = hash.ripemd160(sha256(publicKeyBinary));\n        // let address = new Address(conv(pubKeyHash, {in: 'hex', out: 'bytes'}));\n        // return address.toString();\n    }\n\n    one() {\n        return this.keyRepository.one();\n    }\n\n    savePrivateKey(privateKey) {\n        let privateKeyBinary = CryptoKeyHelper.wifPrivateKeyToBinary(privateKey);\n        this.keyRepository.savePrivateKey(privateKey);\n    }\n}\n","\nimport diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport KeyRepository from \"../repositories/localStorage/KeyRepository\";\nimport HdKeyRepository from \"../repositories/localStorage/HdKeyRepository\";\nimport DocumentRepository from \"../../../../../packages/bundles/crypt/repositories/rpc/DocumentRepository\";\nimport KeyService from \"../services/KeyService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    let keyRepository = new KeyRepository();\n\n    bundleDiConfigurator.bind(\"repositories.storage.hdKey\", HdKeyRepository);\n    bundleDiConfigurator.bind(\"repositories.api.document\", DocumentRepository);\n    bundleDiConfigurator.bind(\"services.key\", () => new KeyService(keyRepository));\n}\n","\nimport configureDi from \"./config/di\";\n\nlet domainName = 'key';\nconfigureDi(domainName);\n\n\n// http://cryptocoinjs.com/\n// https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/README.md\n// https://github.com/bitcoinjs/bip39\n// https://iancoleman.io/\n// https://github.com/bitcoin/bips/blob/master/README.mediawiki\n// https://cryptojs.gitbook.io/docs/\n","import BaseCrudRpcRepository from \"../../../../../../packages/bundles/rpc/repositories/base/BaseCrudRpcRepository\";\n\nexport default class CategoryRepository extends BaseCrudRpcRepository {\n\n    constructor() {\n        super();\n        this.methodPrefix = 'shopCategory';\n    }\n}\n","import BaseCrudRpcRepository from \"../../../../../../packages/bundles/rpc/repositories/base/BaseCrudRpcRepository\";\n\nexport default class ProductRepository extends BaseCrudRpcRepository {\n\n    constructor() {\n        super();\n        this.methodPrefix = 'shopProduct';\n    }\n}\n","import BaseCrudStateRepository from \"../../../../../../packages/core/state/base/BaseCrudStateRepository\";\n\nexport default class CategoryRepository extends BaseCrudStateRepository {\n\n    get reducerPrefix() {\n        return 'shopCategory';\n    }\n}\n","import BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\n\nexport default class CategoryService extends BaseCrudService {\n\n}\n","import BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\n\nexport default class ProductService extends BaseCrudService {\n\n}\n","import BaseCrudRpcRepository from \"../../../../../../packages/bundles/rpc/repositories/base/BaseCrudRpcRepository\";\nimport DataProvider from \"../../../../../../packages/core/domain/libs/DataProvider\";\nimport Query from \"../../../../../../packages/core/domain/libs/Query\";\n\nexport default class OrderRepository extends BaseCrudRpcRepository {\n\n    constructor() {\n        super();\n        this.methodPrefix = 'shopOrder';\n    }\n\n    async kanban(query: Query = null) {\n        let requestEntity = {\n            method: this.methodName('kanban'),\n            // body: body,\n        };\n        this._forgeRequestByQuery(requestEntity, query);\n        try {\n            let responseEntity = await this.sendRequest(requestEntity);\n            let dataProvider = new DataProvider();\n            dataProvider.collection = responseEntity.body;\n            dataProvider.paginator = this._createPaginatorFromRequestMeta(responseEntity.meta);\n            dataProvider.query = query;\n            return dataProvider;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\nimport Query from \"../../../../../packages/core/domain/libs/Query\";\n\nexport default class OrderService extends BaseCrudService {\n\n    async kanban(query: Query = null): Promise<any> {\n        try {\n            let dataProvider = await this.repository.kanban(query);\n            if(this.stateRepository) {\n                this.stateRepository.setDataProvider(dataProvider);\n            }\n            return dataProvider;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import configureDi from \"./config/di\";\nimport configureReducer from \"./config/reducer\";\n\nlet domainName = 'shop';\nconfigureDi(domainName);\nconfigureReducer(domainName);\n","import diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport CategoryRpcRepository from \"../repositories/rpc/CategoryRepository\";\nimport ProductRpcRepository from \"../repositories/rpc/ProductRepository\";\nimport CategoryStateRepository from \"../repositories/state/CategoryRepository\";\nimport CategoryService from \"../services/CategoryService\";\nimport ProductService from \"../services/ProductService\";\nimport BaseCrudRpcRepository from \"../../../../../packages/bundles/rpc/repositories/base/BaseCrudRpcRepository\";\nimport BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\nimport OrderRepository from \"../repositories/rpc/OrderRepository\";\nimport OrderService from \"../services/OrderService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"repositories.api.category\", CategoryRpcRepository);\n    bundleDiConfigurator.bind(\"repositories.api.product\", ProductRpcRepository);\n    bundleDiConfigurator.bind(\"repositories.state.category\", CategoryStateRepository);\n\n    bundleDiConfigurator.bind(\n        \"services.category\",\n        CategoryService,\n        [\n            \"this.repositories.state.category\",\n            \"this.repositories.api.category\",\n        ]\n    );\n    bundleDiConfigurator.bind(\n        \"services.product\",\n        (productRepository) => new ProductService(null, productRepository),\n        [\n            \"this.repositories.api.product\"\n        ]\n    );\n\n\n    bundleDiConfigurator.bind(\"repositories.api.order\", () => {\n        let repo = new OrderRepository();\n        repo.methodPrefix = 'shopOrder';\n        return repo;\n    });\n    bundleDiConfigurator.bind(\n        \"services.order\",\n        (apiRepository) => new OrderService(null, apiRepository),\n        [\n            \"this.repositories.api.order\"\n        ]\n    );\n\n}\n","import diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport reduceConfigurator from \"../../../../../packages/core/state/singletons/reduceConfigurator\";\n\nexport default function configureReducer(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    reduceConfigurator.bindFromRepositoryId(bundleDiConfigurator.get(\"repositories.state.category\"));\n}\n","\nimport diConfigurator from \"../../../../../packages/core/container/singletons/diConfigurator\";\nimport BaseCrudRpcRepository from \"../../../../../packages/bundles/rpc/repositories/base/BaseCrudRpcRepository\";\nimport BaseCrudService from \"../../../../../packages/core/domain/services/BaseCrudService\";\n\nexport default function configureDi(domainName) {\n    let bundleDiConfigurator = diConfigurator.createInstance(domainName);\n\n    bundleDiConfigurator.bind(\"repositories.api.company\", () => {\n        let repo = new BaseCrudRpcRepository();\n        repo.methodPrefix = 'companyCompany';\n        return repo;\n    });\n    bundleDiConfigurator.bind(\n        \"services.company\",\n        (apiRepository) => new BaseCrudService(null, apiRepository),\n        [\n            \"this.repositories.api.company\"\n        ]\n    );\n\n    bundleDiConfigurator.bind(\"repositories.api.employee\", () => {\n        let repo = new BaseCrudRpcRepository();\n        repo.methodPrefix = 'companyEmployee';\n        return repo;\n    });\n    bundleDiConfigurator.bind(\n        \"services.employee\",\n        (apiRepository) => new BaseCrudService(null, apiRepository),\n        [\n            \"this.repositories.api.employee\"\n        ]\n    );\n}\n","import configureDi from \"./config/di\";\n\nlet domainName = 'company';\nconfigureDi(domainName);\n","export default {\n    name: '{{domainName}}.password.index',\n    title: 'Генератор паролей',\n    breadcrumbs: [\n        '{{domainName}}.index',\n        '{{domainName}}.password.index',\n    ],\n    /*menu: [\n        '{{domainName}}.hash.index',\n        '{{domainName}}.password.index',\n    ],*/\n    content: `\n<!--<h3>{{title}}</h3>-->\n<p>\n    Генерирует надежные пароли желаемой длины.\n    Для каждого сайта будет сгененрирован отдельный пароль.\n    See <a href=\"help://utils.hash.index\"></a>\n</p>\n<p>\n    Идеалогия такая - если мы не храним пароли, то их никто не сможет своровать.\n</p>\n<p>\n    Защита от брутфорса мастер-ключа заключается в решении алгоритмически сложной задачи,\n    значительно замедляющей процесс брута.\n</p>\n<p>\n    Также, есть счетчик смены паролей, его надо увеличивать при каждой смнене пароля.\n    Если вы забудете, какое значение счетчика было последним, его можно подобрать,\n    увеличивая на единицу при каждой попытке.\n</p>\n<p>\n    Длина пароля по умолчанию - 10 символов, это довольно надежно и проходит валидацию на\n    сайтах.\n    <b>Не рекомендуется менять длину пароля, чтобы потом не запутаться самому.</b>\n</p>\n<p>\n    Мастер-пароль всегда один и тот же.\n</p>\n<p>\n    Чтобы не путаться в логинах к сайтам, <b>желательно выбрать уникальный, единый логин для\n    всех</b>.\n</p>\n<p>\n    Что необходимо запомнить:\n</p>\n<ul>\n    <li>\n        Мастер-пароль\n    </li>\n    <li>\n        Логин\n    </li>\n</ul>`,\n}\n","\nexport default {\n    name: '{{domainName}}.hash.index',\n    title: 'Хеш-функция',\n    breadcrumbs: [\n        '{{domainName}}.index',\n        '{{domainName}}.hash.index',\n    ],\n    menu: [\n        '{{domainName}}.hash.index',\n        '{{domainName}}.password.index',\n    ],\n    content: `\n\n<p>\n<b>Хеш-функция</b> (<a href=\"/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\"\n                            title=\"Английский язык\">англ.</a>&nbsp;<i lang=\"en\">hash function</i> от <i\n                             lang=\"en\">hash</i>&nbsp;— «превращать в фарш», «мешанина»<sup\n                            id=\"cite_ref-_ff142c473b3a285a_1-0\" className=\"reference\"><a\n                            href=\"#cite_note-_ff142c473b3a285a-1\">[1]</a></sup>), или <b>функция свёртки</b>&nbsp;—\n                            функция, осуществляющая преобразование <a\n                                href=\"/wiki/%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)\"\n                                className=\"mw-redirect\" title=\"Массив (программирование)\">массива</a> входных данных\n                            произвольной длины в выходную <a href=\"/wiki/%D0%91%D0%B8%D1%82\"\n                                                             title=\"Бит\">битовую</a> строку установленной длины,\n                            выполняемое <a\n                                href=\"/wiki/%D0%94%D0%B5%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC\"\n                                title=\"Детерминированный алгоритм\">определённым алгоритмом</a>. Преобразование,\n                            производимое хеш-функцией, называется <b>хешированием</b>. Исходные данные называются\n                            входным массивом, «<b>ключом</b>» или «<i><b>сообщением</b></i>». Результат преобразования\n                            называется «<i><b><a href=\"/wiki/%D0%A5%D0%B5%D1%88-%D1%81%D1%83%D0%BC%D0%BC%D0%B0\"\n                                                 title=\"Хеш-сумма\">хешем</a></b></i>», «<i><b>хеш-кодом</b></i>»,\n                            «<i><b>хеш-суммой</b></i>», «<b>сводкой <a\n                                href=\"/wiki/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B5\"\n                                title=\"Сообщение\">сообщения</a></b>».\n                        </p>\n\n`\n}\n","\nexport default {\n    name: '{{domainName}}.index',\n    title: 'Утилиты',\n    breadcrumbs: [\n        '{{domainName}}.index',\n    ],\n    menu: [\n        '{{domainName}}.hash.index',\n        '{{domainName}}.password.index',\n    ],\n}\n","import helpConfigurator from \"../../../../../packages/bundles/help/domain/singletons/helpConfigurator\";\nimport passwordIndex from \"../help/password\";\nimport hashIndex from \"../help/hash\";\nimport index from \"../help\";\n\nexport default function configureHelp(domainName) {\n    helpConfigurator.addCollection(domainName, [\n        passwordIndex,\n        hashIndex,\n        index,\n    ]);\n}\n","import configureHelp from \"./config/help\";\n\nlet domainName = 'utils';\n\nconfigureHelp(domainName);\n","import container from \"../../../../packages/core/container/singletons/container\";\nimport \"../../config/bundle\";\n\nlet bundle = {\n    app: {},\n};\n\nObject.assign(container, bundle);\n","import {combineReducers, createStore} from 'redux';\nimport reduceConfigurator from \"../../../../packages/core/state/singletons/reduceConfigurator\";\nimport diConfigurator from \"../../../../packages/core/container/singletons/diConfigurator\";\n\nlet domainReducers = reduceConfigurator.getReducers();\nlet reducers = combineReducers(domainReducers);\nlet store = createStore(reducers);\ndiConfigurator.singleton('app.store', store);\n","class ErrorHelper {\n\n    unprocessableEntityErrorToString(error) {\n        let message = '';\n        let errorCollection = error.getErrors();\n        if (errorCollection.length > 0) {\n            for (let k in errorCollection) {\n                if (errorCollection.hasOwnProperty(k)) {\n                    let item = errorCollection[k];\n                    message += \" \\n \" + item.message;\n                }\n            }\n        } else {\n            message = error.message;\n        }\n        return message;\n    }\n\n    unprocessableEntityErrorToAssoc(error) {\n        let errors = {};\n        let errorCollection = error.getErrors();\n        if (errorCollection.length > 0) {\n            for (let k in errorCollection) {\n                if (errorCollection.hasOwnProperty(k)) {\n                    let item = errorCollection[k];\n                    let field = item.field;\n                    if (errors[field] === undefined) {\n                        errors[field] = [];\n                    }\n                    errors[field].push(item.message);\n                }\n            }\n        }\n        return errors;\n    }\n}\n\nexport default new ErrorHelper();\n","\nexport default class LocaleHelper {\n\n    static assoc = {\n        en: 'us',\n        kk: 'kz',\n    };\n\n    static encode(locale) {\n        let encoded = this.assoc.hasOwnProperty(locale) ? this.assoc[locale] : locale;\n        return encoded;\n    }\n}\n","export default class AppEventEnum {\n\n    static readonly BEFORE_BOOTSTRAP_LOAD = 'app.bootstrap.load.before';\n    static readonly AFTER_BOOTSTRAP_LOAD = 'app.bootstrap.load.after';\n\n}\n","import eventEmitter from \"../../../../packages/core/event/singletons/eventEmitter\";\nimport container from \"../../../../packages/core/container/singletons/container\";\nimport RpcEventEnum from \"../../../../packages/bundles/rpc/enums/RpcEventEnum\";\nimport UnprocessableEntityError from \"../../../../packages/core/contract/errors/UnprocessableEntityError\";\nimport toastFacade from \"../../../../packages/bundles/notify/domain/facades/toastFacade\";\nimport UnauthorizedError from \"../../../../packages/core/contract/errors/UnauthorizedError\";\nimport errorHelper from \"../../../../packages/bundles/rpc/libs/errorHelper\";\nimport _ from \"lodash\";\nimport LocaleHelper from \"../../../../packages/bundles/language/domain/helpers/LocaleHelper\";\nimport \"../../../../packages/bundles/rpc/config/eventDev\";\nimport ConnectionRepository from \"../../../../packages/ext/app/repositories/config/ConnectionRepository\";\nimport AppEventEnum from \"../../domain/enums/AppEventEnum\";\nimport UrlHelper from \"../../../../packages/ext/html/helpers/UrlHelper\";\nimport configManager from \"../../../../packages/core/configManager/singletons/configManager\";\n\neventEmitter.on(AppEventEnum.AFTER_BOOTSTRAP_LOAD, function () {\n    let connectionEntity = ConnectionRepository.first();\n    container.get('rpc.repositories.api.transport').rpcUrl = connectionEntity.rpcUrl;\n});\n\neventEmitter.on(RpcEventEnum.CLIENT_RESPONSE_ERROR, function (error) {\n    if (error instanceof UnprocessableEntityError) {\n        toastFacade.error(errorHelper.unprocessableEntityErrorToString(error));\n    } else if (error instanceof UnauthorizedError) {\n        toastFacade.info(error.message);\n        // let loginRoute = config.user.loginRoute;\n        let loginRoute = configManager.get('user.loginRoute');\n        window.location.href = UrlHelper.normalize(loginRoute);\n    } else {\n        toastFacade.error(error.message);\n    }\n});\n\n// установить токен в RPC-запрос\neventEmitter.on(RpcEventEnum.CLIENT_BEFORE_SEND, function (requestEntity) {\n    let tokenEntity = container.get('security.services.userProvider').getTokenEntity();\n    if (tokenEntity.isAuthenticated()) {\n        _.set(requestEntity, 'meta.Authorization', tokenEntity.getToken());\n    }\n});\n\n// установить язык в RPC-запрос\neventEmitter.on(RpcEventEnum.CLIENT_BEFORE_SEND, function (requestEntity) {\n    let languageEntity = container.get('language.services.switch').oneSelected();\n    if (languageEntity && languageEntity.code) {\n        let locale = LocaleHelper.encode(languageEntity.code);\n        _.set(requestEntity, 'meta.Language', locale);\n    }\n});\n\n/*eventEmitter.on(RpcEventEnum.CLIENT_RESPONSE_SUCCESS, function (responseEntity) {\n    console.log(responseEntity);\n});*/\n","import eventEmitter from \"../../../../packages/core/event/singletons/eventEmitter\";\nimport toastFacade from \"../../../../packages/bundles/notify/domain/facades/toastFacade\";\nimport {t} from \"i18next\";\nimport SecurityEventEnum from \"../../../../packages/bundles/user/security/domain/enums/SecurityEventEnum\";\n\neventEmitter.on(SecurityEventEnum.LOGIN, function (token) {\n    toastFacade.success(t('authorization.message.signInSuccess'));\n});\n\neventEmitter.on(SecurityEventEnum.LOGOUT, function (token) {\n    toastFacade.success(t('authorization.message.signOutSuccess'));\n});\n","import socketEventEnum from \"../enums/socketEventEnum\";\nimport EnvHelper from \"../../../ext/app/helpers/EnvHelper\";\nimport eventConfigurator from \"../../../core/event/singletons/eventConfigurator\";\nimport Container from \"../../../core/container/libs/Container\";\nimport EventEmitter from \"events\";\n\neventConfigurator.register(function (container: Container, eventEmitter: EventEmitter) {\n    if (EnvHelper.isDev()) {\n        /*eventEmitter.on(socketEventEnum.OPEN, function (event) {\n            console.info(\"WebSocket. Соединение установлено.\");\n            //console.info(event);\n        });*/\n\n        eventEmitter.on(socketEventEnum.CLOSE, function (event) {\n            console.info('WebSocket. Соединение закрыто чисто');\n            //console.info(event);\n        });\n\n        eventEmitter.on(socketEventEnum.BREAK, function (event) {\n            console.info('WebSocket. Обрыв соединения');\n            console.info('WebSocket. Код: ' + event.code, event);\n            //console.info(event);\n        });\n\n        eventEmitter.on(socketEventEnum.MESSAGE, function (socketEventEntity) {\n            if (socketEventEntity.name === 'connect') {\n                console.info(\"WebSocket. Соединение установлено.\");\n                console.info(\"WebSocket. Активных соединений: \" + socketEventEntity.data.totalConnections);\n            } else {\n                console.info(\"WebSocket. Получены данные \", socketEventEntity);\n            }\n            // console.info(socketEventEntity);\n        });\n\n        eventEmitter.on(socketEventEnum.ERROR, function (error) {\n            console.info(\"WebSocket. Ошибка \", error.message);\n            //console.info(event);\n        });\n    }\n});\n","export default class Timer {\n\n    protected handler = null;\n    protected isDisposable = true;\n\n    stop() {\n        clearInterval(this.handler);\n        this.handler = null;\n    }\n\n    start(interval = 1000, onTick) {\n        if (this.handler === null) {\n            this.handler = setInterval(() => {\n                onTick();\n                if (this.isDisposable) {\n                    this.stop();\n                }\n            }, interval);\n        }\n    }\n}\n","import eventEmitter from \"../../../../packages/core/event/singletons/eventEmitter\";\nimport container from \"../../../../packages/core/container/singletons/container\";\nimport SecurityEventEnum from \"../../../../packages/bundles/user/security/domain/enums/SecurityEventEnum\";\nimport \"../../../../packages/bundles/webSocket/config/eventDev\";\nimport socketEventEnum from \"../../../../packages/bundles/webSocket/enums/socketEventEnum\";\nimport toastFacade from \"../../../../packages/bundles/notify/domain/facades/toastFacade\";\nimport ConnectionRepository from \"../../../../packages/ext/app/repositories/config/ConnectionRepository\";\nimport TokenEntityInterface from \"../../../../packages/bundles/user/security/domain/interfaces/TokenEntityInterface\";\nimport Timer from \"../../../../packages/ext/cron/libs/Timer\";\nimport configManager from \"../../../../packages/core/configManager/singletons/configManager\";\n\neventEmitter.on(SecurityEventEnum.SET_TOKEN_ENTITY, function (tokenEntity: TokenEntityInterface) {\n    let webSocketConnection = container.get('webSocket.services.connection');\n    let isEnable = configManager.get('webSocket.enable', false);\n    if (tokenEntity.isAuthenticated() && isEnable) {\n        // console.log(tokenEntity.getToken());\n        let callback = () => {\n            let connectionEntity = ConnectionRepository.first();\n            webSocketConnection.url = connectionEntity.webSocketUrl;\n            webSocketConnection.open();\n        };\n        let startDelay = configManager.get('webSocket.startDelay', 1000);\n        let timer = new Timer();\n        timer.start(startDelay, callback);\n    } else {\n        webSocketConnection.close();\n    }\n});\n\neventEmitter.on(socketEventEnum.BREAK, function (event) {\n    toastFacade.error(\"WebSocket. Обрыв соединения. Код: \" + event.code);\n});\n\neventEmitter.on(SecurityEventEnum.LOGOUT, function () {\n    let webSocketConnection = container.get('webSocket.services.connection');\n    webSocketConnection.close();\n});\n\neventEmitter.on(socketEventEnum.ERROR, function (error) {\n    toastFacade.error(\"WebSocket. Ошибка \" + error.message);\n});\n","import container from \"../../../../core/container/singletons/container\";\n\nclass BreadcrumbFacade {\n\n    addHome() {\n        container.get('breadcrumb.services.breadcrumb').clear();\n        this.add('Home', '/');\n    }\n\n    add(title, route = '/') {\n        container.get('breadcrumb.services.breadcrumb').add(title, route);\n    }\n}\n\nexport default new BreadcrumbFacade();\n","export default class PageTitleEventEnum {\n\n    static readonly BEFORE_RENDER = 'pageTitle.render.before';\n\n}\n","import PageTitle from \"../libs/PageTitle\";\n\nexport default new PageTitle();\n","export default class PageTitle {\n\n    private _defaultTitle: string;\n\n    public setPageTitleDefault(): void {\n        if (this._defaultTitle) {\n            this.setPageTitle(this._defaultTitle);\n        }\n    }\n\n    public setPageTitle(title: string): void {\n        let titleElem = document.querySelector(\"title\");\n        if (!this._defaultTitle) {\n            this._defaultTitle = titleElem.innerText;\n        }\n        titleElem.innerText = title;\n    }\n}\n","// import container from \"../../packages/container/singletons/container\";\nimport eventEmitter from \"../../../packages/core/event/singletons/eventEmitter\";\nimport \"./event/rpc\";\nimport \"./event/user\";\nimport \"./event/webSocket\";\nimport breadcrumbFacade from \"../../../packages/bundles/breadcrumb/domain/facades/breadcrumbFacade\";\n// import eventConfigHelper from \"../../packages/event/helpers/eventConfigHelper\";\nimport eventConfigurator from \"../../../packages/core/event/singletons/eventConfigurator\";\nimport AppEventEnum from \"../domain/enums/AppEventEnum\";\nimport PageTitleEventEnum from \"../../../packages/ext/app/enums/PageTitleEventEnum\";\nimport pageHead from \"../../../packages/ext/pageTitle/singletons/pageTitle\";\nimport UrlHelper from \"../../../packages/ext/html/helpers/UrlHelper\";\n\n/*eventEmitter.on(AppEventEnum.AFTER_BOOTSTRAP_LOAD, function () {\n    // breadcrumbFacade.addHome();\n    breadcrumbFacade.add('Main');\n});*/\n\neventEmitter.on(AppEventEnum.AFTER_BOOTSTRAP_LOAD, function () {\n    // eventConfigHelper.loadFromDomains(container, eventEmitter);\n    eventConfigurator.initAll();\n});\n\n\n\n\nlet currentUrl = null;\neventEmitter.on(PageTitleEventEnum.BEFORE_RENDER, function (location: Location) {\n    let uri = location.pathname + location.search;\n    if(currentUrl != uri) {\n        currentUrl = uri;\n        pageHead.setPageTitleDefault();\n        breadcrumbFacade.addHome();\n    }\n});\n","import container from \"../../../packages/core/container/singletons/container\";\nimport eventEmitter from \"../../../packages/core/event/singletons/eventEmitter\";\n// import store from \"./store\";\nimport AppEventEnum from '../domain/enums/AppEventEnum';\nimport UserProviderService from \"../../../packages/bundles/user/security/domain/services/UserProviderService\";\nimport SwitchService from \"../../../packages/bundles/language/domain/services/SwitchService\";\n\neventEmitter.emit(AppEventEnum.BEFORE_BOOTSTRAP_LOAD);\n// container.get('app').store = store;\n\nlet userProviderService: UserProviderService = container.get('security.services.userProvider');\nuserProviderService.init();\n\nlet switchService: SwitchService = container.get('language.services.switch');\nswitchService.init();\n\neventEmitter.emit(AppEventEnum.AFTER_BOOTSTRAP_LOAD);\n","import React from 'react';\nimport {Form} from \"react-bootstrap\";\n\nexport default function FormErrorWidget(props) {\n    let errors = props.errors;\n    let name = props.name;\n    return (\n        <Form.Text className=\"text-danger\">\n            {errors[name] ?? ''}\n        </Form.Text>\n    );\n}\n","import copy from \"copy-text-to-clipboard\";\n\nexport default class CopyHelper {\n\n    static copy(arg) {\n        let id = arg.target.attributes.getNamedItem('data-target').nodeValue;\n        let inputElement = document.getElementById(id);\n        copy(inputElement[\"value\"]);\n    }\n}\n","import _ from 'lodash';\n\nexport default class FormHelper {\n\n    static mergeDefaultValues(entity, defaultFormValues) {\n        return  _.merge(defaultFormValues, entity);\n        /*for (let entityAttributeName in entity) {\n            if(entity.hasOwnProperty(entityAttributeName)) {\n                defaultFormValues[entityAttributeName] = entity[entityAttributeName];\n            }\n        }\n        return defaultFormValues;*/\n    }\n\n    /*static getInitialValues(values, props) {\n        if(props.hasOwnProperty('values') && _.isObject(props.values)) {\n            values = _.merge(values, props.values);\n        }\n        return values;\n    }\n\n    static extractInitValues(entity, attributes) {\n        let values = {};\n        for (let key in attributes) {\n            if(attributes.hasOwnProperty(key)) {\n                let attributeName = attributes[key];\n                values[attributeName] = entity[attributeName];\n            }\n        }\n        return values;\n    }*/\n}\n","import {Field, Formik} from \"formik\";\nimport {Button, Col, Form, FormGroup, Row} from \"react-bootstrap\";\nimport React from \"react\";\nimport FormErrorWidget from \"../../../../../../packages/ext/form/widgets/FormErrorWidget\";\nimport CopyHelper from \"../../../../../../packages/ext/browser/helpers/CopyHelper\";\nimport FormHelper from \"../../../../../../packages/ext/form/helpers/FormHelper\";\n\nexport default function PasswordGeneratorForm(props) {\n    // const {t} = useTranslation();\n\n    let initialValues = {\n        masterKey: '',\n        host: '',\n        login: '',\n        nonce: 1,\n        passwordLength: 10,\n        password: '',\n    };\n    initialValues = FormHelper.mergeDefaultValues(props.entity, initialValues);\n\n    let validate = function (values) {\n        const errors = {};\n        if (!values.host) {\n            errors[\"host\"] = 'Required';\n        }\n        if (!values.masterKey) {\n            errors[\"masterKey\"] = 'Required';\n        }\n        if (!values.login) {\n            errors[\"login\"] = 'Required';\n        }\n        if (!values.nonce) {\n            errors[\"nonce\"] = 'Required';\n        }\n        if (!values.passwordLength) {\n            errors[\"passwordLength\"] = 'Required';\n        }\n        return errors;\n    };\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={props.onSubmit}\n            validate={validate}\n        >\n            {({\n                  values,\n                  errors,\n                  // touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting,\n              }) => (\n                <Form onSubmit={handleSubmit}>\n\n\n                    <FormGroup>\n                        <Row>\n                            <Col>\n                                <label htmlFor=\"\">\n                                    Host\n                                </label>\n                                <Form.Control\n                                    name=\"host\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.host}\n                                />\n                                <FormErrorWidget errors={errors} name='host'/>\n                            </Col>\n                            <Col>\n                                <label htmlFor=\"\">\n                                    Login\n                                </label>\n                                <Form.Control\n                                    name=\"login\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.login}\n                                />\n                                <FormErrorWidget errors={errors} name='login'/>\n                            </Col>\n                        </Row>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Row>\n                            <Col>\n                                <label htmlFor=\"\">\n                                    Password length\n                                </label>\n                                <Form.Control\n                                    name=\"passwordLength\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.passwordLength}\n                                    type=\"number\"\n                                />\n                                <FormErrorWidget errors={errors} name='passwordLength'/>\n                            </Col>\n                            <Col>\n                                <label htmlFor=\"\">\n                                    Nonce\n                                </label>\n                                <Form.Control\n                                    name=\"nonce\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.nonce}\n                                    type=\"number\"\n                                />\n                                <FormErrorWidget errors={errors} name='nonce'/>\n                            </Col>\n                        </Row>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Row>\n                            <Col>\n                                <label htmlFor=\"\">\n                                    Master key\n                                </label>\n                                <Form.Control\n                                    name=\"masterKey\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.masterKey}\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                                <FormErrorWidget errors={errors} name='masterKey'/>\n                            </Col>\n                            <Col>\n                                <label htmlFor=\"\">\n                                    Password\n                                </label>\n                                <div className=\"input-group\">\n                                    <Form.Control\n                                        id=\"password\"\n                                        name=\"password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.password}\n                                        readOnly={true}\n                                        autoComplete=\"off\"\n                                        style={{fontFamily: 'monospace'}}\n                                    />\n                                    <div className=\"input-group-append\">\n                                        <Button data-target=\"password\" onClick={CopyHelper.copy}>Copy</Button>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </FormGroup>\n\n                    <Button type=\"submit\" disabled={isSubmitting}>\n                        Generate\n                    </Button>\n\n                </Form>\n            )}\n        </Formik>\n    );\n};\n","\nexport default class PasswordStrengthEnum {\n\n    static readonly WEAK = 1;\n    static readonly NORMAL = 2;\n    static readonly STRONG = 3;\n    static readonly ERY_STRONG = 4;\n}\n","import _ from \"lodash\";\n\nexport default class UrlGenerator {\n\n    generate(host, login, params) {\n        host = _.trim(host);\n        login = _.trim(login);\n        for(let i in params) {\n            params[i] = _.trim(params[i]);\n        }\n        let queryString = new URLSearchParams(params).toString();\n        return login + '@' + host + '?' + queryString;\n    }\n}\n","import _ from \"lodash\";\nimport PasswordStrengthEnum from \"../enums/PasswordStrengthEnum\";\nimport UrlGenerator from \"./UrlGenerator\";\n\nexport default class PasswordGenerator {\n\n    protected _masterKey;\n    protected _passwordLength;\n    protected _passwordEncoder;\n    protected _hasher;\n    protected _passwordStrength = PasswordStrengthEnum.STRONG;\n\n    constructor(hasher, passwordEncoder) {\n        this._passwordEncoder = passwordEncoder;\n        this._hasher = hasher;\n    }\n\n    set masterKey(value) {\n        this._masterKey = _.trim(value);\n    }\n\n    set passwordLength(value) {\n        if (!_.isInteger(value)) {\n            throw new Error('Password length not integer');\n        }\n        if(value < 5) {\n            throw new Error('Password length less then 5');\n        }\n        if(value > 32) {\n            throw new Error('Password length greater then 32');\n        }\n        this._passwordLength = value;\n    }\n\n    set passwordStrength(value) {\n        if (!_.isInteger(value)) {\n            throw new Error('Password strength not integer');\n        }\n        this._passwordStrength = value;\n    }\n\n    generate(host, login, nonce) {\n        let url = this.forgeUrl(host, login, nonce);\n        let scopeHashHex = this._hasher.encode(url).toString('hex');\n        return this._generatePassword(scopeHashHex);\n    }\n\n    _generatePassword(scopeHashHex) {\n        let attempt = 0;\n        let password;\n        do {\n            attempt++;\n            password = this._generatePasswordItem(scopeHashHex, attempt);\n        } while (!this.isStrongPassword(password));\n        return password;\n    }\n\n    _generatePasswordItem(scopeHashHex, attempt) {\n        let password;\n        password = this._passwordEncoder.generate(scopeHashHex + attempt);\n        password = password.substr(0, this._passwordLength);\n        return password;\n    }\n\n    forgeUrl(host, login, nonce) {\n        if (!_.isInteger(nonce)) {\n            throw new Error('nonce not integer');\n        }\n        let params = {\n            secret: this._masterKey,\n            nonce: nonce.toString(),\n        };\n        return (new UrlGenerator()).generate(host, login, params);\n    }\n\n    isStrongPassword(password) {\n\n        let count = 0;\n\n        let isMatchNumber = !!password.match(/\\d+/);\n        if (isMatchNumber) {\n            count++;\n        }\n\n        let isMatchChar = !!password.match(/[!#$%*+=?@]+/);\n        if (isMatchChar) {\n            count++;\n        }\n\n        let isMatchLower = !!password.match(/[a-z]+/);\n        if (isMatchLower) {\n            count++;\n        }\n\n        let isMatchUpper = !!password.match(/[A-Z]+/);\n        if (isMatchUpper) {\n            count++;\n        }\n        return count >= this._passwordStrength;\n    }\n}\n","import _ from \"lodash\";\nimport ConvHelper from \"./ConvHelper\";\n\n/*function Utf8ArrayToStr(array) {\n    var out, i, len, c;\n    var char2, char3;\n\n    out = \"\";\n    len = array.length;\n    i = 0;\n    while(i < len) {\n        c = array[i++];\n        switch(c >> 4)\n        {\n            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n            // 0xxxxxxx\n            out += String.fromCharCode(c);\n            break;\n            case 12: case 13:\n            // 110x xxxx   10xx xxxx\n            char2 = array[i++];\n            out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n            break;\n            case 14:\n                // 1110 xxxx  10xx xxxx  10xx xxxx\n                char2 = array[i++];\n                char3 = array[i++];\n                out += String.fromCharCode(((c & 0x0F) << 12) |\n                    ((char2 & 0x3F) << 6) |\n                    ((char3 & 0x3F) << 0));\n                break;\n        }\n    }\n\n    return out;\n}*/\n\nfunction numberToBytes(number) {\n    // you can use constant number of bytes by using 8 or 4\n    const len = Math.ceil(Math.log2(number) / 8);\n    const byteArray = new Uint8Array(len);\n\n    for (let index = 0; index < byteArray.length; index++) {\n        const byte = number & 0xff;\n        byteArray[index] = byte;\n        number = (number - byte) / 256;\n    }\n\n    return byteArray;\n}\n\nfunction bytesToNumber(byteArray) {\n    let result = 0;\n    for (let i = byteArray.length - 1; i >= 0; i--) {\n        result = (result * 256) + byteArray[i];\n    }\n\n    return result;\n}\n\nexport default class Uint8ArrayHelper {\n\n    static encode(value) {\n        if(_.isInteger(value)) {\n            return numberToBytes(value);\n        }\n        if(value instanceof Uint8Array) {\n            return value;\n        }\n        return ConvHelper.toBuffer(value);\n    }\n\n    static decodeToArray(uint: Uint8Array) {\n        /*if(!uint instanceof Uint8Array) {\n            throw new Error('Value type not Uint8Array');\n        }*/\n        return Array.from(uint);\n    }\n\n    static decodeToString(uint: Uint8Array) {\n        /*if(!uint instanceof Uint8Array) {\n            throw new Error('Value type not Uint8Array');\n        }*/\n        // return Utf8ArrayToStr(uint);\n        // return String.fromCharCode.apply(null, uint);\n        // return new TextDecoder().decode(uint);\n        return uint.toString();\n    }\n\n    static decodeToInteger(uint: Uint8Array) {\n        /*if(!uint instanceof Uint8Array) {\n            throw new Error('Value type not Uint8Array');\n        }*/\n        // return Utf8ArrayToStr(uint);\n        // return String.fromCharCode.apply(null, uint);\n        // return new TextDecoder().decode(uint);\n        return bytesToNumber(uint);\n    }\n\n    static merge(uint1, uint2) {\n        let array1 = this.decodeToArray(uint1);\n        let array2 = this.decodeToArray(uint2);\n        for(let i in array2) {\n            let value2 = array2[i];\n            array1.push(value2);\n        }\n        return this.encode(array1);\n    }\n}\n","import HashHelper from \"../../../../../../packages/ext/hash/helpers/HashHelper\";\nimport ConvHelper from \"../../../../../../packages/ext/binary/helpers/ConvHelper\";\nimport _ from 'lodash';\nimport Sha256Hasher from \"../../../../../../packages/ext/hash/libs/encoders/hash/Sha256Hasher\";\nimport EncodeInterface from \"../../../../../../packages/core/contract/encoders/EncodeInterface\";\n\n/**\n * Цепочка хэшей\n *\n * Используется для добавления сложности\n *\n * Применение:\n *  - генерация хэша\n *  - защита от брутфорса\n *\n * Особенности:\n *  - сложно вычислить\n *  - сложно верифицировать\n */\nexport default abstract class BaseChainHash implements EncodeInterface {\n\n    protected cost: number;\n    protected hasher: EncodeInterface;\n\n    constructor(cost: number, hasher: EncodeInterface = null) {\n        if (cost < 1) {\n            throw new Error('Cost not can be less then 1');\n        }\n        this.cost = cost;\n        if (_.isEmpty(hasher)) {\n            hasher = new Sha256Hasher();\n        }\n        this.hasher = hasher;\n    }\n\n    encode(sourceValue) {\n        let valueBytes = this.prepareValue(sourceValue);\n        let hashBytes;\n        let scope = valueBytes;\n        for (let nonce = 0; nonce < this.cost; nonce++) {\n            hashBytes = this.generateHash(scope);\n            scope = this.forHash(valueBytes, hashBytes, scope, nonce);\n        }\n        return hashBytes;\n    }\n\n    protected prepareValue(sourceValue) {\n        return ConvHelper.toBuffer(sourceValue);\n    }\n\n    protected generateHash(scope) {\n        return this.hasher.encode(scope);\n        // return HashHelper.hash(this.algorithm, scope);\n    }\n\n    protected abstract forHash(valueBytes, hashBytes, scope, nonce: number);\n}\n","import Uint8ArrayHelper from \"../../../../../../packages/ext/binary/helpers/Uint8ArrayHelper\";\nimport BaseChainHash from \"./BaseChainHash\";\n\n/**\n * Слияние значения с хэшем\n *\n * В каждой итерации сливает байты значения и хэша\n */\nexport default class ChainHashV2 extends BaseChainHash {\n\n    protected forHash(valueBytes, hashBytes, scope, nonce: number) {\n        return Uint8ArrayHelper.merge(valueBytes, hashBytes);\n    }\n}\n","import HashHelper from \"../../../ext/hash/helpers/HashHelper\";\nimport basex from 'base-x';\nimport AlphabetEnum from \"../../../ext/baseX/enums/AlphabetEnum\";\n\nexport default class PasswordEncoder {\n\n    protected alphabet = AlphabetEnum.BASE_58 + \"!#$%&()*+-./:<=>?@[\\\\]_{}\";\n\n    constructor(alphabet = null) {\n        if (alphabet) {\n            this.alphabet = alphabet;\n        }\n    }\n\n    generate(scope) {\n        let hash = HashHelper.sha256(scope);\n        let baseX = basex(this.alphabet);\n        let out = baseX.encode(hash);\n        return out.substr(2);\n    }\n}\n","import PasswordGenerator from \"../libs/PasswordGenerator\";\nimport ChainHashV2 from \"../../../../crypto/bundles/encode/domain/libs/chainHash/ChainHashV2\";\nimport PasswordStrengthEnum from \"../enums/PasswordStrengthEnum\";\nimport PasswordEncoder from \"../libs/PasswordEncoder\";\nimport Pbkdf2ChainHash from \"../../../../crypto/bundles/encode/domain/libs/chainHash/Pbkdf2ChainHash\";\nimport HashHelper from \"../../../ext/hash/helpers/HashHelper\";\nimport Sha256Hasher from \"../../../ext/hash/libs/encoders/hash/Sha256Hasher\";\n\nclass PasswordGeneratorFactory {\n\n    createInstance(masterKey, passwordLength, cost, hashAlgorithm) {\n        let passwordEncoder = new PasswordEncoder();\n        let hasher = new ChainHashV2(cost, hashAlgorithm);\n        let passwordGenerator = new PasswordGenerator(hasher, passwordEncoder);\n        passwordGenerator.masterKey = masterKey;\n        passwordGenerator.passwordLength = passwordLength;\n        passwordGenerator.passwordStrength = PasswordStrengthEnum.STRONG;\n        return passwordGenerator;\n    }\n\n    createInstanceV1(masterKey, passwordLength) {\n        return this.createInstance18kSha256(masterKey, passwordLength);\n    }\n\n    createInstance18kSha256(masterKey, passwordLength) {\n        return this.createInstance(masterKey, passwordLength, 18000, new Sha256Hasher());\n    }\n\n    createInstance18kPbkdf2(masterKey, passwordLength) {\n        let cost = 18000;\n        let passwordEncoder = new PasswordEncoder();\n        let hasher = new Pbkdf2ChainHash(cost);\n        hasher.salt = HashHelper.sha256('passwordGenerator');\n        let passwordGenerator = new PasswordGenerator(hasher, passwordEncoder);\n        passwordGenerator.masterKey = masterKey;\n        passwordGenerator.passwordLength = passwordLength;\n        passwordGenerator.passwordStrength = PasswordStrengthEnum.STRONG;\n        return passwordGenerator;\n    }\n}\n\nexport default new PasswordGeneratorFactory();\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport ArticleService from \"../../../domain/services/ArticleService\";\nimport container from \"../../../../../core/container/singletons/container\";\n\nexport default function HelpPageLink(props) {\n    let name = props.name;\n    let title = props.children;\n    if (!title) {\n        let articleService: ArticleService = container.get(\"help.services.article\");\n        let menuItem = articleService.findOneByName(name);\n        title = menuItem.title;\n    }\n    return (\n        <Link to={'/help/' + name}>\n            {title}\n        </Link>\n    );\n}\n","import React, {Component} from 'react';\nimport PasswordGeneratorForm from \"../views/password/PasswordGeneratorForm\";\nimport passwordGeneratorFactory\n    from \"../../../../../packages/bundles/passwordGenerator/factories/passwordGeneratorFactory\";\nimport HelpModalLink from \"../../../../../packages/bundles/help/web/widgets/modalLink/HelpModalLink\";\nimport {Button} from \"react-bootstrap\";\nimport HelpPageLink from \"../../../../../packages/bundles/help/web/widgets/pageLink/HelpPageLink\";\n\nexport default class Password extends Component {\n\n    handleSubmit(values, {setSubmitting}) {\n        // let passwordGenerator = new PasswordGenerator(values.masterKey, 10);\n        let passwordGenerator = passwordGeneratorFactory.createInstance18kPbkdf2(values.masterKey, values.passwordLength);\n        values.password = passwordGenerator.generate(values.host, values.login, values.nonce);\n        setSubmitting(false);\n    }\n\n    render() {\n        let values = {\n            masterKey: '',\n            host: '',\n            login: '',\n            nonce: 1,\n            passwordLength: 10,\n            password: '',\n        };\n        return (\n            <div>\n                <HelpPageLink name='utils.password.index'>\n                    <Button variant=\"link\">?</Button>\n                </HelpPageLink>\n                <PasswordGeneratorForm onSubmit={this.handleSubmit} values={values}/>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport PasswordComponent from \"../../../tool/bundles/utils/web/components/password\";\n\nexport default (\n    <>\n        <Route exact path=\"/\" component={PasswordComponent}/>\n    </>\n);\n","import React, {Component} from 'react';\n\nexport default class Main extends Component {\n\n    public props;\n\n    render() {\n        return (\n            <>\n                {this.props.children}\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport {useLocation} from \"react-router\";\nimport eventEmitter from \"../../../core/event/singletons/eventEmitter\";\nimport PageTitleEventEnum from \"../enums/PageTitleEventEnum\";\n\nfunction beforeRender(location: Location) {\n    eventEmitter.emit(PageTitleEventEnum.BEFORE_RENDER, location);\n}\n\nexport default function BeforeRenderWidget(props) {\n    const location = useLocation();\n    React.useEffect(() => beforeRender(location), [location]);\n    return <></>;\n}\n","import React from 'react';\nimport Main from \"../../../components/Main\";\nimport {Container} from \"react-bootstrap\";\nimport '../common/style/index.scss';\nimport BeforeRenderWidget from \"../../../../../../packages/ext/app/widgets/BeforeRenderWidget\";\n\nexport default function AppBlankLayout(props) {\n    return (\n        <>\n            <BeforeRenderWidget/>\n            <Container className='mt-3' as=\"main\" role=\"main\">\n                <Main>{props.children}</Main>\n            </Container>\n        </>\n    );\n}\n","import React from 'react';\nimport WebBlankLayout from \"../web/blankLayout\";\nimport {Switch} from 'react-router-dom';\n\nexport default function AppCommonBlankLayout(props) {\n    return (\n        <Switch>\n            <WebBlankLayout>\n                {props.routes}\n            </WebBlankLayout>\n        </Switch>\n    );\n}\n","import React from \"react\";\nimport {BrowserRouter} from 'react-router-dom';\n\nconst AppSlashRouter = function (props) {\n    return (\n        <BrowserRouter>\n            {props.children}\n        </BrowserRouter>\n    );\n};\n\nexport default AppSlashRouter;\n","import AppSlashRouter from \"./AppSlashRouter\";\nimport AppHashRouter from \"./AppHashRouter\";\nimport RouterTypeEnum from \"../../../../common/app/domain/enums/RouterTypeEnum\";\nimport configManager from \"../../../core/configManager/singletons/configManager\";\n\nlet AppRouter;\nlet routerType = configManager.get('router.type');\nif(routerType === RouterTypeEnum.SLASH) {\n    AppRouter = AppSlashRouter;\n} else if(routerType === RouterTypeEnum.HASH) {\n    AppRouter = AppHashRouter;\n}\n\nexport default AppRouter;\n","import React from \"react\";\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\n\nconst AppHashRouter = function (props) {\n    return (\n        <BrowserRouter>\n            <HashRouter>\n                {props.children}\n            </HashRouter>\n        </BrowserRouter>\n    );\n};\n\nexport default AppHashRouter;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport container from \"../../../../core/container/singletons/container\";\n\nfunction Loader(props) {\n\n    let state = props.loaderStatus;\n\n    let LoaderWidget = props['type'];\n    let isLoading;\n    if (state.hasOwnProperty('isLoading')) {\n        isLoading = state.isLoading;\n    } else {\n        isLoading = container.get('loader.services.status').isLoading(props.name);\n    }\n    return (\n        isLoading ? (\n            LoaderWidget ? (\n                <LoaderWidget/>\n            ) : (\n                <div>Loading....</div>\n            )\n        ) : (\n            props.children\n        )\n    );\n\n    return props.children;\n}\n\n/*class Loader extends Component {\n\n    public props;\n\n    render() {\n        let LoaderWidget = this.props.type;\n        let isLoading;\n        if (this.props.hasOwnProperty('isLoading')) {\n            isLoading = this.props.isLoading;\n        } else {\n            isLoading = container.get('loader.services.status').isLoading(this.props.name);\n        }\n        return (\n            isLoading ? (\n                LoaderWidget ? (\n                    <LoaderWidget/>\n                ) : (\n                    <div>Loading....</div>\n                )\n            ) : (\n                this.props.children\n            )\n        );\n    }\n}*/\n\nconst mapStateToProps = (store) => {\n    return {\n        loaderStatus: store.loaderStatus,\n    };\n};\nexport default connect(mapStateToProps)(Loader);\n","import React, {Component} from 'react';\nimport container from \"../../../core/container/singletons/container\";\nimport breadcrumbFacade from \"../../../bundles/breadcrumb/domain/facades/breadcrumbFacade\";\nimport Loader from \"../../../bundles/loader/web/widget/loader\";\nimport pageHead from \"../../pageTitle/singletons/pageTitle\";\nimport _ from \"lodash\"\nimport RouteHelper from \"../helpers/RouteHelper\";\n\nexport default abstract class BaseComponent extends Component {\n\n    protected default = {};\n\n    // protected defaultState() {\n    //     return {};\n    // }\n\n    setTitle(title: string) {\n        pageHead.setPageTitle(title);\n    }\n\n    getLoader() {\n        return null;\n    }\n\n    addBreadcrumb(title: string, route: string = null) {\n        breadcrumbFacade.add(title, route);\n    }\n\n    getClassName() {\n        return this.constructor.name;\n    }\n\n    loaderRender(children) {\n        return (\n            <Loader type={this.getLoader()} name={this.getClassName()}>\n                {children}\n            </Loader>\n        );\n    }\n\n    wrapper(props) {\n        if (this.getLoader()) {\n            return this.loaderRender(props.children);\n        } else {\n            return props.children;\n        }\n    }\n\n    startLoad() {\n        container.get('loader.services.status').startLoad(this.getClassName());\n    }\n\n    endLoad() {\n        container.get('loader.services.status').endLoad(this.getClassName());\n    }\n\n    isLoading() {\n        return container.get('loader.services.status').isLoading(this.getClassName());\n    }\n\n    redirect(uri) {\n        if (uri === null) {\n            throw new Error('Empty uri for redirect!');\n        }\n        // RouteHelper.redirect(uri);\n        this.props['history'].push(uri);\n    }\n\n    redirectToHome() {\n        this.redirect('/');\n    }\n\n    componentDidMountIfUpdated(prevProps: Readonly<{}>, prevState?: Readonly<{}>, snapshot?: any): void {\n        let prevLocation = _.get(prevProps, 'location.search', '');\n        let currentLocation = _.get(this.props, 'location.search', '');\n        // let prevLocation = prevProps['location'].search;\n        // let currentLocation = this.props[\"location\"].search;\n\n        let isUpdated = currentLocation !== prevLocation;\n        if (isUpdated) {\n            this.componentDidMount();\n        }\n    }\n}\n","import React from \"react\";\nimport {Modal} from \"react-bootstrap\";\n\nexport default function ModalView(props) {\n    let size = props.size ? props.size : 'md';\n    let FooterRender = props.footerRender;\n    return (\n        <Modal\n            size={size}\n            show={props.isVisible}\n            onHide={props.onHide}\n        >\n            {props.title ? (\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {props.title}\n                    </Modal.Title>\n                </Modal.Header>\n            ) : ''}\n\n            {props.content ?? null}\n\n            {props.body ? (\n                <Modal.Body>\n                    {props.body}\n                </Modal.Body>\n            ) : ''}\n\n            {props.footer ? (\n                <Modal.Footer>\n                    {props.footer}\n                </Modal.Footer>\n            ) : ''}\n\n            {FooterRender ? (\n                <FooterRender {...props} />\n            ) : ''}\n\n        </Modal>\n    );\n}\n","import container from \"../../../../core/container/singletons/container\";\nimport ConfirmService from \"../services/ConfirmService\";\nimport ModalService from \"../services/ModalService\";\n\nclass ModalFacade {\n\n    private confirmService: ConfirmService;\n    private modalService: ModalService;\n\n    constructor(confirmService: ConfirmService, modalService: ModalService) {\n        this.confirmService = confirmService;\n        this.modalService = modalService;\n    }\n\n    showContent(title, content) {\n        this.showByEntity({\n            title,\n            content,\n        });\n    }\n\n    showByEntity(entity) {\n        this.modalService.showByEntity(entity);\n    }\n\n    showInfo(title, body) {\n        let modalEntity = {\n            title: title,\n            body: body,\n            size: 'lg',\n        };\n        this.showByEntity(modalEntity);\n    }\n\n    showConfirm(title, body, onConfirm = null, onHide = null) {\n        this.confirmService.show(title, body, onConfirm, onHide);\n    }\n\n    showDeleteConfirm(title, onConfirm, onHide = null) {\n        this.showConfirm(\"Delete confirm\", 'Are you sure Delete \"' + title + '\"?', onConfirm, onHide);\n    }\n\n    close() {\n        this.modalService.close();\n    }\n}\n\nlet confirmService: ConfirmService = container.get('modal.services.confirm');\nlet modalService: ModalService = container.get('modal.services.modal');\n\nexport default new ModalFacade(confirmService, modalService);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport BaseComponent from \"../../../../ext/react/base/BaseComponent\";\nimport ModalView from \"./views/modalView\";\nimport modalFacade from \"../../domain/facades/modalFacade\";\nimport _ from \"lodash\";\n\nclass ModalContainerWidget extends BaseComponent {\n\n    render() {\n        let confirmState1 = this.props[\"modalItem\"];\n\n        if(!confirmState1) {\n            return '';\n        }\n\n        let confirmState = _.clone(confirmState1);\n\n        if (confirmState1.onConfirm) {\n            confirmState.onConfirm = () => {\n                modalFacade.close();\n                confirmState1.onConfirm();\n            };\n        }\n\n        confirmState.onHide = () => {\n            modalFacade.close();\n            if (typeof confirmState1.onHide === 'function') {\n                confirmState1.onHide();\n            }\n        };\n\n        return (\n            <ModalView {...confirmState}/>\n        );\n    }\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        modalItem: store.modalItem,\n    };\n};\n\nexport default connect(mapStateToProps)(ModalContainerWidget);\n","import React from \"react\";\nimport {ToastContainer as ToastifyContainer} from \"react-toastify\";\n\nimport 'react-toastify/dist/ReactToastify.css';\n// import 'react-toastify/scss/main.scss';\n\nexport default function ToastContainerWidget() {\n    return (\n        <ToastifyContainer/>\n    );\n}\n","import React from \"react\";\nimport ModalContainerWidget from \"../../../../packages/bundles/modal/web/widgets/ModalContainerWidget\";\nimport ToastContainerWidget from \"../../../../packages/bundles/notify/web/widgets/ToastContainerWidget\";\n\nexport default function FloatContainers(props) {\n    return (\n        <>\n            <ToastContainerWidget/>\n            <ModalContainerWidget/>\n        </>\n    );\n}\n","import React from 'react';\nimport Routes from \"./config/routes\";\nimport AppCommonBlankLayout from \"../../common/app/web/layouts/adminLte/common/blankLayout\";\nimport AppRouter from \"../../packages/ext/app/router\";\nimport FloatContainers from \"../../common/app/web/components/FloatContainers\";\n\nexport default function BlankApp(props) {\n    return (\n        <>\n            <AppRouter>\n                <AppCommonBlankLayout routes={Routes}/>\n            </AppRouter>\n\n            <FloatContainers/>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport container from \"./packages/core/container/singletons/container\";\nimport './common/app/domain/libs/initApp';\nimport App from \"./passgen/app\";\n// import App from \"./incloud/app\";\n// import App from \"./crypto/app\";\n\nlet store = container.get('app.store');\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}